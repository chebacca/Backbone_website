const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-fk-SiQU0.js","assets/index-CCLTFbMI.js","assets/mui-D8UjIA2s.js","assets/vendor-CjD1bmmO.js","assets/stripe-CUttI3Gx.js","assets/index-CBai7h7s.css","assets/index.esm-COtph9ny.js","assets/index.esm-CZcVTLdu.js","assets/index.esm-Bm1DnCIa.js"])))=>i.map(i=>d[i]);
var k=Object.defineProperty;var q=(l,e,t)=>e in l?k(l,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):l[e]=t;var u=(l,e,t)=>q(l,typeof e!="symbol"?e+"":e,t);import{_ as F}from"./index-CCLTFbMI.js";import"./mui-D8UjIA2s.js";import"./vendor-CjD1bmmO.js";import"./stripe-CUttI3Gx.js";const g=class g{constructor(){u(this,"db");u(this,"auth")}static getInstance(){return g.instance||(g.instance=new g),g.instance}async initialize(){const e=await F(()=>import("./firebase-fk-SiQU0.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=e.db,this.auth=e.auth}getCurrentUser(){var e;return(e=this.auth)==null?void 0:e.currentUser}async getDocumentById(e,t){try{const{doc:r,getDoc:a}=await F(async()=>{const{doc:o,getDoc:n}=await import("./index.esm-CZcVTLdu.js");return{doc:o,getDoc:n}},__vite__mapDeps([7,6])),i=r(this.db,e,t),s=await a(i);if(s.exists()){const o=s.data();return{id:s.id,...this.convertFirestoreDates(o)}}return null}catch(r){return console.error(`‚ùå [FirestoreAdapter] Error getting document ${t} from ${e}:`,r),null}}async queryDocuments(e,t=[]){try{const{collection:r,query:a,where:i,getDocs:s}=await F(async()=>{const{collection:m,query:h,where:$,getDocs:O}=await import("./index.esm-CZcVTLdu.js");return{collection:m,query:h,where:$,getDocs:O}},__vite__mapDeps([7,6])),o=r(this.db,e);let n;if(t.length>0){let m=[];for(const h of t)m.push(i(h.field,h.operator,h.value));n=a(o,...m)}else n=a(o);const c=await s(n),d=[];return c.forEach(m=>{const h=m.data();d.push({id:m.id,...this.convertFirestoreDates(h)})}),d}catch(r){return console.error(`‚ùå [FirestoreAdapter] Error querying ${e}:`,r),[]}}async createDocument(e,t){try{const{collection:r,addDoc:a}=await F(async()=>{const{collection:o,addDoc:n}=await import("./index.esm-CZcVTLdu.js");return{collection:o,addDoc:n}},__vite__mapDeps([7,6])),i=this.cleanDocumentData({...t,createdAt:new Date,updatedAt:new Date});return{id:(await a(r(this.db,e),i)).id,...i}}catch(r){return console.error(`‚ùå [FirestoreAdapter] Error creating document in ${e}:`,r),null}}async updateDocument(e,t,r){try{const{doc:a,updateDoc:i}=await F(async()=>{const{doc:o,updateDoc:n}=await import("./index.esm-CZcVTLdu.js");return{doc:o,updateDoc:n}},__vite__mapDeps([7,6])),s=this.cleanDocumentData({...r,updatedAt:new Date});return await i(a(this.db,e,t),s),!0}catch(a){return console.error(`‚ùå [FirestoreAdapter] Error updating document ${t} in ${e}:`,a),!1}}async deleteDocument(e,t){try{const{doc:r,deleteDoc:a}=await F(async()=>{const{doc:i,deleteDoc:s}=await import("./index.esm-CZcVTLdu.js");return{doc:i,deleteDoc:s}},__vite__mapDeps([7,6]));return await a(r(this.db,e,t)),!0}catch(r){return console.error(`‚ùå [FirestoreAdapter] Error deleting document ${t} from ${e}:`,r),!1}}cleanDocumentData(e){const t={};for(const[r,a]of Object.entries(e))if(a!==void 0){if(a===null){t[r]=null;continue}if(typeof a=="object"&&!Array.isArray(a)&&!(a instanceof Date)){t[r]=this.cleanDocumentData(a);continue}t[r]=a}return t}convertFirestoreDates(e){const t={};for(const[r,a]of Object.entries(e))a&&typeof a=="object"&&a.toDate&&typeof a.toDate=="function"?t[r]=a.toDate().toISOString():a&&typeof a=="object"&&!Array.isArray(a)?t[r]=this.convertFirestoreDates(a):t[r]=a;return t}};u(g,"instance");let S=g;class E{constructor(e){u(this,"config");u(this,"firestoreAdapter");this.config=e,this.firestoreAdapter=S.getInstance()}isWebOnlyMode(){return this.config.isWebOnlyMode}getConfig(){return this.config}async apiRequest(e,t="GET",r,a){try{const s=`${this.config.apiBaseUrl||"/api"}/${e.startsWith("/")?e.substring(1):e}`,o={"Content-Type":"application/json",...a},n={method:t,headers:o,credentials:"include"};r&&(t==="POST"||t==="PATCH")&&(n.body=JSON.stringify(r));const c=await fetch(s,n);if(!c.ok)throw new Error(`API request failed: ${c.status} ${c.statusText}`);const d=c.headers.get("content-type");return d&&d.includes("application/json")?await c.json():await c.text()}catch(i){throw console.error(`‚ùå [BaseService] API request failed for ${e}:`,i),i}}handleError(e,t){console.error(`‚ùå [${this.constructor.name}] Error in ${t}:`,e)}}var f=(l=>(l.ADMIN="ADMIN",l.MEMBER="MEMBER",l.VIEWER="VIEWER",l.OWNER="OWNER",l.DO_ER="DO_ER",l))(f||{}),P=(l=>(l.ACTIVE="active",l.ARCHIVED="archived",l.DELETED="deleted",l.DRAFT="draft",l))(P||{});const w=class w extends E{constructor(e){super(e)}static getInstance(e){return w.instance||(w.instance=new w(e)),w.instance}async getProjects(){try{if(console.log("üöÄ [ProjectService] Getting all projects"),this.isWebOnlyMode())return await this.getProjectsFromFirestore();try{return await this.apiRequest("projects")}catch{return console.warn("‚ö†Ô∏è [ProjectService] API request failed, falling back to Firestore"),await this.getProjectsFromFirestore()}}catch(e){return this.handleError(e,"getProjects"),[]}}async getProject(e){try{if(console.log(`üöÄ [ProjectService] Getting project: ${e}`),this.isWebOnlyMode())return await this.getProjectFromFirestore(e);try{return await this.apiRequest(`projects/${e}`)}catch{return console.warn("‚ö†Ô∏è [ProjectService] API request failed, falling back to Firestore"),await this.getProjectFromFirestore(e)}}catch(t){return this.handleError(t,`getProject(${e})`),null}}async createProject(e){try{if(console.log("üöÄ [ProjectService] Creating new project"),this.isWebOnlyMode())return await this.createProjectInFirestore(e);try{return await this.apiRequest("projects","POST",e)}catch{return console.warn("‚ö†Ô∏è [ProjectService] API request failed, falling back to Firestore"),await this.createProjectInFirestore(e)}}catch(t){return this.handleError(t,"createProject"),null}}async updateProject(e,t){try{if(console.log(`üöÄ [ProjectService] Updating project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,t);try{return await this.apiRequest(`projects/${e}`,"PATCH",t)}catch{return console.warn("‚ö†Ô∏è [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,t)}}catch(r){return this.handleError(r,`updateProject(${e})`),null}}async archiveProject(e){try{if(console.log(`üöÄ [ProjectService] Archiving project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,{status:P.ARCHIVED})!==null;try{return await this.apiRequest(`projects/${e}/archive`,"POST"),!0}catch{return console.warn("‚ö†Ô∏è [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,{status:P.ARCHIVED})!==null}}catch(t){return this.handleError(t,`archiveProject(${e})`),!1}}async restoreProject(e){try{if(console.log(`üöÄ [ProjectService] Restoring project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,{status:P.ACTIVE})!==null;try{return await this.apiRequest(`projects/${e}/restore`,"POST"),!0}catch{return console.warn("‚ö†Ô∏è [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,{status:P.ACTIVE})!==null}}catch(t){return this.handleError(t,`restoreProject(${e})`),!1}}async getProjectsFromFirestore(){try{console.log("üîç [ProjectService] Getting projects from Firestore"),await this.firestoreAdapter.initialize();const e=this.firestoreAdapter.getCurrentUser(),t="24H6zaiCUycuT8ukx9Jz";return console.log("‚úÖ [ProjectService] Using organization ID:",t),(await this.firestoreAdapter.queryDocuments("projects",[{field:"organizationId",operator:"==",value:t}])).sort((a,i)=>{const s=a.lastAccessedAt?new Date(a.lastAccessedAt).getTime():0;return(i.lastAccessedAt?new Date(i.lastAccessedAt).getTime():0)-s})}catch(e){return this.handleError(e,"getProjectsFromFirestore"),[]}}async getProjectFromFirestore(e){try{return console.log(`üîç [ProjectService] Getting project from Firestore: ${e}`),await this.firestoreAdapter.initialize(),await this.firestoreAdapter.getDocumentById("projects",e)}catch(t){return this.handleError(t,`getProjectFromFirestore(${e})`),null}}async createProjectInFirestore(e){try{console.log("üîç [ProjectService] Creating project in Firestore"),await this.firestoreAdapter.initialize();const t=this.firestoreAdapter.getCurrentUser();if(!t)return console.warn("‚ö†Ô∏è [ProjectService] No authenticated user for project creation"),null;const r={...e,ownerId:e.ownerId||t.uid,status:e.status||P.ACTIVE,teamMembers:e.teamMembers||[]};return await this.firestoreAdapter.createDocument("projects",r)}catch(t){return this.handleError(t,"createProjectInFirestore"),null}}async updateProjectInFirestore(e,t){try{console.log(`üîç [ProjectService] Updating project in Firestore: ${e}`),await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.getDocumentById("projects",e);return r?await this.firestoreAdapter.updateDocument("projects",e,t)?{...r,...t,id:e}:null:(console.warn(`‚ö†Ô∏è [ProjectService] Project not found: ${e}`),null)}catch(r){return this.handleError(r,`updateProjectInFirestore(${e})`),null}}};u(w,"instance");let A=w;const y=class y extends E{constructor(e){super(e)}static getInstance(e){return y.instance||(y.instance=new y(e)),y.instance}async listDatasets(e){try{if(console.log("üöÄ [DatasetService] Listing datasets with params:",e),this.isWebOnlyMode())return await this.getAvailableDatasetsFromFirestore(e);const t=new URLSearchParams;e!=null&&e.organizationId&&t.append("organizationId",e.organizationId),e!=null&&e.visibility&&t.append("visibility",e.visibility),e!=null&&e.backend&&e.backend!=="all"&&t.append("backend",e.backend),e!=null&&e.query&&t.append("query",e.query);try{return await this.apiRequest(`datasets${t.toString()?`?${t}`:""}`)}catch{return console.warn("‚ö†Ô∏è [DatasetService] API request failed, falling back to Firestore"),await this.getAvailableDatasetsFromFirestore(e)}}catch(t){return this.handleError(t,"listDatasets"),[]}}async createDataset(e){try{if(console.log("üöÄ [DatasetService] Creating dataset"),this.isWebOnlyMode())return await this.createDatasetInFirestore(e);const t={...e};try{return await this.apiRequest("datasets","POST",t)}catch{return console.warn("‚ö†Ô∏è [DatasetService] API request failed, falling back to Firestore"),await this.createDatasetInFirestore(e)}}catch(t){return this.handleError(t,"createDataset"),null}}async getProjectDatasets(e){try{if(console.log(`üöÄ [DatasetService] Getting datasets for project: ${e}`),this.isWebOnlyMode())return await this.getProjectDatasetsFromFirestore(e);try{return await this.apiRequest(`datasets/project/${e}`,"GET")}catch{return console.warn("‚ö†Ô∏è [DatasetService] API request failed, falling back to Firestore"),await this.getProjectDatasetsFromFirestore(e)}}catch(t){return this.handleError(t,`getProjectDatasets(${e})`),[]}}async assignDatasetToProject(e,t){try{if(console.log(`üöÄ [DatasetService] Assigning dataset ${t} to project ${e}`),this.isWebOnlyMode())return await this.assignDatasetToProjectInFirestore(e,t);try{return await this.apiRequest(`projects/${e}/datasets/${t}`,"POST"),!0}catch{return console.warn("‚ö†Ô∏è [DatasetService] API request failed, falling back to Firestore"),await this.assignDatasetToProjectInFirestore(e,t)}}catch(r){return this.handleError(r,`assignDatasetToProject(${e}, ${t})`),!1}}async unassignDatasetFromProject(e,t){try{if(console.log(`üöÄ [DatasetService] Unassigning dataset ${t} from project ${e}`),this.isWebOnlyMode())return await this.unassignDatasetFromProjectInFirestore(e,t);try{return await this.apiRequest(`projects/${e}/datasets/${t}`,"DELETE"),!0}catch{return console.warn("‚ö†Ô∏è [DatasetService] API request failed, falling back to Firestore"),await this.unassignDatasetFromProjectInFirestore(e,t)}}catch(r){return this.handleError(r,`unassignDatasetFromProject(${e}, ${t})`),!1}}async getAvailableDatasetsFromFirestore(e){try{console.log("üîç [DatasetService] Fetching available datasets from Firestore"),await this.firestoreAdapter.initialize();const t="24H6zaiCUycuT8ukx9Jz";console.log("‚úÖ [DatasetService] Using organization ID:",t),console.log("üè¢ [DatasetService] Fetching available datasets for organization:",t);const r=await this.firestoreAdapter.queryDocuments("datasets",[{field:"organizationId",operator:"==",value:(e==null?void 0:e.organizationId)||t}]),a=await this.firestoreAdapter.queryDocuments("project_datasets",[]),i=new Set(a.map(n=>n.datasetId));let o=r.filter(n=>!i.has(n.id));if(e!=null&&e.backend&&e.backend!=="all"&&(o=o.filter(n=>{var d;return(((d=n.storage)==null?void 0:d.backend)||"firestore")===e.backend})),e!=null&&e.query){const n=e.query.toLowerCase();o=o.filter(c=>{const d=(c.name||"").toLowerCase(),m=(c.description||"").toLowerCase();return d.includes(n)||m.includes(n)})}return e!=null&&e.visibility&&(o=o.filter(n=>(n.visibility||"private")===e.visibility)),o.sort((n,c)=>{const d=new Date(n.createdAt||"").getTime();return new Date(c.createdAt||"").getTime()-d}),console.log(`‚úÖ [DatasetService] Found ${o.length} available datasets from Firestore`),o}catch(t){return this.handleError(t,"getAvailableDatasetsFromFirestore"),[]}}async listDatasetsFromFirestore(e){try{console.log("üîç [DatasetService] Fetching datasets from Firestore with params:",e),await this.firestoreAdapter.initialize();const t="24H6zaiCUycuT8ukx9Jz";console.log("‚úÖ [DatasetService] Using organization ID:",t),console.log("üè¢ [DatasetService] Fetching datasets for organization:",t);const r=[];r.push({field:"organizationId",operator:"==",value:(e==null?void 0:e.organizationId)||t});let i=await this.firestoreAdapter.queryDocuments("datasets",r);if(e!=null&&e.backend&&e.backend!=="all"&&(i=i.filter(s=>{var n;return(((n=s.storage)==null?void 0:n.backend)||"firestore")===e.backend})),e!=null&&e.query){const s=e.query.toLowerCase();i=i.filter(o=>{const n=(o.name||"").toLowerCase(),c=(o.description||"").toLowerCase();return n.includes(s)||c.includes(s)})}return e!=null&&e.visibility&&(i=i.filter(s=>(s.visibility||"private")===e.visibility)),i.sort((s,o)=>{const n=new Date(s.createdAt||"").getTime();return new Date(o.createdAt||"").getTime()-n}),console.log(`‚úÖ [DatasetService] Found ${i.length} datasets from Firestore`),i}catch(t){return this.handleError(t,"listDatasetsFromFirestore"),[]}}async createDatasetInFirestore(e){try{console.log("üîç [DatasetService] Creating dataset in Firestore"),await this.firestoreAdapter.initialize();let t=e.organizationId;if(t||(t="24H6zaiCUycuT8ukx9Jz",console.log("‚úÖ [DatasetService] Using organization ID for dataset creation:",t)),!t)return console.warn("‚ö†Ô∏è [DatasetService] No organization ID found for dataset creation"),null;const r={...e,ownerId:"l5YKvrhAD72EV2MnugbS",organizationId:t,visibility:e.visibility||"private",storage:e.storage||{backend:"firestore"},status:e.status||"active"};return await this.firestoreAdapter.createDocument("datasets",r)}catch(t){return this.handleError(t,"createDatasetInFirestore"),null}}async getProjectDatasetsFromFirestore(e){try{console.log(`üîç [DatasetService] Fetching datasets from Firestore for project: ${e}`),await this.firestoreAdapter.initialize();const t=await this.firestoreAdapter.queryDocuments("project_datasets",[{field:"projectId",operator:"==",value:e}]);if(t.length===0)return console.log(`‚úÖ [DatasetService] No datasets found for project ${e}`),[];const r=t.map(i=>i.datasetId),a=[];for(const i of r){const s=await this.firestoreAdapter.getDocumentById("datasets",i);s&&a.push(s)}return a.sort((i,s)=>{const o=new Date(i.createdAt||"").getTime();return new Date(s.createdAt||"").getTime()-o}),console.log(`‚úÖ [DatasetService] Found ${a.length} datasets for project ${e}`),a}catch(t){return this.handleError(t,`getProjectDatasetsFromFirestore(${e})`),[]}}async assignDatasetToProjectInFirestore(e,t){try{console.log(`üîç [DatasetService] Assigning dataset to project in Firestore: ${e}, ${t}`),await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.getDocumentById("datasets",t);if(!r)return console.warn(`‚ö†Ô∏è [DatasetService] Dataset not found: ${t}`),!1;if(!await this.firestoreAdapter.getDocumentById("projects",e))return console.warn(`‚ö†Ô∏è [DatasetService] Project not found: ${e}`),!1;if(!await this.firestoreAdapter.updateDocument("datasets",t,{projectId:e,updatedAt:new Date().toISOString()}))return console.warn(`‚ö†Ô∏è [DatasetService] Failed to update dataset: ${t}`),!1;const s={projectId:e,datasetId:t,addedByUserId:r.ownerId||"system",addedAt:new Date().toISOString(),createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return await this.firestoreAdapter.createDocument("project_datasets",s)?(await this.firestoreAdapter.updateDocument("projects",e,{updatedAt:new Date().toISOString(),lastAccessedAt:new Date().toISOString()})||console.warn(`‚ö†Ô∏è [DatasetService] Failed to update project: ${e}, but dataset assignment succeeded`),console.log("‚úÖ [DatasetService] Dataset successfully assigned to project in Firestore"),!0):(console.warn("‚ö†Ô∏è [DatasetService] Failed to create project-dataset link"),await this.firestoreAdapter.updateDocument("datasets",t,{projectId:null,updatedAt:new Date().toISOString()}),!1)}catch(r){return this.handleError(r,`assignDatasetToProjectInFirestore(${e}, ${t})`),!1}}async unassignDatasetFromProjectInFirestore(e,t){try{console.log(`üîç [DatasetService] Unassigning dataset from project in Firestore: ${e}, ${t}`),await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.getDocumentById("datasets",t);if(!r)return console.warn(`‚ö†Ô∏è [DatasetService] Dataset not found: ${t}`),!1;if(r.projectId!==e)return console.warn(`‚ö†Ô∏è [DatasetService] Dataset is not assigned to this project: ${t}, ${e}`),!1;if(!await this.firestoreAdapter.updateDocument("datasets",t,{projectId:null,updatedAt:new Date().toISOString()}))return console.warn(`‚ö†Ô∏è [DatasetService] Failed to update dataset: ${t}`),!1;const i=await this.firestoreAdapter.queryDocuments("project_datasets",[{field:"projectId",operator:"==",value:e},{field:"datasetId",operator:"==",value:t}]);return i.length>0&&!await this.firestoreAdapter.deleteDocument("project_datasets",i[0].id)?(console.warn("‚ö†Ô∏è [DatasetService] Failed to delete project-dataset link"),await this.firestoreAdapter.updateDocument("datasets",t,{projectId:e,updatedAt:new Date().toISOString()}),!1):(await this.firestoreAdapter.updateDocument("projects",e,{updatedAt:new Date().toISOString(),lastAccessedAt:new Date().toISOString()})||console.warn(`‚ö†Ô∏è [DatasetService] Failed to update project: ${e}, but dataset unassignment succeeded`),console.log("‚úÖ [DatasetService] Dataset successfully unassigned from project in Firestore"),!0)}catch(r){return this.handleError(r,`unassignDatasetFromProjectInFirestore(${e}, ${t})`),!1}}};u(y,"instance");let j=y;const b=class b extends E{constructor(e){super(e)}static getInstance(e){return b.instance||(b.instance=new b(e)),b.instance}async getLicensedTeamMembers(e){try{if(console.log("üöÄ [TeamMemberService] Getting licensed team members with options:",e),this.isWebOnlyMode())return await this.getLicensedTeamMembersFromFirestore(e);const t=new URLSearchParams;e!=null&&e.search&&t.append("search",e.search),e!=null&&e.excludeProjectId&&t.append("excludeProjectId",e.excludeProjectId);const r=`team-members/licensed${t.toString()?`?${t.toString()}`:""}`;try{return await this.apiRequest(r)}catch{return console.warn("‚ö†Ô∏è [TeamMemberService] API request failed, falling back to Firestore"),await this.getLicensedTeamMembersFromFirestore(e)}}catch(t){return this.handleError(t,"getLicensedTeamMembers"),[]}}async getProjectTeamMembers(e){try{if(console.log("üöÄ [TeamMemberService] Getting team members for project:",e),this.isWebOnlyMode())return await this.getProjectTeamMembersFromFirestore(e);try{return await this.apiRequest(`projects/${e}/team-members`)}catch{return console.warn("‚ö†Ô∏è [TeamMemberService] API request failed, falling back to Firestore"),await this.getProjectTeamMembersFromFirestore(e)}}catch(t){return this.handleError(t,`getProjectTeamMembers(${e})`),[]}}async addTeamMemberToProject(e,t,r=f.DO_ER){try{if(console.log("üöÄ [TeamMemberService] Adding team member to project:",{projectId:e,teamMemberId:t,role:r}),this.isWebOnlyMode())return await this.addTeamMemberToProjectInFirestore(e,t,r);try{return await this.apiRequest(`projects/${e}/team-members`,"POST",{teamMemberId:t,role:r}),!0}catch{return console.warn("‚ö†Ô∏è [TeamMemberService] API request failed, falling back to Firestore"),await this.addTeamMemberToProjectInFirestore(e,t,r)}}catch(a){return this.handleError(a,`addTeamMemberToProject(${e}, ${t})`),!1}}async removeTeamMemberFromProject(e,t){try{if(console.log("üöÄ [TeamMemberService] Removing team member from project:",{projectId:e,teamMemberId:t}),this.isWebOnlyMode())return await this.removeTeamMemberFromProjectInFirestore(e,t);try{return await this.apiRequest(`projects/${e}/team-members/${t}`,"DELETE"),!0}catch{return console.warn("‚ö†Ô∏è [TeamMemberService] API request failed, falling back to Firestore"),await this.removeTeamMemberFromProjectInFirestore(e,t)}}catch(r){return this.handleError(r,`removeTeamMemberFromProject(${e}, ${t})`),!1}}async updateTeamMemberRole(e,t,r){try{if(console.log("üöÄ [TeamMemberService] Updating team member role:",{projectId:e,teamMemberId:t,role:r}),this.isWebOnlyMode())return await this.updateTeamMemberRoleInFirestore(e,t,r);try{return await this.apiRequest(`projects/${e}/team-members/${t}/role`,"PATCH",{role:r}),!0}catch{return console.warn("‚ö†Ô∏è [TeamMemberService] API request failed, falling back to Firestore"),await this.updateTeamMemberRoleInFirestore(e,t,r)}}catch(a){return this.handleError(a,`updateTeamMemberRole(${e}, ${t})`),!1}}async validateTeamMemberCredentials(e,t){try{if(console.log("üöÄ [TeamMemberService] Validating team member credentials for:",e),this.isWebOnlyMode())return await this.validateTeamMemberCredentialsFromFirestore(e,t);try{return await this.apiRequest("team-members/validate-credentials","POST",{email:e,password:t})}catch{return console.warn("‚ö†Ô∏è [TeamMemberService] API request failed, falling back to Firestore"),await this.validateTeamMemberCredentialsFromFirestore(e,t)}}catch(r){return this.handleError(r,"validateTeamMemberCredentials"),{isValid:!1,error:"Authentication failed"}}}async getLicensedTeamMembersFromFirestore(e){try{console.log("üîç [TeamMemberService] Fetching licensed team members from Firestore with options:",e),await this.firestoreAdapter.initialize();const t="24H6zaiCUycuT8ukx9Jz";console.log("‚úÖ [TeamMemberService] Using organization ID:",t),console.log("üè¢ [TeamMemberService] Fetching team members for organization:",t);const r=await this.firestoreAdapter.queryDocuments("teamMembers",[{field:"organizationId",operator:"==",value:t}]);let a=[];if(e!=null&&e.excludeProjectId)try{a=(await this.getProjectTeamMembersFromFirestore(e.excludeProjectId)).map(o=>o.teamMemberId)}catch(s){console.warn("Failed to get assigned team members:",s)}let i=r.filter(s=>{if(a.includes(s.id))return!1;if(e!=null&&e.search){const o=e.search.toLowerCase(),n=(s.name||"").toLowerCase(),c=(s.email||"").toLowerCase();return n.includes(o)||c.includes(o)}return!0});return i.sort((s,o)=>{const n=(s.name||"").toLowerCase(),c=(o.name||"").toLowerCase();return n.localeCompare(c)}),console.log(`‚úÖ [TeamMemberService] Found ${i.length} licensed team members`),i}catch(t){return this.handleError(t,"getLicensedTeamMembersFromFirestore"),[]}}async getProjectTeamMembersFromFirestore(e){try{console.log("üîç [TeamMemberService] Fetching team members from Firestore for project:",e),await this.firestoreAdapter.initialize();const t=[],r=await this.firestoreAdapter.getDocumentById("projects",e);if(r){const i=r.teamMembers||[];for(const s of i)t.push({id:s.userId||s.id,teamMemberId:s.userId||s.id,projectId:e,role:s.role||"member",permissions:s.permissions||["read"],assignedAt:s.assignedAt||new Date().toISOString(),isActive:s.isActive!==!1,email:s.email,name:s.name||s.email,status:s.status||"active"})}try{const i=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e}]);for(const s of i)t.find(o=>o.teamMemberId===s.teamMemberId)||t.push(s)}catch{console.log("‚ÑπÔ∏è [TeamMemberService] projectTeamMembers collection not found or accessible")}const a=[];for(const i of t)try{const s=await this.firestoreAdapter.getDocumentById("teamMembers",i.teamMemberId);s?a.push({...i,name:s.name||s.email||i.name||"Unnamed User",email:s.email||i.email||"No email",teamMember:s}):a.push(i)}catch(s){console.warn("‚ö†Ô∏è [TeamMemberService] Failed to get full profile for team member:",i.teamMemberId,s),a.push(i)}return console.log(`‚úÖ [TeamMemberService] Found ${a.length} team members for project ${e}`),a}catch(t){return this.handleError(t,`getProjectTeamMembersFromFirestore(${e})`),[]}}async addTeamMemberToProjectInFirestore(e,t,r){try{console.log("üîç [TeamMemberService] Adding team member to project in Firestore:",{projectId:e,teamMemberId:t,role:r}),await this.firestoreAdapter.initialize();const a=await this.firestoreAdapter.getDocumentById("teamMembers",t);if(!a)return console.warn("‚ö†Ô∏è [TeamMemberService] Team member not found:",t),!1;if(r===f.ADMIN&&(await this.getProjectTeamMembersFromFirestore(e)).some(c=>c.role===f.ADMIN))throw console.warn("‚ö†Ô∏è [TeamMemberService] Only one Admin is allowed per project"),new Error("Only one Admin is allowed per project. Please remove the existing Admin first.");const i={projectId:e,teamMemberId:t,role:r,assignedBy:"system",assignedAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isActive:!0,teamMemberName:a.name||"Unknown User",teamMemberEmail:a.email||"No email",teamMemberRole:a.role||"MEMBER",teamMemberLicenseType:a.licenseType||"BASIC"};return await this.firestoreAdapter.createDocument("projectTeamMembers",i)!==null}catch(a){return this.handleError(a,`addTeamMemberToProjectInFirestore(${e}, ${t})`),!1}}async removeTeamMemberFromProjectInFirestore(e,t){try{console.log("üîç [TeamMemberService] Removing team member from project in Firestore:",{projectId:e,teamMemberId:t}),await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e},{field:"teamMemberId",operator:"==",value:t}]);return r.length===0?(console.warn("‚ö†Ô∏è [TeamMemberService] Team member not found in project"),!1):await this.firestoreAdapter.deleteDocument("projectTeamMembers",r[0].id)}catch(r){return this.handleError(r,`removeTeamMemberFromProjectInFirestore(${e}, ${t})`),!1}}async updateTeamMemberRoleInFirestore(e,t,r){try{console.log("üîç [TeamMemberService] Updating team member role in Firestore:",{projectId:e,teamMemberId:t,role:r}),await this.firestoreAdapter.initialize();const a=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e},{field:"teamMemberId",operator:"==",value:t}]);if(a.length===0)return console.warn("‚ö†Ô∏è [TeamMemberService] Team member not found in project"),!1;if(r===f.ADMIN&&(await this.getProjectTeamMembersFromFirestore(e)).some(n=>n.role===f.ADMIN&&n.teamMemberId!==t))throw console.warn("‚ö†Ô∏è [TeamMemberService] Only one Admin is allowed per project"),new Error("Only one Admin is allowed per project. Please remove the existing Admin first.");return await this.firestoreAdapter.updateDocument("projectTeamMembers",a[0].id,{role:r,updatedAt:new Date().toISOString()})}catch(a){return this.handleError(a,`updateTeamMemberRoleInFirestore(${e}, ${t})`),!1}}async validateTeamMemberCredentialsFromFirestore(e,t){try{await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.queryDocuments("teamMembers",[{field:"email",operator:"==",value:e}]);if(r.length===0)return{isValid:!1,error:"Team member not found"};const a=r[0];return t.length<1?{isValid:!1,error:"Password is required"}:{isValid:!0,teamMember:a,projectAccess:[]}}catch(r){return this.handleError(r,"validateTeamMemberCredentialsFromFirestore"),{isValid:!1,error:"Authentication failed"}}}};u(b,"instance");let T=b;const v=class v{constructor(){u(this,"config");u(this,"projectService",null);u(this,"datasetService",null);u(this,"teamMemberService",null);this.config={isWebOnlyMode:this.detectWebOnlyMode(),apiBaseUrl:"/api"},this.initializeFirestoreAdapter()}static getInstance(){return v.instance||(v.instance=new v),v.instance}initialize(e){this.config={...this.config,...e},console.log("üîß [ServiceFactory] Initialized with config:",this.config),this.projectService=null,this.datasetService=null,this.teamMemberService=null}getProjectService(){return this.projectService||(this.projectService=A.getInstance(this.config)),this.projectService}getDatasetService(){return this.datasetService||(this.datasetService=j.getInstance(this.config)),this.datasetService}getTeamMemberService(){return this.teamMemberService||(this.teamMemberService=T.getInstance(this.config)),this.teamMemberService}detectWebOnlyMode(){if(typeof window<"u"){const e=new URLSearchParams(window.location.search);if(e.has("webonly"))return e.get("webonly")==="true";const t=localStorage.getItem("webonly_mode");if(t)return t==="true";if(window.ENV&&window.ENV.WEBONLY)return window.ENV.WEBONLY===!0}return!0}async initializeFirestoreAdapter(){try{await S.getInstance().initialize()}catch(e){console.error("‚ùå [ServiceFactory] Failed to initialize Firestore adapter:",e)}}};u(v,"instance");let M=v;const D=class D{constructor(){u(this,"serviceFactory");u(this,"authTokenCallback",null);this.serviceFactory=M.getInstance(),this.serviceFactory.initialize({isWebOnlyMode:this.isWebOnlyMode()})}static getInstance(){return D.instance||(D.instance=new D),D.instance}isWebOnlyMode(){if(typeof window<"u"){const e=new URLSearchParams(window.location.search);if(e.has("webonly"))return e.get("webonly")==="true";const t=localStorage.getItem("webonly_mode");if(t)return t==="true";if(window.ENV&&window.ENV.WEBONLY)return window.ENV.WEBONLY===!0}return!0}setConfig(e){this.serviceFactory.initialize(e)}async getProjects(){return await this.serviceFactory.getProjectService().getProjects()}async getUserProjects(){return await this.serviceFactory.getProjectService().getProjects()}async getProject(e){return await this.serviceFactory.getProjectService().getProject(e)}async createProject(e){return await this.serviceFactory.getProjectService().createProject(e)}async createCloudProject(e){return await this.serviceFactory.getProjectService().createProject(e)}async createCloudProjectInFirestore(e){return await this.serviceFactory.getProjectService().createProject(e)}async updateProject(e,t){return await this.serviceFactory.getProjectService().updateProject(e,t)}async updateProjectInFirestore(e,t){return await this.serviceFactory.getProjectService().updateProject(e,t)}async archiveProject(e){return await this.serviceFactory.getProjectService().archiveProject(e)}async archiveProjectInFirestore(e){return await this.serviceFactory.getProjectService().archiveProject(e)}async restoreProject(e){return await this.serviceFactory.getProjectService().restoreProject(e)}async listDatasets(e){return await this.serviceFactory.getDatasetService().listDatasets(e)}async createDataset(e){return await this.serviceFactory.getDatasetService().createDataset(e)}async getProjectDatasets(e){return await this.serviceFactory.getDatasetService().getProjectDatasets(e)}async assignDatasetToProject(e,t){await this.serviceFactory.getDatasetService().assignDatasetToProject(e,t)}async unassignDatasetFromProject(e,t){await this.serviceFactory.getDatasetService().unassignDatasetFromProject(e,t)}async getLicensedTeamMembers(e){return await this.serviceFactory.getTeamMemberService().getLicensedTeamMembers(e)}async getProjectTeamMembers(e){return await this.serviceFactory.getTeamMemberService().getProjectTeamMembers(e)}async addTeamMemberToProject(e,t,r=f.DO_ER){await this.serviceFactory.getTeamMemberService().addTeamMemberToProject(e,t,r)}async removeTeamMemberFromProject(e,t){await this.serviceFactory.getTeamMemberService().removeTeamMemberFromProject(e,t)}async updateTeamMemberRole(e,t,r){await this.serviceFactory.getTeamMemberService().updateTeamMemberRole(e,t,r)}async validateTeamMemberCredentials(e,t){return await this.serviceFactory.getTeamMemberService().validateTeamMemberCredentials(e,t)}setAuthTokenCallback(e){this.authTokenCallback=e}setAuthToken(e){console.log("Setting auth token:",e),typeof localStorage<"u"&&localStorage.setItem("auth_token",e),this.authTokenCallback&&this.authTokenCallback()}cleanDocumentData(e){const t={};for(const[r,a]of Object.entries(e))if(a!==void 0){if(a===null){t[r]=null;continue}if(typeof a=="object"&&!Array.isArray(a)&&!(a instanceof Date)){t[r]=this.cleanDocumentData(a);continue}t[r]=a}return t}};u(D,"instance");let p=D;const z=p.getInstance();typeof window<"u"&&(window.cloudProjectIntegration=z);export{z as cloudProjectIntegration,p as default};
