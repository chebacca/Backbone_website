// One-liner browser console test - copy and paste this entire line
(async()=>{console.log('üß™ Starting Team Member Creation Test...');try{const user=firebase.auth().currentUser;if(!user)throw new Error('No user logged in');const token=await user.getIdToken();console.log('‚úÖ User:',user.email);const orgId='enterprise-media-org';const licensesResponse=await fetch(`https://us-central1-backbone-logic.cloudfunctions.net/api/licenses?organizationId=${orgId}`,{headers:{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'}});if(!licensesResponse.ok)throw new Error(`Failed to get licenses: ${licensesResponse.status}`);const licenses=await licensesResponse.json();const teamMembersResponse=await fetch(`https://us-central1-backbone-logic.cloudfunctions.net/api/team-members?organizationId=${orgId}`,{headers:{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'}});if(!teamMembersResponse.ok)throw new Error(`Failed to get team members: ${teamMembersResponse.status}`);const teamMembers=await teamMembersResponse.json();console.log('üìã Initial licenses:',licenses.data?.length||0);console.log('üë• Initial team members:',teamMembers.data?.length||0);const testEmail=`test.team.member.${Date.now()}@example.com`;console.log('üìä Creating test team member:',testEmail);const createResponse=await fetch('https://us-central1-backbone-logic.cloudfunctions.net/api/team-members/create',{method:'POST',headers:{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'},body:JSON.stringify({email:testEmail,firstName:'Test',lastName:'User',phone:'+1234567890',department:'Testing',position:'Test Engineer',role:'MEMBER',licenseType:'PROFESSIONAL',temporaryPassword:'TestPassword123!',activateImmediately:true,sendWelcomeEmail:false})});if(!createResponse.ok){const errorText=await createResponse.text();throw new Error(`Failed to create team member: ${createResponse.status} - ${errorText}`);}const createResult=await createResponse.json();console.log('‚úÖ Team member created:',createResult.data);const updatedLicensesResponse=await fetch(`https://us-central1-backbone-logic.cloudfunctions.net/api/licenses?organizationId=${orgId}`,{headers:{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'}});const updatedLicenses=await updatedLicensesResponse.json();const updatedTeamMembersResponse=await fetch(`https://us-central1-backbone-logic.cloudfunctions.net/api/team-members?organizationId=${orgId}`,{headers:{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'}});const updatedTeamMembers=await updatedTeamMembersResponse.json();const initialLicenseCount=licenses.data?.length||0;const finalLicenseCount=updatedLicenses.data?.length||0;const initialTeamCount=teamMembers.data?.length||0;const finalTeamCount=updatedTeamMembers.data?.length||0;console.log('üìä License count:',initialLicenseCount,'‚Üí',finalLicenseCount,'(',finalLicenseCount-initialLicenseCount,')');console.log('üìä Team count:',initialTeamCount,'‚Üí',finalTeamCount,'(',finalTeamCount-initialTeamCount,')');if(finalLicenseCount===initialLicenseCount-1&&finalTeamCount===initialTeamCount+1){console.log('‚úÖ TEST PASSED: License consumed and team member created successfully!');return{success:true,message:'Team member creation and license consumption working correctly'};}else{console.log('‚ùå TEST FAILED: License count or team member count did not update as expected');return{success:false,message:'License consumption or team member creation did not work as expected'};}}catch(error){console.error('‚ùå TEST FAILED:',error.message);return{success:false,message:error.message,error:error};}})();
