const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-CybK3V4y.js","assets/index-CsLZqnnj.js","assets/mui-Cr9U6iW2.js","assets/vendor-CjD1bmmO.js","assets/stripe-ggaMUove.js","assets/index-CBai7h7s.css","assets/index.esm-DmQE6AXN.js","assets/index.esm-B4qVkIPL.js","assets/index.esm-DeaBpi77.js"])))=>i.map(i=>d[i]);
var L=Object.defineProperty;var V=(f,e,t)=>e in f?L(f,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):f[e]=t;var P=(f,e,t)=>V(f,typeof e!="symbol"?e+"":e,t);import{_ as g}from"./index-CsLZqnnj.js";import"./mui-Cr9U6iW2.js";import"./vendor-CjD1bmmO.js";import"./stripe-ggaMUove.js";const A=class A{constructor(){P(this,"db");P(this,"auth")}static arrayUnion(e){return{_method:"arrayUnion",value:e}}static arrayRemove(e){return{_method:"arrayRemove",value:e}}static getInstance(){return A.instance||(A.instance=new A),A.instance}async initialize(){const e=await g(()=>import("./firebase-CybK3V4y.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=e.db,this.auth=e.auth}getCurrentUser(){var e;return(e=this.auth)==null?void 0:e.currentUser}async getDocumentById(e,t){try{const{doc:r,getDoc:o}=await g(async()=>{const{doc:u,getDoc:l}=await import("./index.esm-B4qVkIPL.js");return{doc:u,getDoc:l}},__vite__mapDeps([7,6])),i=r(this.db,e,t),a=await o(i);if(a.exists()){const u=a.data();return{id:a.id,...this.convertFirestoreDates(u)}}return null}catch(r){return console.error(`❌ [FirestoreAdapter] Error getting document ${t} from ${e}:`,r),null}}async queryDocuments(e,t=[]){try{const{collection:r,query:o,where:i,getDocs:a}=await g(async()=>{const{collection:c,query:m,where:w,getDocs:y}=await import("./index.esm-B4qVkIPL.js");return{collection:c,query:m,where:w,getDocs:y}},__vite__mapDeps([7,6])),u=r(this.db,e);let l;if(t.length>0){let c=[];for(const m of t)c.push(i(m.field,m.operator,m.value));l=o(u,...c)}else l=o(u);const s=await a(l),n=[];return s.forEach(c=>{const m=c.data();n.push({id:c.id,...this.convertFirestoreDates(m)})}),n}catch(r){return console.error(`❌ [FirestoreAdapter] Error querying ${e}:`,r),[]}}async createDocument(e,t){try{const{collection:r,addDoc:o}=await g(async()=>{const{collection:u,addDoc:l}=await import("./index.esm-B4qVkIPL.js");return{collection:u,addDoc:l}},__vite__mapDeps([7,6])),i=this.cleanDocumentData({...t,createdAt:new Date,updatedAt:new Date});return{id:(await o(r(this.db,e),i)).id,...i}}catch(r){return console.error(`❌ [FirestoreAdapter] Error creating document in ${e}:`,r),null}}async updateDocumentWithArrayOps(e,t,r){try{const{doc:o,updateDoc:i}=await g(async()=>{const{doc:n,updateDoc:c}=await import("./index.esm-B4qVkIPL.js");return{doc:n,updateDoc:c}},__vite__mapDeps([7,6])),{arrayUnion:a,arrayRemove:u}=await g(async()=>{const{arrayUnion:n,arrayRemove:c}=await import("./index.esm-B4qVkIPL.js");return{arrayUnion:n,arrayRemove:c}},__vite__mapDeps([7,6])),l={};for(const[n,c]of Object.entries(r))c&&typeof c=="object"&&c._method==="arrayUnion"?l[n]=a(c.value):c&&typeof c=="object"&&c._method==="arrayRemove"?l[n]=u(c.value):l[n]=c;const s=this.cleanDocumentData({...l,updatedAt:new Date});return await i(o(this.db,e,t),s),!0}catch(o){return console.error(`❌ [FirestoreAdapter] Error updating document ${t} in ${e} with array ops:`,o),!1}}async updateDocument(e,t,r){try{const{doc:o,updateDoc:i}=await g(async()=>{const{doc:u,updateDoc:l}=await import("./index.esm-B4qVkIPL.js");return{doc:u,updateDoc:l}},__vite__mapDeps([7,6])),a=this.cleanDocumentData({...r,updatedAt:new Date});return await i(o(this.db,e,t),a),!0}catch(o){return console.error(`❌ [FirestoreAdapter] Error updating document ${t} in ${e}:`,o),!1}}async deleteDocument(e,t){try{const{doc:r,deleteDoc:o}=await g(async()=>{const{doc:i,deleteDoc:a}=await import("./index.esm-B4qVkIPL.js");return{doc:i,deleteDoc:a}},__vite__mapDeps([7,6]));return await o(r(this.db,e,t)),!0}catch(r){return console.error(`❌ [FirestoreAdapter] Error deleting document ${t} from ${e}:`,r),!1}}cleanDocumentData(e){const t={};for(const[r,o]of Object.entries(e))if(o!==void 0){if(o===null){t[r]=null;continue}if(typeof o=="object"&&!Array.isArray(o)&&!(o instanceof Date)){t[r]=this.cleanDocumentData(o);continue}t[r]=o}return t}convertFirestoreDates(e){const t={};for(const[r,o]of Object.entries(e))o&&typeof o=="object"&&o.toDate&&typeof o.toDate=="function"?t[r]=o.toDate().toISOString():o&&typeof o=="object"&&!Array.isArray(o)?t[r]=this.convertFirestoreDates(o):t[r]=o;return t}};P(A,"instance");let C=A;class q{constructor(e){P(this,"config");P(this,"firestoreAdapter");this.config=e,this.firestoreAdapter=C.getInstance()}isWebOnlyMode(){return this.config.isWebOnlyMode}getConfig(){return this.config}async apiRequest(e,t="GET",r,o){try{const a=`${this.config.apiBaseUrl||"/api"}/${e.startsWith("/")?e.substring(1):e}`,u={"Content-Type":"application/json",...o},l={method:t,headers:u,credentials:"include"};r&&(t==="POST"||t==="PATCH")&&(l.body=JSON.stringify(r));const s=await fetch(a,l);if(!s.ok)throw new Error(`API request failed: ${s.status} ${s.statusText}`);const n=s.headers.get("content-type");return n&&n.includes("application/json")?await s.json():await s.text()}catch(i){throw console.error(`❌ [BaseService] API request failed for ${e}:`,i),i}}handleError(e,t){console.error(`❌ [${this.constructor.name}] Error in ${t}:`,e)}}var p=(f=>(f.ADMIN="ADMIN",f.MEMBER="MEMBER",f.VIEWER="VIEWER",f.OWNER="OWNER",f.DO_ER="DO_ER",f))(p||{}),S=(f=>(f.ACTIVE="active",f.ARCHIVED="archived",f.DELETED="deleted",f.DRAFT="draft",f))(S||{});const j=class j extends q{constructor(e){super(e)}static getInstance(e){return j.instance||(j.instance=new j(e)),j.instance}async getProjects(){try{if(console.log("🚀 [ProjectService] Getting all projects"),this.isWebOnlyMode())return await this.getProjectsFromFirestore();try{return await this.apiRequest("projects")}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.getProjectsFromFirestore()}}catch(e){return this.handleError(e,"getProjects"),[]}}async getProject(e){try{if(console.log(`🚀 [ProjectService] Getting project: ${e}`),this.isWebOnlyMode())return await this.getProjectFromFirestore(e);try{return await this.apiRequest(`projects/${e}`)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.getProjectFromFirestore(e)}}catch(t){return this.handleError(t,`getProject(${e})`),null}}async createProject(e){try{if(console.log("🚀 [ProjectService] Creating new project"),this.isWebOnlyMode())return await this.createProjectInFirestore(e);try{return await this.apiRequest("projects","POST",e)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.createProjectInFirestore(e)}}catch(t){return this.handleError(t,"createProject"),null}}async updateProject(e,t){try{if(console.log(`🚀 [ProjectService] Updating project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,t);try{return await this.apiRequest(`projects/${e}`,"PATCH",t)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,t)}}catch(r){return this.handleError(r,`updateProject(${e})`),null}}async archiveProject(e){try{if(console.log(`🚀 [ProjectService] Archiving project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,{status:S.ARCHIVED})!==null;try{return await this.apiRequest(`projects/${e}/archive`,"POST"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,{status:S.ARCHIVED})!==null}}catch(t){return this.handleError(t,`archiveProject(${e})`),!1}}async restoreProject(e){try{if(console.log(`🚀 [ProjectService] Restoring project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,{status:S.ACTIVE})!==null;try{return await this.apiRequest(`projects/${e}/restore`,"POST"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,{status:S.ACTIVE})!==null}}catch(t){return this.handleError(t,`restoreProject(${e})`),!1}}async deleteProject(e){try{if(console.log(`🗑️ [ProjectService] Deleting project: ${e}`),this.isWebOnlyMode())return await this.deleteProjectFromFirestore(e);try{return await this.apiRequest(`projects/${e}`,"DELETE"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.deleteProjectFromFirestore(e)}}catch(t){return this.handleError(t,`deleteProject(${e})`),!1}}async getProjectsFromFirestore(){try{console.log("🔍 [ProjectService] Getting projects from Firestore"),await this.firestoreAdapter.initialize();const e=this.firestoreAdapter.getCurrentUser();if(!e)return console.log("❌ [ProjectService] No authenticated user found"),[];let t=null;try{const r=await this.firestoreAdapter.getDocumentById("users",e.uid);if(r&&r.organizationId)t=r.organizationId,console.log("✅ [ProjectService] Found organization ID from user document:",t);else{const o=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:e.email}]);o.length>0&&o[0].organizationId&&(t=o[0].organizationId,console.log("✅ [ProjectService] Found organization ID from user email query:",t))}}catch(r){console.warn("⚠️ [ProjectService] Error getting user organization:",r)}if(!t)return console.log("❌ [ProjectService] No organization ID found for user"),[];try{const r=await this.firestoreAdapter.queryDocuments("projects",[{field:"organizationId",operator:"==",value:t}]);console.log(`✅ [ProjectService] Found ${r.length} projects for organization: ${t}`),console.log("🔍 [ProjectService] Raw projects from Firestore:",r);const o=r.sort((i,a)=>{const u=i.lastAccessedAt?new Date(i.lastAccessedAt).getTime():0;return(a.lastAccessedAt?new Date(a.lastAccessedAt).getTime():0)-u});return console.log("🔍 [ProjectService] Sorted projects:",o),o}catch(r){if(r.message&&r.message.includes("requires an index"))return console.warn("⚠️ [ProjectService] Missing Firestore index detected. Projects query requires composite index."),console.warn("📋 Required index: organizationId (Ascending) + createdAt (Ascending) + __name__ (Ascending)"),console.warn("🔗 Create index at: https://console.firebase.google.com/v1/r/project/backbone-logic/firestore/indexes"),console.warn("📝 Note: Index creation can take several minutes. Returning empty array for now."),[];throw r}}catch(e){return this.handleError(e,"getProjectsFromFirestore"),[]}}async getProjectFromFirestore(e){try{return console.log(`🔍 [ProjectService] Getting project from Firestore: ${e}`),await this.firestoreAdapter.initialize(),await this.firestoreAdapter.getDocumentById("projects",e)}catch(t){return this.handleError(t,`getProjectFromFirestore(${e})`),null}}async createProjectInFirestore(e){try{console.log("🔍 [ProjectService] Creating project in Firestore"),await this.firestoreAdapter.initialize();const t=this.firestoreAdapter.getCurrentUser();if(!t)return console.warn("⚠️ [ProjectService] No authenticated user for project creation"),null;const r={...e,ownerId:e.ownerId||t.uid,status:e.status||S.ACTIVE,teamMembers:e.teamMembers||[]};return await this.firestoreAdapter.createDocument("projects",r)}catch(t){return this.handleError(t,"createProjectInFirestore"),null}}async updateProjectInFirestore(e,t){try{console.log(`🔍 [ProjectService] Updating project in Firestore: ${e}`),await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.getDocumentById("projects",e);return r?await this.firestoreAdapter.updateDocument("projects",e,t)?{...r,...t,id:e}:null:(console.warn(`⚠️ [ProjectService] Project not found: ${e}`),null)}catch(r){return this.handleError(r,`updateProjectInFirestore(${e})`),null}}async deleteProjectFromFirestore(e){try{return console.log(`🗑️ [ProjectService] Deleting project from Firestore: ${e}`),await this.firestoreAdapter.initialize(),await this.firestoreAdapter.getDocumentById("projects",e)?await this.firestoreAdapter.deleteDocument("projects",e)?(console.log(`✅ [ProjectService] Project successfully deleted from Firestore: ${e}`),!0):(console.warn(`⚠️ [ProjectService] Failed to delete project from Firestore: ${e}`),!1):(console.warn(`⚠️ [ProjectService] Project not found for deletion: ${e}`),!1)}catch(t){return this.handleError(t,`deleteProjectFromFirestore(${e})`),!1}}};P(j,"instance");let _=j;const T=class T extends q{constructor(e){super(e)}static getInstance(e){return T.instance||(T.instance=new T(e)),T.instance}async getLicensedTeamMembers(e){try{if(console.log("🚀 [TeamMemberService] Getting licensed team members with options:",e),this.isWebOnlyMode())return await this.getLicensedTeamMembersFromFirestore(e);const t=new URLSearchParams;e!=null&&e.search&&t.append("search",e.search),e!=null&&e.excludeProjectId&&t.append("excludeProjectId",e.excludeProjectId);const r=`team-members/licensed${t.toString()?`?${t.toString()}`:""}`;try{return await this.apiRequest(r)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.getLicensedTeamMembersFromFirestore(e)}}catch(t){return this.handleError(t,"getLicensedTeamMembers"),[]}}async getProjectTeamMembers(e){try{if(console.log("🚀 [TeamMemberService] Getting team members for project:",e),this.isWebOnlyMode())return await this.getProjectTeamMembersFromFirestore(e);try{return await this.apiRequest(`projects/${e}/team-members`)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.getProjectTeamMembersFromFirestore(e)}}catch(t){return this.handleError(t,`getProjectTeamMembers(${e})`),[]}}async addTeamMemberToProject(e,t,r=p.DO_ER){try{if(console.log("🚀 [TeamMemberService] Adding team member to project:",{projectId:e,teamMemberId:t,role:r}),this.isWebOnlyMode())return await this.addTeamMemberToProjectInFirestore(e,t,r);try{return await this.apiRequest(`projects/${e}/team-members`,"POST",{teamMemberId:t,role:r}),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.addTeamMemberToProjectInFirestore(e,t,r)}}catch(o){return this.handleError(o,`addTeamMemberToProject(${e}, ${t})`),!1}}async removeTeamMemberFromProject(e,t){try{if(console.log("🚀 [TeamMemberService] Removing team member from project:",{projectId:e,teamMemberId:t}),this.isWebOnlyMode())return await this.removeTeamMemberFromProjectInFirestore(e,t);try{return await this.apiRequest(`projects/${e}/team-members/${t}`,"DELETE"),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.removeTeamMemberFromProjectInFirestore(e,t)}}catch(r){return this.handleError(r,`removeTeamMemberFromProject(${e}, ${t})`),!1}}async updateTeamMemberRole(e,t,r){try{if(console.log("🚀 [TeamMemberService] Updating team member role:",{projectId:e,teamMemberId:t,role:r}),this.isWebOnlyMode())return await this.updateTeamMemberRoleInFirestore(e,t,r);try{return await this.apiRequest(`projects/${e}/team-members/${t}/role`,"PATCH",{role:r}),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.updateTeamMemberRoleInFirestore(e,t,r)}}catch(o){return this.handleError(o,`updateTeamMemberRole(${e}, ${t})`),!1}}async validateTeamMemberCredentials(e,t){try{if(console.log("🚀 [TeamMemberService] Validating team member credentials for:",e),this.isWebOnlyMode())return await this.validateTeamMemberCredentialsFromFirestore(e,t);try{return await this.apiRequest("team-members/validate-credentials","POST",{email:e,password:t})}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.validateTeamMemberCredentialsFromFirestore(e,t)}}catch(r){return this.handleError(r,"validateTeamMemberCredentials"),{isValid:!1,error:"Authentication failed"}}}async refreshTeamMembers(){try{console.log("🔄 [TeamMemberService] Refreshing team member data..."),console.log("✅ [TeamMemberService] Team member data refresh initiated")}catch(e){console.error("❌ [TeamMemberService] Failed to refresh team member data:",e)}}async createTeamMemberWithFirebaseAuth(e){try{if(console.log("🚀 [TeamMemberService] Creating team member with Firebase Auth:",e),this.isWebOnlyMode())return await this.createTeamMemberWithFirebaseAuthInFirestore(e);try{return await this.apiRequest("team-members/create","POST",e)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.createTeamMemberWithFirebaseAuthInFirestore(e)}}catch(t){return this.handleError(t,"createTeamMemberWithFirebaseAuth"),{success:!1,error:"Failed to create team member with Firebase Auth"}}}async getLicensedTeamMembersFromFirestore(e){try{console.log("🔍 [TeamMemberService] Fetching licensed team members from Firestore with options:",e),await this.firestoreAdapter.initialize();const t=this.firestoreAdapter.getCurrentUser();if(!t)return console.log("❌ [TeamMemberService] No authenticated user found"),[];let r=null;try{const s=await this.firestoreAdapter.getDocumentById("users",t.uid);if(s&&s.organizationId)r=s.organizationId,console.log("✅ [TeamMemberService] Found organization ID from user document:",r);else{const n=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:t.email}]);n.length>0&&n[0].organizationId&&(r=n[0].organizationId,console.log("✅ [TeamMemberService] Found organization ID from user email query:",r))}}catch(s){console.warn("⚠️ [TeamMemberService] Error getting user organization:",s)}if(!r)return console.log("❌ [TeamMemberService] No organization ID found for user"),[];console.log("🏢 [TeamMemberService] Fetching team members for organization:",r);const o=await this.firestoreAdapter.queryDocuments("teamMembers",[{field:"organizationId",operator:"==",value:r}]);console.log(`🔍 [TeamMemberService] Raw team members found: ${o.length}`);const i=o.filter(s=>{var c,m;const n=((m=(c=s.status)==null?void 0:c.toUpperCase)==null?void 0:m.call(c))||s.status||"UNKNOWN";return n!=="ACTIVE"&&n!=="active"?(console.log(`⚠️ [TeamMemberService] Excluding team member ${s.email} with status: ${n}`),!1):s.isActive===!1?(console.log(`⚠️ [TeamMemberService] Excluding team member ${s.email} with isActive: false`),!1):s.revokedAt||s.removedAt||s.suspendedAt?(console.log(`⚠️ [TeamMemberService] Excluding team member ${s.email} with revocation/removal dates`),!1):!0});console.log(`✅ [TeamMemberService] Active team members after filtering: ${i.length}`);let a=[];if(e!=null&&e.excludeProjectId)try{a=(await this.getProjectTeamMembersFromFirestore(e.excludeProjectId)).map(n=>n.teamMemberId),console.log(`🔍 [TeamMemberService] Excluding ${a.length} already assigned team members`)}catch(s){console.warn("⚠️ [TeamMemberService] Failed to get assigned team members:",s)}const l=i.filter(s=>{if(a.includes(s.id))return!1;if(e!=null&&e.search){const n=e.search.toLowerCase(),c=(s.name||"").toLowerCase(),m=(s.firstName||"").toLowerCase(),w=(s.lastName||"").toLowerCase(),y=(s.email||"").toLowerCase();return c.includes(n)||m.includes(n)||w.includes(n)||y.includes(n)}return!0}).map(s=>{let n=s.name;n||(s.firstName&&s.lastName?n=`${s.firstName} ${s.lastName}`:s.firstName?n=s.firstName:s.lastName?n=s.lastName:s.email?n=s.email.split("@")[0].replace(/[._-]/g," ").split(" ").map(y=>y.charAt(0).toUpperCase()+y.slice(1).toLowerCase()).join(" "):n="Unknown User");let c=s.licenseType;return c||(c="professional"),{...s,name:n,licenseType:c,status:"active",isActive:!0}});return l.sort((s,n)=>{const c=(s.name||"").toLowerCase(),m=(n.name||"").toLowerCase();return c.localeCompare(m)}),console.log(`✅ [TeamMemberService] Final filtered and mapped team members: ${l.length}`),l}catch(t){return this.handleError(t,"getLicensedTeamMembersFromFirestore"),[]}}async getProjectTeamMembersFromFirestore(e){try{console.log("🔍 [TeamMemberService] Fetching team members from Firestore for project:",e),await this.firestoreAdapter.initialize();const t=[],r=await this.firestoreAdapter.getDocumentById("projects",e);if(r){const i=r.teamMembers||[];for(const a of i)t.push({id:a.userId||a.id,teamMemberId:a.userId||a.id,projectId:e,role:a.role||"member",permissions:a.permissions||["read"],assignedAt:a.assignedAt||new Date().toISOString(),isActive:a.isActive!==!1,email:a.email,name:a.name||a.email,status:a.status||"active"})}try{const i=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e}]);for(const a of i)t.find(u=>u.teamMemberId===a.teamMemberId)||t.push(a)}catch{console.log("ℹ️ [TeamMemberService] projectTeamMembers collection not found or accessible")}const o=[];for(const i of t)try{const a=await this.firestoreAdapter.getDocumentById("teamMembers",i.teamMemberId);a?o.push({...i,name:a.name||a.email||i.name||"Unnamed User",email:a.email||i.email||"No email",teamMember:a}):o.push(i)}catch(a){console.warn("⚠️ [TeamMemberService] Failed to get full profile for team member:",i.teamMemberId,a),o.push(i)}return console.log(`✅ [TeamMemberService] Found ${o.length} team members for project ${e}`),o}catch(t){return this.handleError(t,`getProjectTeamMembersFromFirestore(${e})`),[]}}async addTeamMemberToProjectInFirestore(e,t,r){try{console.log("🔍 [TeamMemberService] Adding team member to project in Firestore:",{projectId:e,teamMemberId:t,role:r}),await this.firestoreAdapter.initialize();const o=await this.firestoreAdapter.getDocumentById("teamMembers",t);if(!o)return console.warn("⚠️ [TeamMemberService] Team member not found:",t),!1;if(r===p.ADMIN&&(await this.getProjectTeamMembersFromFirestore(e)).some(s=>s.role===p.ADMIN))throw console.warn("⚠️ [TeamMemberService] Only one Admin is allowed per project"),new Error("Only one Admin is allowed per project. Please remove the existing Admin first.");const i={projectId:e,teamMemberId:t,role:r,assignedBy:"system",assignedAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isActive:!0,teamMemberName:o.name||"Unknown User",teamMemberEmail:o.email||"No email",teamMemberRole:o.role||"MEMBER",teamMemberLicenseType:o.licenseType||"BASIC"};return await this.firestoreAdapter.createDocument("projectTeamMembers",i)!==null}catch(o){return this.handleError(o,`addTeamMemberToProjectInFirestore(${e}, ${t})`),!1}}async removeTeamMemberFromProjectInFirestore(e,t){try{console.log("🔍 [TeamMemberService] Removing team member from project in Firestore:",{projectId:e,teamMemberId:t}),await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e},{field:"teamMemberId",operator:"==",value:t}]);return r.length===0?(console.warn("⚠️ [TeamMemberService] Team member not found in project"),!1):await this.firestoreAdapter.deleteDocument("projectTeamMembers",r[0].id)}catch(r){return this.handleError(r,`removeTeamMemberFromProjectInFirestore(${e}, ${t})`),!1}}async updateTeamMemberRoleInFirestore(e,t,r){try{console.log("🔍 [TeamMemberService] Updating team member role in Firestore:",{projectId:e,teamMemberId:t,role:r}),await this.firestoreAdapter.initialize();const o=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e},{field:"teamMemberId",operator:"==",value:t}]);if(o.length===0)return console.warn("⚠️ [TeamMemberService] Team member not found in project"),!1;if(r===p.ADMIN&&(await this.getProjectTeamMembersFromFirestore(e)).some(l=>l.role===p.ADMIN&&l.teamMemberId!==t))throw console.warn("⚠️ [TeamMemberService] Only one Admin is allowed per project"),new Error("Only one Admin is allowed per project. Please remove the existing Admin first.");return await this.firestoreAdapter.updateDocument("projectTeamMembers",o[0].id,{role:r,updatedAt:new Date().toISOString()})}catch(o){return this.handleError(o,`updateTeamMemberRoleInFirestore(${e}, ${t})`),!1}}async validateTeamMemberCredentialsFromFirestore(e,t){try{await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.queryDocuments("teamMembers",[{field:"email",operator:"==",value:e}]);if(r.length===0)return{isValid:!1,error:"Team member not found"};const o=r[0];return t.length<1?{isValid:!1,error:"Password is required"}:{isValid:!0,teamMember:o,projectAccess:[]}}catch(r){return this.handleError(r,"validateTeamMemberCredentialsFromFirestore"),{isValid:!1,error:"Authentication failed"}}}async createTeamMemberWithFirebaseAuthInFirestore(e){try{console.log("🔍 [TeamMemberService] Creating team member with Firebase Auth in Firestore:",e),await this.firestoreAdapter.initialize();const{auth:t}=await g(async()=>{const{auth:n}=await import("./firebase-CybK3V4y.js");return{auth:n}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{createUserWithEmailAndPassword:r}=await g(async()=>{const{createUserWithEmailAndPassword:n}=await import("./index.esm-DeaBpi77.js");return{createUserWithEmailAndPassword:n}},__vite__mapDeps([8,6])),o=e.temporaryPassword||this.generateSecurePassword();let i;try{i=(await r(t,e.email,o)).user,console.log("✅ [TeamMemberService] Firebase Auth user created successfully:",i.uid)}catch(n){if(n.code==="auth/email-already-in-use")return{success:!1,error:"User with this email already exists in Firebase Authentication"};throw n}const a={id:i.uid,email:e.email,firstName:e.firstName,lastName:e.lastName,name:`${e.firstName} ${e.lastName}`,licenseType:e.licenseType||"PROFESSIONAL",status:"ACTIVE",organizationId:e.organizationId,department:e.department,role:e.role||"MEMBER",firebaseUid:i.uid,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isActive:!0},u={id:i.uid,email:e.email,name:`${e.firstName} ${e.lastName}`,firstName:e.firstName,lastName:e.lastName,role:"TEAM_MEMBER",firebaseUid:i.uid,isEmailVerified:!1,twoFactorEnabled:!1,twoFactorBackupCodes:[],privacyConsent:[],marketingConsent:!1,dataProcessingConsent:!1,identityVerified:!1,kycStatus:"PENDING",isTeamMember:!0,organizationId:e.organizationId,memberRole:e.role||"MEMBER",memberStatus:"ACTIVE",department:e.department,licenseType:e.licenseType||"PROFESSIONAL",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};let l=null,s=null;if(l=await this.firestoreAdapter.createDocument("teamMembers",a),l&&(s=await this.firestoreAdapter.createDocument("users",u)),!l||!s){try{await i.delete(),console.log("🔄 [TeamMemberService] Rolled back Firebase Auth user after Firestore failure")}catch(n){console.error("❌ [TeamMemberService] Failed to rollback Firebase Auth user:",n)}return{success:!1,error:"Failed to create required documents in Firestore"}}return console.log("✅ [TeamMemberService] Team member created successfully in Firestore"),{success:!0,teamMember:a,firebaseUid:i.uid,temporaryPassword:o}}catch(t){return this.handleError(t,"createTeamMemberWithFirebaseAuthInFirestore"),{success:!1,error:(t==null?void 0:t.message)||"Failed to create team member with Firebase Auth"}}}generateSecurePassword(){const t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";let r="";r+="ABCDEFGHIJKLMNOPQRSTUVWXYZ"[Math.floor(Math.random()*26)],r+="abcdefghijklmnopqrstuvwxyz"[Math.floor(Math.random()*26)],r+="0123456789"[Math.floor(Math.random()*10)],r+="!@#$%^&*"[Math.floor(Math.random()*8)];for(let o=4;o<12;o++)r+=t[Math.floor(Math.random()*t.length)];return r.split("").sort(()=>Math.random()-.5).join("")}};P(T,"instance");let R=T;const M=class M{constructor(){P(this,"config");P(this,"projectService",null);P(this,"teamMemberService",null);this.config={isWebOnlyMode:this.detectWebOnlyMode(),apiBaseUrl:"/api"},this.initializeFirestoreAdapter()}static getInstance(){return M.instance||(M.instance=new M),M.instance}initialize(e){this.config={...this.config,...e},console.log("🔧 [ServiceFactory] Initialized with config:",this.config),this.projectService=null,this.teamMemberService=null}getProjectService(){return this.projectService||(this.projectService=_.getInstance(this.config)),this.projectService}getTeamMemberService(){return this.teamMemberService||(this.teamMemberService=R.getInstance(this.config)),this.teamMemberService}detectWebOnlyMode(){if(typeof window<"u"){const e=new URLSearchParams(window.location.search);if(e.has("webonly"))return e.get("webonly")==="true";const t=localStorage.getItem("webonly_mode");if(t)return t==="true";if(window.ENV&&window.ENV.WEBONLY)return window.ENV.WEBONLY===!0}return!0}async initializeFirestoreAdapter(){try{await C.getInstance().initialize()}catch(e){console.error("❌ [ServiceFactory] Failed to initialize Firestore adapter:",e)}}};P(M,"instance");let $=M;const D=class D{constructor(){P(this,"serviceFactory");P(this,"authTokenCallback",null);this.serviceFactory=$.getInstance(),this.serviceFactory.initialize({isWebOnlyMode:this.isWebOnlyMode()})}static getInstance(){return D.instance||(D.instance=new D),D.instance}isWebOnlyMode(){if(typeof window<"u"){const e=new URLSearchParams(window.location.search);if(e.has("webonly"))return e.get("webonly")==="true";const t=localStorage.getItem("webonly_mode");if(t)return t==="true";if(window.ENV&&window.ENV.WEBONLY)return window.ENV.WEBONLY===!0}return!0}setConfig(e){this.serviceFactory.initialize(e)}async getProjects(){return await this.serviceFactory.getProjectService().getProjects()}async getUserProjects(){return await this.serviceFactory.getProjectService().getProjects()}async getProject(e){return await this.serviceFactory.getProjectService().getProject(e)}async createProject(e){return await this.serviceFactory.getProjectService().createProject(e)}async createCloudProject(e){return await this.serviceFactory.getProjectService().createProject(e)}async createCloudProjectInFirestore(e){return await this.serviceFactory.getProjectService().createProject(e)}async updateProject(e,t){return await this.serviceFactory.getProjectService().updateProject(e,t)}async updateProjectInFirestore(e,t){return await this.serviceFactory.getProjectService().updateProject(e,t)}async archiveProject(e){return await this.serviceFactory.getProjectService().archiveProject(e)}async archiveProjectInFirestore(e){return await this.serviceFactory.getProjectService().archiveProject(e)}async restoreProject(e){return await this.serviceFactory.getProjectService().restoreProject(e)}async deleteProject(e){return await this.serviceFactory.getProjectService().deleteProject(e)}async listDatasets(e){try{return console.log("🔍 [CloudProjectIntegration] Listing all datasets with params:",e),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - fetching all datasets from Firestore"),await this.getAllDatasetsFromFirestore(e)):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.getAllDatasetsFromFirestore(e))}catch(t){return console.error("❌ [CloudProjectIntegration] Failed to list datasets:",t),[]}}async createDataset(e){try{return console.log("🔍 [CloudProjectIntegration] Creating dataset with input:",e),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - creating dataset in Firestore"),await this.createDatasetInFirestore(e)):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.createDatasetInFirestore(e))}catch(t){throw console.error("❌ [CloudProjectIntegration] Failed to create dataset:",t),t}}async getProjectDatasets(e){try{return console.log("🔍 [CloudProjectIntegration] Getting datasets for project:",e),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - fetching datasets from Firestore for project:",e),await this.getProjectDatasetsFromFirestore(e)):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.getProjectDatasetsFromFirestore(e))}catch(t){return console.error("❌ [CloudProjectIntegration] Failed to get project datasets:",t),[]}}async assignDatasetToProject(e,t){try{return console.log("🔍 [CloudProjectIntegration] Assigning dataset to project:",{projectId:e,datasetId:t}),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - assigning dataset to project in Firestore"),await this.assignDatasetToProjectInFirestore(e,t)):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.assignDatasetToProjectInFirestore(e,t))}catch(r){throw console.error("❌ [CloudProjectIntegration] Failed to assign dataset to project:",r),r}}async unassignDatasetFromProject(e,t){}async updateDataset(e,t){return null}async deleteDataset(e){return!1}async cleanupCorruptedDatasets(){return{cleaned:0,errors:[]}}async createDatasetInFirestore(e){try{console.log("🔍 [CloudProjectIntegration] Creating dataset in Firestore:",e);const{db:t,auth:r}=await g(async()=>{const{db:b,auth:v}=await import("./firebase-CybK3V4y.js");return{db:b,auth:v}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{doc:o,setDoc:i,collection:a,getDoc:u}=await g(async()=>{const{doc:b,setDoc:v,collection:F,getDoc:d}=await import("./index.esm-B4qVkIPL.js");return{doc:b,setDoc:v,collection:F,getDoc:d}},__vite__mapDeps([7,6])),l=r.currentUser;if(!l)throw new Error("No authenticated user");const n=(await u(o(t,"users",l.uid))).data(),c=(n==null?void 0:n.organizationId)||e.organizationId,m=o(a(t,"datasets")),w=new Date,y={id:m.id,name:e.name,description:e.description||"",visibility:e.visibility||"private",tags:e.tags||[],schema:e.schema||{},storage:e.storage||{backend:"firestore"},ownerId:l.uid,organizationId:c,projectId:e.projectId||null,status:"ACTIVE",createdAt:w.toISOString(),updatedAt:w.toISOString(),lastAccessedAt:w.toISOString(),size:0,fileCount:0};return await i(m,y),console.log("✅ [CloudProjectIntegration] Dataset created successfully in Firestore:",m.id),y}catch(t){throw console.error("❌ [CloudProjectIntegration] Failed to create dataset in Firestore:",t),t}}async getProjectDatasetsFromFirestore(e){try{console.log("🔍 [CloudProjectIntegration] Getting datasets from Firestore for project:",e);const{db:t,auth:r}=await g(async()=>{const{db:d,auth:h}=await import("./firebase-CybK3V4y.js");return{db:d,auth:h}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{collection:o,query:i,where:a,getDocs:u,orderBy:l,getDoc:s}=await g(async()=>{const{collection:d,query:h,where:E,getDocs:I,orderBy:O,getDoc:N}=await import("./index.esm-B4qVkIPL.js");return{collection:d,query:h,where:E,getDocs:I,orderBy:O,getDoc:N}},__vite__mapDeps([7,6])),n=r.currentUser;if(!n)throw new Error("No authenticated user");const{doc:c}=await g(async()=>{const{doc:d}=await import("./index.esm-B4qVkIPL.js");return{doc:d}},__vite__mapDeps([7,6])),w=(await s(c(t,"users",n.uid))).data(),y=w==null?void 0:w.organizationId;let b;if(e&&e!=="all")try{b=i(o(t,"datasets"),a("projectId","==",e),a("status","==","ACTIVE"),l("updatedAt","desc"))}catch{console.log("⚠️ [CloudProjectIntegration] Composite index query failed, falling back to simple query"),b=i(o(t,"datasets"),a("projectId","==",e),a("status","==","ACTIVE"))}else try{b=i(o(t,"datasets"),a("organizationId","==",y),a("status","==","ACTIVE"),l("updatedAt","desc"))}catch{console.log("⚠️ [CloudProjectIntegration] Composite index query failed, falling back to simple query"),b=i(o(t,"datasets"),a("organizationId","==",y),a("status","==","ACTIVE"))}const F=(await u(b)).docs.map(d=>({...d.data(),id:d.id}));return F.sort((d,h)=>{const E=d.updatedAt?new Date(d.updatedAt).getTime():0;return(h.updatedAt?new Date(h.updatedAt).getTime():0)-E}),console.log(`✅ [CloudProjectIntegration] Found ${F.length} datasets for project ${e}`),F}catch(t){return console.error("❌ [CloudProjectIntegration] Failed to get datasets from Firestore:",t),[]}}async getAllDatasetsFromFirestore(e){try{console.log("🔍 [CloudProjectIntegration] Getting all datasets from Firestore with params:",e);const{db:t,auth:r}=await g(async()=>{const{db:d,auth:h}=await import("./firebase-CybK3V4y.js");return{db:d,auth:h}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{collection:o,query:i,where:a,getDocs:u,orderBy:l}=await g(async()=>{const{collection:d,query:h,where:E,getDocs:I,orderBy:O}=await import("./index.esm-B4qVkIPL.js");return{collection:d,query:h,where:E,getDocs:I,orderBy:O}},__vite__mapDeps([7,6])),s=r.currentUser;if(!s)throw new Error("No authenticated user");const{doc:n,getDoc:c}=await g(async()=>{const{doc:d,getDoc:h}=await import("./index.esm-B4qVkIPL.js");return{doc:d,getDoc:h}},__vite__mapDeps([7,6])),w=(await c(n(t,"users",s.uid))).data(),y=(w==null?void 0:w.organizationId)||(e==null?void 0:e.organizationId);let b=i(o(t,"datasets"),a("status","==","ACTIVE"),l("updatedAt","desc"));y&&(b=i(o(t,"datasets"),a("organizationId","==",y),a("status","==","ACTIVE"),l("updatedAt","desc")));let F=(await u(b)).docs.map(d=>({...d.data(),id:d.id}));if(e!=null&&e.visibility&&(F=F.filter(d=>d.visibility===e.visibility)),e!=null&&e.query){const d=e.query.toLowerCase();F=F.filter(h=>h.name.toLowerCase().includes(d)||h.description&&h.description.toLowerCase().includes(d))}return console.log(`✅ [CloudProjectIntegration] Found ${F.length} datasets`),F}catch(t){return console.error("❌ [CloudProjectIntegration] Failed to get all datasets from Firestore:",t),[]}}async getAllOrganizationDatasets(){try{return console.log("🔍 [CloudProjectIntegration] Getting all datasets for organization"),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - fetching all organization datasets from Firestore"),await this.getAllDatasetsFromFirestore()):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.getAllDatasetsFromFirestore())}catch(e){return console.error("❌ [CloudProjectIntegration] Failed to get organization datasets:",e),[]}}async assignDatasetToProjectInFirestore(e,t){var r;try{console.log("🔍 [CloudProjectIntegration] Assigning dataset to project in Firestore:",{projectId:e,datasetId:t});const{db:o}=await g(async()=>{const{db:b}=await import("./firebase-CybK3V4y.js");return{db:b}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{doc:i,updateDoc:a,getDoc:u,collection:l,addDoc:s}=await g(async()=>{const{doc:b,updateDoc:v,getDoc:F,collection:d,addDoc:h}=await import("./index.esm-B4qVkIPL.js");return{doc:b,updateDoc:v,getDoc:F,collection:d,addDoc:h}},__vite__mapDeps([7,6])),n=i(o,"datasets",t),c=await u(n);if(!c.exists())throw new Error("Dataset not found");const m=i(o,"projects",e);if(!(await u(m)).exists())throw new Error("Project not found");await a(n,{projectId:e,updatedAt:new Date().toISOString()});const y={projectId:e,datasetId:t,addedByUserId:((r=c.data())==null?void 0:r.ownerId)||"system",addedAt:new Date().toISOString(),createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};await s(l(o,"project_datasets"),y),await a(m,{updatedAt:new Date().toISOString(),lastAccessedAt:new Date().toISOString()}),console.log("✅ [CloudProjectIntegration] Dataset assigned to project successfully in Firestore")}catch(o){throw console.error("❌ [CloudProjectIntegration] Failed to assign dataset to project in Firestore:",o),o}}async getLicensedTeamMembers(e){return await this.serviceFactory.getTeamMemberService().getLicensedTeamMembers(e)}async getProjectTeamMembers(e){return await this.serviceFactory.getTeamMemberService().getProjectTeamMembers(e)}async addTeamMemberToProject(e,t,r=p.DO_ER){await this.serviceFactory.getTeamMemberService().addTeamMemberToProject(e,t,r)}async removeTeamMemberFromProject(e,t){await this.serviceFactory.getTeamMemberService().removeTeamMemberFromProject(e,t)}async updateTeamMemberRole(e,t,r){await this.serviceFactory.getTeamMemberService().updateTeamMemberRole(e,t,r)}async validateTeamMemberCredentials(e,t){return await this.serviceFactory.getTeamMemberService().validateTeamMemberCredentials(e,t)}setAuthTokenCallback(e){this.authTokenCallback=e}setAuthToken(e){console.log("Setting auth token:",e),typeof localStorage<"u"&&localStorage.setItem("auth_token",e),this.authTokenCallback&&this.authTokenCallback()}cleanDocumentData(e){const t={};for(const[r,o]of Object.entries(e))if(o!==void 0){if(o===null){t[r]=null;continue}if(typeof o=="object"&&!Array.isArray(o)&&!(o instanceof Date)){t[r]=this.cleanDocumentData(o);continue}t[r]=o}return t}};P(D,"instance");let z=D;const k=z.getInstance();typeof window<"u"&&(window.cloudProjectIntegration=k);export{k as cloudProjectIntegration,z as default};
