const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-tQA8zM4m.js","assets/index-BK5H45gS.js","assets/mui-B0Fi-Ngj.js","assets/vendor-CjD1bmmO.js","assets/stripe-DCrHNGRE.js","assets/index-CBai7h7s.css","assets/index.esm-BANGvNYi.js","assets/index.esm-9jaBBmwp.js","assets/index.esm-CiRfLMBX.js","assets/UnifiedDataService-DLR_ZcWI.js","assets/FirestoreCollectionManager-JdL8_1Az.js"])))=>i.map(i=>d[i]);
var B=Object.defineProperty;var x=(y,e,t)=>e in y?B(y,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):y[e]=t;var A=(y,e,t)=>x(y,typeof e!="symbol"?e+"":e,t);import{_ as w}from"./index-BK5H45gS.js";const I=class I{constructor(){A(this,"db");A(this,"auth")}static arrayUnion(e){return{_method:"arrayUnion",value:e}}static arrayRemove(e){return{_method:"arrayRemove",value:e}}static getInstance(){return I.instance||(I.instance=new I),I.instance}async initialize(){const e=await w(()=>import("./firebase-tQA8zM4m.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=e.db,this.auth=e.auth}getCurrentUser(){var e;return(e=this.auth)==null?void 0:e.currentUser}async getDocumentById(e,t){try{const{doc:r,getDoc:o}=await w(async()=>{const{doc:i,getDoc:n}=await import("./index.esm-9jaBBmwp.js");return{doc:i,getDoc:n}},__vite__mapDeps([7,6])),c=r(this.db,e,t),a=await o(c);if(a.exists()){const i=a.data();return{id:a.id,...this.convertFirestoreDates(i)}}return null}catch(r){return console.error(`❌ [FirestoreAdapter] Error getting document ${t} from ${e}:`,r),null}}async queryDocuments(e,t=[]){try{const{collection:r,query:o,where:c,getDocs:a}=await w(async()=>{const{collection:d,query:u,where:f,getDocs:p}=await import("./index.esm-9jaBBmwp.js");return{collection:d,query:u,where:f,getDocs:p}},__vite__mapDeps([7,6])),i=r(this.db,e);let n;if(t.length>0){let d=[];for(const u of t)d.push(c(u.field,u.operator,u.value));n=o(i,...d)}else n=o(i);const l=await a(n),s=[];return l.forEach(d=>{const u=d.data();s.push({id:d.id,...this.convertFirestoreDates(u)})}),s}catch(r){return console.error(`❌ [FirestoreAdapter] Error querying ${e}:`,r),[]}}async createDocument(e,t){try{const{collection:r,addDoc:o}=await w(async()=>{const{collection:i,addDoc:n}=await import("./index.esm-9jaBBmwp.js");return{collection:i,addDoc:n}},__vite__mapDeps([7,6])),c=this.cleanDocumentData({...t,createdAt:new Date,updatedAt:new Date});return{id:(await o(r(this.db,e),c)).id,...c}}catch(r){return console.error(`❌ [FirestoreAdapter] Error creating document in ${e}:`,r),null}}async updateDocumentWithArrayOps(e,t,r){try{const{doc:o,updateDoc:c}=await w(async()=>{const{doc:s,updateDoc:d}=await import("./index.esm-9jaBBmwp.js");return{doc:s,updateDoc:d}},__vite__mapDeps([7,6])),{arrayUnion:a,arrayRemove:i}=await w(async()=>{const{arrayUnion:s,arrayRemove:d}=await import("./index.esm-9jaBBmwp.js");return{arrayUnion:s,arrayRemove:d}},__vite__mapDeps([7,6])),n={};for(const[s,d]of Object.entries(r))d&&typeof d=="object"&&d._method==="arrayUnion"?n[s]=a(d.value):d&&typeof d=="object"&&d._method==="arrayRemove"?n[s]=i(d.value):n[s]=d;const l=this.cleanDocumentData({...n,updatedAt:new Date});return await c(o(this.db,e,t),l),!0}catch(o){return console.error(`❌ [FirestoreAdapter] Error updating document ${t} in ${e} with array ops:`,o),!1}}async updateDocument(e,t,r){try{const{doc:o,updateDoc:c}=await w(async()=>{const{doc:i,updateDoc:n}=await import("./index.esm-9jaBBmwp.js");return{doc:i,updateDoc:n}},__vite__mapDeps([7,6])),a=this.cleanDocumentData({...r,updatedAt:new Date});return await c(o(this.db,e,t),a),!0}catch(o){return console.error(`❌ [FirestoreAdapter] Error updating document ${t} in ${e}:`,o),!1}}async deleteDocument(e,t){try{const{doc:r,deleteDoc:o}=await w(async()=>{const{doc:c,deleteDoc:a}=await import("./index.esm-9jaBBmwp.js");return{doc:c,deleteDoc:a}},__vite__mapDeps([7,6]));return await o(r(this.db,e,t)),!0}catch(r){return console.error(`❌ [FirestoreAdapter] Error deleting document ${t} from ${e}:`,r),!1}}cleanDocumentData(e){const t={};for(const[r,o]of Object.entries(e))if(o!==void 0){if(o===null){t[r]=null;continue}if(typeof o=="object"&&!Array.isArray(o)&&!(o instanceof Date)){t[r]=this.cleanDocumentData(o);continue}t[r]=o}return t}convertFirestoreDates(e){const t={};for(const[r,o]of Object.entries(e))o&&typeof o=="object"&&o.toDate&&typeof o.toDate=="function"?t[r]=o.toDate().toISOString():o&&typeof o=="object"&&!Array.isArray(o)?t[r]=this.convertFirestoreDates(o):t[r]=o;return t}};A(I,"instance");let O=I;class L{constructor(e){A(this,"config");A(this,"firestoreAdapter");this.config=e,this.firestoreAdapter=O.getInstance()}isWebOnlyMode(){return this.config.isWebOnlyMode}getConfig(){return this.config}async apiRequest(e,t="GET",r,o){try{const a=`${this.config.apiBaseUrl||"/api"}/${e.startsWith("/")?e.substring(1):e}`,i={"Content-Type":"application/json",...o},n={method:t,headers:i,credentials:"include"};r&&(t==="POST"||t==="PATCH")&&(n.body=JSON.stringify(r));const l=await fetch(a,n);if(!l.ok)throw new Error(`API request failed: ${l.status} ${l.statusText}`);const s=l.headers.get("content-type");return s&&s.includes("application/json")?await l.json():await l.text()}catch(c){throw console.error(`❌ [BaseService] API request failed for ${e}:`,c),c}}handleError(e,t){console.error(`❌ [${this.constructor.name}] Error in ${t}:`,e)}}var U=(y=>(y.ACTIVE="ACTIVE",y.INACTIVE="INACTIVE",y.PENDING="PENDING",y.DELETED="DELETED",y))(U||{}),D=(y=>(y.ADMIN="ADMIN",y.MEMBER="MEMBER",y))(D||{}),_=(y=>(y.ACTIVE="active",y.ARCHIVED="archived",y.DELETED="deleted",y.DRAFT="draft",y))(_||{});const M=class M extends L{constructor(e){super(e)}static getInstance(e){return M.instance||(M.instance=new M(e)),M.instance}async getProjects(){try{if(console.log("🚀 [ProjectService] Getting all projects"),this.isWebOnlyMode())return await this.getProjectsFromFirestore();try{return await this.apiRequest("projects")}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.getProjectsFromFirestore()}}catch(e){return this.handleError(e,"getProjects"),[]}}async getProject(e){try{if(console.log(`🚀 [ProjectService] Getting project: ${e}`),this.isWebOnlyMode())return await this.getProjectFromFirestore(e);try{return await this.apiRequest(`projects/${e}`)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.getProjectFromFirestore(e)}}catch(t){return this.handleError(t,`getProject(${e})`),null}}async createProject(e){try{if(console.log("🚀 [ProjectService] Creating new project"),this.isWebOnlyMode())return await this.createProjectInFirestore(e);try{return await this.apiRequest("projects","POST",e)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.createProjectInFirestore(e)}}catch(t){return this.handleError(t,"createProject"),null}}async updateProject(e,t){try{if(console.log(`🚀 [ProjectService] Updating project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,t);try{return await this.apiRequest(`projects/${e}`,"PATCH",t)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,t)}}catch(r){return this.handleError(r,`updateProject(${e})`),null}}async archiveProject(e){try{if(console.log(`🚀 [ProjectService] Archiving project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,{status:_.ARCHIVED})!==null;try{return await this.apiRequest(`projects/${e}/archive`,"POST"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,{status:_.ARCHIVED})!==null}}catch(t){return this.handleError(t,`archiveProject(${e})`),!1}}async restoreProject(e){try{if(console.log(`🚀 [ProjectService] Restoring project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,{status:_.ACTIVE})!==null;try{return await this.apiRequest(`projects/${e}/restore`,"POST"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,{status:_.ACTIVE})!==null}}catch(t){return this.handleError(t,`restoreProject(${e})`),!1}}async deleteProject(e){try{if(console.log(`🗑️ [ProjectService] Deleting project: ${e}`),this.isWebOnlyMode())return await this.deleteProjectFromFirestore(e);try{return await this.apiRequest(`projects/${e}`,"DELETE"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.deleteProjectFromFirestore(e)}}catch(t){return this.handleError(t,`deleteProject(${e})`),!1}}async getProjectsFromFirestore(){try{console.log("🔍 [ProjectService] Getting projects from Firestore"),await this.firestoreAdapter.initialize();const e=this.firestoreAdapter.getCurrentUser();if(!e)return console.log("❌ [ProjectService] No authenticated user found"),[];let t=null;try{const r=await this.firestoreAdapter.getDocumentById("users",e.uid);if(r&&r.organizationId)t=r.organizationId,console.log("✅ [ProjectService] Found organization ID from user document:",t);else{const o=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:e.email}]);o.length>0&&o[0].organizationId&&(t=o[0].organizationId,console.log("✅ [ProjectService] Found organization ID from user email query:",t))}}catch(r){console.warn("⚠️ [ProjectService] Error getting user organization:",r)}if(!t)return console.log("❌ [ProjectService] No organization ID found for user"),[];try{const r=await this.firestoreAdapter.queryDocuments("projects",[{field:"organizationId",operator:"==",value:t}]);console.log(`✅ [ProjectService] Found ${r.length} projects for organization: ${t}`),console.log("🔍 [ProjectService] Raw projects from Firestore:",r);const o=r.sort((c,a)=>{const i=c.lastAccessedAt?new Date(c.lastAccessedAt).getTime():0;return(a.lastAccessedAt?new Date(a.lastAccessedAt).getTime():0)-i});return console.log("🔍 [ProjectService] Sorted projects:",o),o}catch(r){if(r.message&&r.message.includes("requires an index"))return console.warn("⚠️ [ProjectService] Missing Firestore index detected. Projects query requires composite index."),console.warn("📋 Required index: organizationId (Ascending) + createdAt (Ascending) + __name__ (Ascending)"),console.warn("🔗 Create index at: https://console.firebase.google.com/v1/r/project/backbone-logic/firestore/indexes"),console.warn("📝 Note: Index creation can take several minutes. Returning empty array for now."),[];throw r}}catch(e){return this.handleError(e,"getProjectsFromFirestore"),[]}}async getProjectFromFirestore(e){try{return console.log(`🔍 [ProjectService] Getting project from Firestore: ${e}`),await this.firestoreAdapter.initialize(),await this.firestoreAdapter.getDocumentById("projects",e)}catch(t){return this.handleError(t,`getProjectFromFirestore(${e})`),null}}async createProjectInFirestore(e){try{console.log("🔍 [ProjectService] Creating project in Firestore"),await this.firestoreAdapter.initialize();const t=this.firestoreAdapter.getCurrentUser();if(!t)return console.warn("⚠️ [ProjectService] No authenticated user for project creation"),null;const r={...e,ownerId:e.ownerId||t.uid,status:e.status||_.ACTIVE,teamMembers:e.teamMembers||[]};return await this.firestoreAdapter.createDocument("projects",r)}catch(t){return this.handleError(t,"createProjectInFirestore"),null}}async updateProjectInFirestore(e,t){try{console.log(`🔍 [ProjectService] Updating project in Firestore: ${e}`),await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.getDocumentById("projects",e);return r?await this.firestoreAdapter.updateDocument("projects",e,t)?{...r,...t,id:e}:null:(console.warn(`⚠️ [ProjectService] Project not found: ${e}`),null)}catch(r){return this.handleError(r,`updateProjectInFirestore(${e})`),null}}async deleteProjectFromFirestore(e){try{return console.log(`🗑️ [ProjectService] Deleting project from Firestore: ${e}`),await this.firestoreAdapter.initialize(),await this.firestoreAdapter.getDocumentById("projects",e)?await this.firestoreAdapter.deleteDocument("projects",e)?(console.log(`✅ [ProjectService] Project successfully deleted from Firestore: ${e}`),!0):(console.warn(`⚠️ [ProjectService] Failed to delete project from Firestore: ${e}`),!1):(console.warn(`⚠️ [ProjectService] Project not found for deletion: ${e}`),!1)}catch(t){return this.handleError(t,`deleteProjectFromFirestore(${e})`),!1}}};A(M,"instance");let $=M;const S=class S extends L{constructor(e){super(e)}static getInstance(e){return S.instance||(S.instance=new S(e)),S.instance}async getLicensedTeamMembers(e){try{if(console.log("🚀 [TeamMemberService] Getting licensed team members with options:",e),this.isWebOnlyMode())return await this.getLicensedTeamMembersFromFirestore(e);const t=new URLSearchParams;e!=null&&e.search&&t.append("search",e.search),e!=null&&e.excludeProjectId&&t.append("excludeProjectId",e.excludeProjectId);const r=`team-members/licensed${t.toString()?`?${t.toString()}`:""}`;try{return await this.apiRequest(r)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.getLicensedTeamMembersFromFirestore(e)}}catch(t){return this.handleError(t,"getLicensedTeamMembers"),[]}}async getProjectTeamMembers(e){try{if(console.log("🚀 [TeamMemberService] Getting team members for project:",e),this.isWebOnlyMode())return await this.getProjectTeamMembersFromFirestore(e);try{return await this.apiRequest(`projects/${e}/team-members`)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.getProjectTeamMembersFromFirestore(e)}}catch(t){return this.handleError(t,`getProjectTeamMembers(${e})`),[]}}async addTeamMemberToProject(e,t,r=D.MEMBER){try{if(console.log("🚀 [TeamMemberService] Adding team member to project:",{projectId:e,teamMemberId:t,role:r}),this.isWebOnlyMode())return await this.addTeamMemberToProjectInFirestore(e,t,r);try{return await this.apiRequest(`projects/${e}/team-members`,"POST",{teamMemberId:t,role:r}),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.addTeamMemberToProjectInFirestore(e,t,r)}}catch(o){return this.handleError(o,`addTeamMemberToProject(${e}, ${t})`),!1}}async removeTeamMemberFromProject(e,t){try{if(console.log("🚀 [TeamMemberService] Removing team member from project:",{projectId:e,teamMemberId:t}),this.isWebOnlyMode())return await this.removeTeamMemberFromProjectInFirestore(e,t);try{return await this.apiRequest(`projects/${e}/team-members/${t}`,"DELETE"),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.removeTeamMemberFromProjectInFirestore(e,t)}}catch(r){return this.handleError(r,`removeTeamMemberFromProject(${e}, ${t})`),!1}}async updateTeamMemberRole(e,t,r){try{if(console.log("🚀 [TeamMemberService] Updating team member role:",{projectId:e,teamMemberId:t,role:r}),this.isWebOnlyMode())return await this.updateTeamMemberRoleInFirestore(e,t,r);try{return await this.apiRequest(`projects/${e}/team-members/${t}/role`,"PATCH",{role:r}),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.updateTeamMemberRoleInFirestore(e,t,r)}}catch(o){return this.handleError(o,`updateTeamMemberRole(${e}, ${t})`),!1}}async validateTeamMemberCredentials(e,t){try{if(console.log("🚀 [TeamMemberService] Validating team member credentials for:",e),this.isWebOnlyMode())return await this.validateTeamMemberCredentialsFromFirestore(e,t);try{return await this.apiRequest("team-members/validate-credentials","POST",{email:e,password:t})}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.validateTeamMemberCredentialsFromFirestore(e,t)}}catch(r){return this.handleError(r,"validateTeamMemberCredentials"),{isValid:!1,error:"Authentication failed"}}}async refreshTeamMembers(){try{console.log("🔄 [TeamMemberService] Refreshing team member data..."),console.log("✅ [TeamMemberService] Team member data refresh initiated")}catch(e){console.error("❌ [TeamMemberService] Failed to refresh team member data:",e)}}async createTeamMemberWithFirebaseAuth(e){try{if(console.log("🚀 [TeamMemberService] Creating team member with Firebase Auth:",e),this.isWebOnlyMode())return await this.createTeamMemberWithFirebaseAuthInFirestore(e);try{return await this.apiRequest("team-members/create","POST",e)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.createTeamMemberWithFirebaseAuthInFirestore(e)}}catch(t){return this.handleError(t,"createTeamMemberWithFirebaseAuth"),{success:!1,error:"Failed to create team member with Firebase Auth"}}}async getLicensedTeamMembersFromFirestore(e){try{console.log("🔍 [TeamMemberService] Fetching licensed team members from Firestore with options:",e),await this.firestoreAdapter.initialize();const t=this.firestoreAdapter.getCurrentUser();if(!t)return console.log("❌ [TeamMemberService] No authenticated user found"),[];let r=null;try{const n=await this.firestoreAdapter.getDocumentById("users",t.uid);if(n&&n.organizationId)r=n.organizationId,console.log("✅ [TeamMemberService] Found organization ID from user document:",r);else{const l=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:t.email}]);l.length>0&&l[0].organizationId&&(r=l[0].organizationId,console.log("✅ [TeamMemberService] Found organization ID from user email query:",r))}}catch(n){console.warn("⚠️ [TeamMemberService] Error getting user organization:",n)}if(!r)return console.log("❌ [TeamMemberService] No organization ID found for user"),[];console.log("🏢 [TeamMemberService] Fetching team members for organization:",r),console.log("🔍 [TeamMemberService] Using UnifiedDataService for enhanced team member fetching...");let o=[];try{const{unifiedDataService:n}=await w(async()=>{const{unifiedDataService:s}=await import("./UnifiedDataService-DLR_ZcWI.js");return{unifiedDataService:s}},__vite__mapDeps([9,1,2,3,4,5,7,6,10,0,8])),l=await n.getTeamMembersForOrganization();console.log(`📊 [TeamMemberService] Found ${l.length} team members from UnifiedDataService`),o=l.filter(s=>s.status==="active").map(s=>{var d,u;return{id:s.id,email:s.email,firstName:s.firstName,lastName:s.lastName,name:`${s.firstName} ${s.lastName}`.trim()||s.email,role:s.role,status:U.ACTIVE,department:s.department,organizationId:s.organization.id,licenseType:((d=s.licenseAssignment)==null?void 0:d.licenseType)||"BASIC",assignedProjects:s.assignedProjects,createdAt:s.createdAt.toISOString(),updatedAt:s.updatedAt.toISOString(),isActive:!0,joinedAt:s.joinedAt.toISOString(),lastActive:(u=s.lastActive)==null?void 0:u.toISOString(),invitedBy:s.invitedBy,avatar:s.avatar}}),console.log(`✅ [TeamMemberService] Converted ${o.length} active team members from UnifiedDataService`)}catch(n){console.warn("⚠️ [TeamMemberService] UnifiedDataService failed, falling back to direct Firestore query:",n);const l=await this.firestoreAdapter.queryDocuments("teamMembers",[{field:"organizationId",operator:"==",value:r}]);console.log(`🔍 [TeamMemberService] Raw team members found: ${l.length}`),o=l.filter(s=>{var u,f;const d=((f=(u=s.status)==null?void 0:u.toUpperCase)==null?void 0:f.call(u))||s.status||"UNKNOWN";return d!=="ACTIVE"&&d!=="active"?(console.log(`⚠️ [TeamMemberService] Excluding team member ${s.email} with status: ${d}`),!1):s.isActive===!1?(console.log(`⚠️ [TeamMemberService] Excluding team member ${s.email} with isActive: false`),!1):s.revokedAt||s.removedAt||s.suspendedAt?(console.log(`⚠️ [TeamMemberService] Excluding team member ${s.email} with revocation/removal dates`),!1):!0}),console.log(`✅ [TeamMemberService] Active team members after filtering: ${o.length}`)}let c=[];if(e!=null&&e.excludeProjectId)try{c=(await this.getProjectTeamMembersFromFirestore(e.excludeProjectId)).map(l=>l.teamMemberId),console.log(`🔍 [TeamMemberService] Excluding ${c.length} already assigned team members`)}catch(n){console.warn("⚠️ [TeamMemberService] Failed to get assigned team members:",n)}const i=o.filter(n=>{if(c.includes(n.id))return!1;if(e!=null&&e.search){const l=e.search.toLowerCase(),s=(n.name||"").toLowerCase(),d=(n.firstName||"").toLowerCase(),u=(n.lastName||"").toLowerCase(),f=(n.email||"").toLowerCase();return s.includes(l)||d.includes(l)||u.includes(l)||f.includes(l)}return!0}).map(n=>{let l=n.name;l||(n.firstName&&n.lastName?l=`${n.firstName} ${n.lastName}`:n.firstName?l=n.firstName:n.lastName?l=n.lastName:n.email?l=n.email.split("@")[0].replace(/[._-]/g," ").split(" ").map(f=>f.charAt(0).toUpperCase()+f.slice(1).toLowerCase()).join(" "):l="Unknown User");let s=n.licenseType;return s||(s="professional"),{...n,name:l,licenseType:s,status:"active",isActive:!0}});return i.sort((n,l)=>{const s=(n.name||"").toLowerCase(),d=(l.name||"").toLowerCase();return s.localeCompare(d)}),console.log(`✅ [TeamMemberService] Final filtered and mapped team members: ${i.length}`),i}catch(t){return this.handleError(t,"getLicensedTeamMembersFromFirestore"),[]}}async getProjectTeamMembersFromFirestore(e){try{console.log("🔍 [TeamMemberService] Fetching team members from Firestore for project:",e),await this.firestoreAdapter.initialize();const t=[],r=await this.firestoreAdapter.getDocumentById("projects",e);if(r){const c=r.teamMembers||[];for(const a of c)t.push({id:a.userId||a.id,teamMemberId:a.userId||a.id,projectId:e,role:a.role||"member",permissions:a.permissions||["read"],assignedAt:a.assignedAt||new Date().toISOString(),isActive:a.isActive!==!1,email:a.email,name:a.name||a.email,status:a.status||"active"})}try{const c=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e}]);for(const a of c)t.find(i=>i.teamMemberId===a.teamMemberId)||t.push(a)}catch{console.log("ℹ️ [TeamMemberService] projectTeamMembers collection not found or accessible")}const o=[];for(const c of t)try{let a=null;try{a=await this.firestoreAdapter.getDocumentById("teamMembers",c.teamMemberId),a&&console.log("✅ [TeamMemberService] Found team member in teamMembers collection:",a.name||a.email)}catch{console.log("🔍 [TeamMemberService] Team member not found in teamMembers, trying users collection...")}if(!a)try{a=await this.firestoreAdapter.getDocumentById("users",c.teamMemberId),a&&console.log("✅ [TeamMemberService] Found team member in users collection:",a.name||a.email)}catch{console.log("🔍 [TeamMemberService] Team member not found in users collection either")}if(a){let i="Unnamed User";a.name&&a.name!=="Unnamed User"?i=a.name:a.firstName&&a.lastName?i=`${a.firstName} ${a.lastName}`:a.firstName?i=a.firstName:a.lastName?i=a.lastName:a.email&&(i=a.email.split("@")[0].replace(/[._-]/g," ").split(" ").map(l=>l.charAt(0).toUpperCase()+l.slice(1).toLowerCase()).join(" ")),console.log("🔍 [TeamMemberService] Extracted display name:",i,"from profile:",{name:a.name,firstName:a.firstName,lastName:a.lastName,email:a.email}),o.push({...c,name:i,email:a.email||c.email||"No email",teamMember:{...a,name:i}})}else console.warn("⚠️ [TeamMemberService] No profile found for team member:",c.teamMemberId),o.push(c)}catch(a){console.warn("⚠️ [TeamMemberService] Failed to get full profile for team member:",c.teamMemberId,a),o.push(c)}return console.log(`✅ [TeamMemberService] Found ${o.length} team members for project ${e}`),o}catch(t){return this.handleError(t,`getProjectTeamMembersFromFirestore(${e})`),[]}}async addTeamMemberToProjectInFirestore(e,t,r){try{console.log("🔍 [TeamMemberService] Adding team member to project in Firestore:",{projectId:e,teamMemberId:t,role:r}),await this.firestoreAdapter.initialize();let o=null;if(o=await this.firestoreAdapter.getDocumentById("teamMembers",t),!o){console.log("🔍 [TeamMemberService] Team member not found in teamMembers, trying users collection...");const i=await this.firestoreAdapter.getDocumentById("users",t);i&&(o={id:i.id,email:i.email,name:i.name||`${i.firstName||""} ${i.lastName||""}`.trim(),firstName:i.firstName,lastName:i.lastName,role:i.role||"MEMBER",licenseType:i.licenseType||"BASIC",status:i.status||"ACTIVE",organizationId:i.organizationId,department:i.department,company:i.company,createdAt:i.createdAt||new Date,updatedAt:i.updatedAt||new Date},console.log("✅ [TeamMemberService] Found team member in users collection:",o.name))}if(!o){console.log("🔍 [TeamMemberService] Team member not found in users, trying orgMembers collection...");const i=await this.firestoreAdapter.getDocumentById("orgMembers",t);i&&(o={id:i.id,email:i.email,name:i.name||`${i.firstName||""} ${i.lastName||""}`.trim(),firstName:i.firstName,lastName:i.lastName,role:i.role||"MEMBER",licenseType:i.licenseType||"BASIC",status:i.status||"ACTIVE",organizationId:i.organizationId,department:i.department,company:i.company,createdAt:i.createdAt||new Date,updatedAt:i.updatedAt||new Date},console.log("✅ [TeamMemberService] Found team member in orgMembers collection:",o.name))}if(!o)throw console.warn("⚠️ [TeamMemberService] Team member not found in any collection:",t),new Error(`Team member not found: ${t}`);if(r===D.ADMIN&&(await this.getProjectTeamMembersFromFirestore(e)).some(l=>l.role===D.ADMIN))throw console.warn("⚠️ [TeamMemberService] Only one Admin is allowed per project"),new Error("Only one Admin is allowed per project. Please remove the existing Admin first.");const c={projectId:e,teamMemberId:t,role:r,assignedBy:"system",assignedAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isActive:!0,teamMemberName:o.name||"Unknown User",teamMemberEmail:o.email||"No email",teamMemberRole:o.role||"MEMBER",teamMemberLicenseType:o.licenseType||"BASIC"};return await this.firestoreAdapter.createDocument("projectTeamMembers",c)!==null}catch(o){return this.handleError(o,`addTeamMemberToProjectInFirestore(${e}, ${t})`),!1}}async removeTeamMemberFromProjectInFirestore(e,t){try{console.log("🔍 [TeamMemberService] Removing team member from project in Firestore:",{projectId:e,teamMemberId:t}),await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e},{field:"teamMemberId",operator:"==",value:t}]);return r.length===0?(console.warn("⚠️ [TeamMemberService] Team member not found in project"),!1):await this.firestoreAdapter.deleteDocument("projectTeamMembers",r[0].id)}catch(r){return this.handleError(r,`removeTeamMemberFromProjectInFirestore(${e}, ${t})`),!1}}async updateTeamMemberRoleInFirestore(e,t,r){try{console.log("🔍 [TeamMemberService] Updating team member role in Firestore:",{projectId:e,teamMemberId:t,role:r}),await this.firestoreAdapter.initialize();const o=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e},{field:"teamMemberId",operator:"==",value:t}]);if(o.length===0)return console.warn("⚠️ [TeamMemberService] Team member not found in project"),!1;if(r===D.ADMIN&&(await this.getProjectTeamMembersFromFirestore(e)).some(n=>n.role===D.ADMIN&&n.teamMemberId!==t))throw console.warn("⚠️ [TeamMemberService] Only one Admin is allowed per project"),new Error("Only one Admin is allowed per project. Please remove the existing Admin first.");return await this.firestoreAdapter.updateDocument("projectTeamMembers",o[0].id,{role:r,updatedAt:new Date().toISOString()})}catch(o){return this.handleError(o,`updateTeamMemberRoleInFirestore(${e}, ${t})`),!1}}async validateTeamMemberCredentialsFromFirestore(e,t){try{await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.queryDocuments("teamMembers",[{field:"email",operator:"==",value:e}]);if(r.length===0)return{isValid:!1,error:"Team member not found"};const o=r[0];return t.length<1?{isValid:!1,error:"Password is required"}:{isValid:!0,teamMember:o,projectAccess:[]}}catch(r){return this.handleError(r,"validateTeamMemberCredentialsFromFirestore"),{isValid:!1,error:"Authentication failed"}}}async createTeamMemberWithFirebaseAuthInFirestore(e){try{console.log("🔍 [TeamMemberService] Creating team member with Firebase Auth in Firestore:",e),await this.firestoreAdapter.initialize();const{auth:t}=await w(async()=>{const{auth:s}=await import("./firebase-tQA8zM4m.js");return{auth:s}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{createUserWithEmailAndPassword:r}=await w(async()=>{const{createUserWithEmailAndPassword:s}=await import("./index.esm-CiRfLMBX.js");return{createUserWithEmailAndPassword:s}},__vite__mapDeps([8,6])),o=e.temporaryPassword||this.generateSecurePassword();let c;try{c=(await r(t,e.email,o)).user,console.log("✅ [TeamMemberService] Firebase Auth user created successfully:",c.uid)}catch(s){if(s.code==="auth/email-already-in-use")return{success:!1,error:"User with this email already exists in Firebase Authentication"};throw s}const a={id:c.uid,email:e.email,firstName:e.firstName,lastName:e.lastName,name:`${e.firstName} ${e.lastName}`,licenseType:e.licenseType||"PROFESSIONAL",status:"ACTIVE",organizationId:e.organizationId,department:e.department,role:e.role||"MEMBER",firebaseUid:c.uid,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isActive:!0},i={id:c.uid,email:e.email,name:`${e.firstName} ${e.lastName}`,firstName:e.firstName,lastName:e.lastName,role:"TEAM_MEMBER",firebaseUid:c.uid,isEmailVerified:!1,twoFactorEnabled:!1,twoFactorBackupCodes:[],privacyConsent:[],marketingConsent:!1,dataProcessingConsent:!1,identityVerified:!1,kycStatus:"PENDING",isTeamMember:!0,organizationId:e.organizationId,memberRole:e.role||"MEMBER",memberStatus:"ACTIVE",department:e.department,licenseType:e.licenseType||"PROFESSIONAL",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};let n=null,l=null;if(n=await this.firestoreAdapter.createDocument("teamMembers",a),n&&(l=await this.firestoreAdapter.createDocument("users",i)),!n||!l){try{await c.delete(),console.log("🔄 [TeamMemberService] Rolled back Firebase Auth user after Firestore failure")}catch(s){console.error("❌ [TeamMemberService] Failed to rollback Firebase Auth user:",s)}return{success:!1,error:"Failed to create required documents in Firestore"}}return console.log("✅ [TeamMemberService] Team member created successfully in Firestore"),{success:!0,teamMember:a,firebaseUid:c.uid,temporaryPassword:o}}catch(t){return this.handleError(t,"createTeamMemberWithFirebaseAuthInFirestore"),{success:!1,error:(t==null?void 0:t.message)||"Failed to create team member with Firebase Auth"}}}generateSecurePassword(){const t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";let r="";r+="ABCDEFGHIJKLMNOPQRSTUVWXYZ"[Math.floor(Math.random()*26)],r+="abcdefghijklmnopqrstuvwxyz"[Math.floor(Math.random()*26)],r+="0123456789"[Math.floor(Math.random()*10)],r+="!@#$%^&*"[Math.floor(Math.random()*8)];for(let o=4;o<12;o++)r+=t[Math.floor(Math.random()*t.length)];return r.split("").sort(()=>Math.random()-.5).join("")}};A(S,"instance");let N=S;const E=class E{constructor(){A(this,"config");A(this,"projectService",null);A(this,"teamMemberService",null);this.config={isWebOnlyMode:this.detectWebOnlyMode(),apiBaseUrl:"/api"},this.initializeFirestoreAdapter()}static getInstance(){return E.instance||(E.instance=new E),E.instance}initialize(e){this.config={...this.config,...e},console.log("🔧 [ServiceFactory] Initialized with config:",this.config),this.projectService=null,this.teamMemberService=null}getProjectService(){return this.projectService||(this.projectService=$.getInstance(this.config)),this.projectService}getTeamMemberService(){return this.teamMemberService||(this.teamMemberService=N.getInstance(this.config)),this.teamMemberService}detectWebOnlyMode(){if(typeof window<"u"){const e=new URLSearchParams(window.location.search);if(e.has("webonly"))return e.get("webonly")==="true";const t=localStorage.getItem("webonly_mode");if(t)return t==="true";if(window.ENV&&window.ENV.WEBONLY)return window.ENV.WEBONLY===!0}return!0}async initializeFirestoreAdapter(){try{await O.getInstance().initialize()}catch(e){console.error("❌ [ServiceFactory] Failed to initialize Firestore adapter:",e)}}};A(E,"instance");let q=E;const C=class C{constructor(){A(this,"serviceFactory");A(this,"authTokenCallback",null);A(this,"isInitialized",!1);this.serviceFactory=q.getInstance(),this.serviceFactory.initialize({isWebOnlyMode:this.isWebOnlyMode()})}static getInstance(){return C.instance||(C.instance=new C),C.instance}isWebOnlyMode(){if(typeof window<"u"){const e=new URLSearchParams(window.location.search);if(e.has("webonly"))return e.get("webonly")==="true";const t=localStorage.getItem("webonly_mode");if(t)return t==="true";if(window.ENV&&window.ENV.WEBONLY)return window.ENV.WEBONLY===!0}return!0}setConfig(e){this.serviceFactory.initialize(e)}async getProjects(){return await this.serviceFactory.getProjectService().getProjects()}async getUserProjects(){return await this.serviceFactory.getProjectService().getProjects()}async getProject(e){return await this.serviceFactory.getProjectService().getProject(e)}async createProject(e){return await this.serviceFactory.getProjectService().createProject(e)}async createCloudProject(e){return await this.serviceFactory.getProjectService().createProject(e)}async createCloudProjectInFirestore(e){return await this.serviceFactory.getProjectService().createProject(e)}async updateProject(e,t){return await this.serviceFactory.getProjectService().updateProject(e,t)}async updateProjectInFirestore(e,t){return await this.serviceFactory.getProjectService().updateProject(e,t)}async archiveProject(e){return await this.serviceFactory.getProjectService().archiveProject(e)}async archiveProjectInFirestore(e){return await this.serviceFactory.getProjectService().archiveProject(e)}async restoreProject(e){return await this.serviceFactory.getProjectService().restoreProject(e)}async deleteProject(e){return await this.serviceFactory.getProjectService().deleteProject(e)}async listDatasets(e){try{return console.log("🔍 [CloudProjectIntegration] Listing all datasets with params:",e),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - fetching all datasets from Firestore"),await this.getAllDatasetsFromFirestore(e)):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.getAllDatasetsFromFirestore(e))}catch(t){return console.error("❌ [CloudProjectIntegration] Failed to list datasets:",t),[]}}async createDataset(e){try{return console.log("🔍 [CloudProjectIntegration] Creating dataset with input:",e),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - creating dataset in Firestore"),await this.createDatasetInFirestore(e)):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.createDatasetInFirestore(e))}catch(t){throw console.error("❌ [CloudProjectIntegration] Failed to create dataset:",t),t}}async updateDataset(e,t){try{return console.log("🔍 [CloudProjectIntegration] Updating dataset:",e,"with updates:",t),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - updating dataset in Firestore"),await this.updateDatasetInFirestore(e,t)):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.updateDatasetInFirestore(e,t))}catch(r){throw console.error("❌ [CloudProjectIntegration] Failed to update dataset:",r),r}}async getProjectDatasets(e){try{return console.log("🔍 [CloudProjectIntegration] Getting datasets for project:",e),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - fetching datasets from Firestore for project:",e),await this.getProjectDatasetsFromFirestore(e)):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.getProjectDatasetsFromFirestore(e))}catch(t){return console.error("❌ [CloudProjectIntegration] Failed to get project datasets:",t),[]}}async assignDatasetToProject(e,t){try{return console.log("🔍 [CloudProjectIntegration] Assigning dataset to project:",{projectId:e,datasetId:t}),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - assigning dataset to project in Firestore"),await this.assignDatasetToProjectInFirestore(e,t)):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.assignDatasetToProjectInFirestore(e,t))}catch(r){throw console.error("❌ [CloudProjectIntegration] Failed to assign dataset to project:",r),r}}async unassignDatasetFromProject(e,t){await this.unassignDatasetFromProjectInFirestore(e,t)}async unassignDatasetFromProjectInFirestore(e,t){try{console.log("🔍 [CloudProjectIntegration] Unassigning dataset from project in Firestore:",{projectId:e,datasetId:t});const{db:r}=await w(async()=>{const{db:g}=await import("./firebase-tQA8zM4m.js");return{db:g}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{doc:o,updateDoc:c,getDoc:a,collection:i,query:n,where:l,getDocs:s,deleteDoc:d}=await w(async()=>{const{doc:g,updateDoc:j,getDoc:T,collection:F,query:v,where:R,getDocs:z,deleteDoc:W}=await import("./index.esm-9jaBBmwp.js");return{doc:g,updateDoc:j,getDoc:T,collection:F,query:v,where:R,getDocs:z,deleteDoc:W}},__vite__mapDeps([7,6])),u=o(r,"datasets",t),f=await a(u);if(!f.exists())throw new Error("Dataset not found");f.data().projectId!==e&&console.log("⚠️ [CloudProjectIntegration] Dataset is not assigned to this project, but continuing cleanup..."),await c(u,{projectId:null,updatedAt:new Date().toISOString()}),console.log("✅ [CloudProjectIntegration] Cleared projectId from dataset");const P=n(i(r,"project_datasets"),l("projectId","==",e),l("datasetId","==",t)),b=await s(P);console.log(`🔍 [CloudProjectIntegration] Found ${b.size} project_datasets links to remove`);const m=[];b.forEach(g=>{console.log(`🗑️ [CloudProjectIntegration] Removing project_datasets link: ${g.id}`),m.push(d(g.ref))}),await Promise.all(m),console.log(`✅ [CloudProjectIntegration] Removed ${m.length} project_datasets links`);const h=o(r,"projects",e);await c(h,{updatedAt:new Date().toISOString()}),console.log("✅ [CloudProjectIntegration] Updated project timestamp"),console.log("🎉 [CloudProjectIntegration] Successfully unassigned dataset from project")}catch(r){throw console.error("❌ [CloudProjectIntegration] Error unassigning dataset from project:",r),r}}async deleteDataset(e){return!1}async cleanupCorruptedDatasets(){return{cleaned:0,errors:[]}}async createDatasetInFirestore(e){var t;try{console.log("🔍 [CloudProjectIntegration] Creating dataset in Firestore:",e);const{db:r,auth:o}=await w(async()=>{const{db:b,auth:m}=await import("./firebase-tQA8zM4m.js");return{db:b,auth:m}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{doc:c,setDoc:a,collection:i,getDoc:n}=await w(async()=>{const{doc:b,setDoc:m,collection:h,getDoc:g}=await import("./index.esm-9jaBBmwp.js");return{doc:b,setDoc:m,collection:h,getDoc:g}},__vite__mapDeps([7,6])),l=await this.waitForFirebaseAuth();if(!l)throw console.warn("⚠️ [CloudProjectIntegration] Cannot create dataset - authentication required"),new Error("Authentication required to create dataset");const d=(await n(c(r,"users",l.uid))).data();let u=(d==null?void 0:d.organizationId)||e.organizationId;if(!u)try{const b=localStorage.getItem("auth_user");if(b){const m=JSON.parse(b);u=(m==null?void 0:m.organizationId)||((t=m==null?void 0:m.teamMemberData)==null?void 0:t.organizationId)}}catch(b){console.warn("⚠️ [CloudProjectIntegration] Could not get organization ID from localStorage during creation:",b)}u||(u=l.uid),console.log("🔍 [CloudProjectIntegration] Creating dataset with organization ID:",{userId:l.uid,organizationId:u,inputOrganizationId:e.organizationId,userDataOrganizationId:d==null?void 0:d.organizationId});const f=c(i(r,"datasets")),p=new Date,P={id:f.id,name:e.name,description:e.description||"",visibility:e.visibility||"private",tags:e.tags||[],schema:e.schema||{},storage:e.storage||{backend:"firestore"},ownerId:l.uid,organizationId:u,projectId:e.projectId||null,status:"ACTIVE",createdAt:p.toISOString(),updatedAt:p.toISOString(),lastAccessedAt:p.toISOString(),size:0,fileCount:0,collectionAssignment:e.collectionAssignment||null};return await a(f,P),console.log("✅ [CloudProjectIntegration] Dataset created successfully in Firestore:",f.id),P}catch(r){throw console.error("❌ [CloudProjectIntegration] Failed to create dataset in Firestore:",r),r}}async updateDatasetInFirestore(e,t){var r;try{console.log("🔍 [CloudProjectIntegration] Updating dataset in Firestore:",e);const{db:o,auth:c}=await w(async()=>{const{db:F,auth:v}=await import("./firebase-tQA8zM4m.js");return{db:F,auth:v}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{doc:a,getDoc:i,updateDoc:n,serverTimestamp:l}=await w(async()=>{const{doc:F,getDoc:v,updateDoc:R,serverTimestamp:z}=await import("./index.esm-9jaBBmwp.js");return{doc:F,getDoc:v,updateDoc:R,serverTimestamp:z}},__vite__mapDeps([7,6])),s=await this.waitForFirebaseAuth();if(!s)throw new Error("User not authenticated");const d=a(o,"datasets",e),u=await i(d);if(!u.exists())throw new Error("Dataset not found");const f=u.data(),{doc:p}=await w(async()=>{const{doc:F}=await import("./index.esm-9jaBBmwp.js");return{doc:F}},__vite__mapDeps([7,6])),b=(await i(p(o,"users",s.uid))).data();let m=b==null?void 0:b.organizationId;if(!m)try{const F=localStorage.getItem("auth_user");if(F){const v=JSON.parse(F);m=(v==null?void 0:v.organizationId)||((r=v==null?void 0:v.teamMemberData)==null?void 0:r.organizationId)}}catch(F){console.warn("⚠️ [CloudProjectIntegration] Could not get organization ID from localStorage:",F)}if(m||(m=s.uid),console.log("🔍 [CloudProjectIntegration] Authorization check:",{datasetId:e,currentUserId:s.uid,datasetOrganizationId:f.organizationId,userOrganizationId:m,userData:b}),!(f.organizationId===m||f.ownerId===s.uid||!f.organizationId))throw console.error("❌ [CloudProjectIntegration] Authorization failed:",{reason:"Organization mismatch",datasetOrganizationId:f.organizationId,userOrganizationId:m,datasetOwnerId:f.ownerId,currentUserId:s.uid}),new Error("Unauthorized: Dataset belongs to different organization");const g={...t,updatedAt:new Date().toISOString(),lastAccessedAt:new Date().toISOString()};delete g.id,delete g.ownerId,delete g.createdAt,console.log("🔄 [CloudProjectIntegration] Updating dataset with data:",g),await n(d,g);const T=(await i(d)).data();return console.log("✅ [CloudProjectIntegration] Dataset updated successfully in Firestore:",e),T}catch(o){throw console.error("❌ [CloudProjectIntegration] Failed to update dataset in Firestore:",o),o}}async getProjectDatasetsFromFirestore(e){try{console.log("🔍 [CloudProjectIntegration] Getting datasets from Firestore for project:",e);const{db:t,auth:r}=await w(async()=>{const{db:h,auth:g}=await import("./firebase-tQA8zM4m.js");return{db:h,auth:g}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{collection:o,query:c,where:a,getDocs:i,orderBy:n,getDoc:l}=await w(async()=>{const{collection:h,query:g,where:j,getDocs:T,orderBy:F,getDoc:v}=await import("./index.esm-9jaBBmwp.js");return{collection:h,query:g,where:j,getDocs:T,orderBy:F,getDoc:v}},__vite__mapDeps([7,6])),s=await this.waitForFirebaseAuth();if(!s)return console.warn("⚠️ [CloudProjectIntegration] Cannot get project datasets - returning empty list"),[];const{doc:d}=await w(async()=>{const{doc:h}=await import("./index.esm-9jaBBmwp.js");return{doc:h}},__vite__mapDeps([7,6])),f=(await l(d(t,"users",s.uid))).data(),p=f==null?void 0:f.organizationId;let P;if(e&&e!=="all")try{P=c(o(t,"datasets"),a("projectId","==",e),a("status","==","ACTIVE"),n("updatedAt","desc"))}catch{console.log("⚠️ [CloudProjectIntegration] Composite index query failed, falling back to simple query"),P=c(o(t,"datasets"),a("projectId","==",e),a("status","==","ACTIVE"))}else try{P=c(o(t,"datasets"),a("organizationId","==",p),a("status","==","ACTIVE"),n("updatedAt","desc"))}catch{console.log("⚠️ [CloudProjectIntegration] Composite index query failed, falling back to simple query"),P=c(o(t,"datasets"),a("organizationId","==",p),a("status","==","ACTIVE"))}const m=(await i(P)).docs.map(h=>({...h.data(),id:h.id}));return m.sort((h,g)=>{const j=h.updatedAt?new Date(h.updatedAt).getTime():0;return(g.updatedAt?new Date(g.updatedAt).getTime():0)-j}),console.log(`✅ [CloudProjectIntegration] Found ${m.length} datasets for project ${e}`),m}catch(t){return console.error("❌ [CloudProjectIntegration] Failed to get datasets from Firestore:",t),[]}}async getAllDatasetsFromFirestore(e){try{console.log("🔍 [CloudProjectIntegration] Getting all datasets from Firestore with params:",e);const{db:t,auth:r}=await w(async()=>{const{db:h,auth:g}=await import("./firebase-tQA8zM4m.js");return{db:h,auth:g}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{collection:o,query:c,where:a,getDocs:i,orderBy:n}=await w(async()=>{const{collection:h,query:g,where:j,getDocs:T,orderBy:F}=await import("./index.esm-9jaBBmwp.js");return{collection:h,query:g,where:j,getDocs:T,orderBy:F}},__vite__mapDeps([7,6])),l=await this.waitForFirebaseAuth();if(!l)return console.warn("⚠️ [CloudProjectIntegration] Cannot get all datasets - returning empty list"),[];const{doc:s,getDoc:d}=await w(async()=>{const{doc:h,getDoc:g}=await import("./index.esm-9jaBBmwp.js");return{doc:h,getDoc:g}},__vite__mapDeps([7,6])),f=(await d(s(t,"users",l.uid))).data(),p=(f==null?void 0:f.organizationId)||(e==null?void 0:e.organizationId);let P=c(o(t,"datasets"),a("status","==","ACTIVE"),n("updatedAt","desc"));p&&(P=c(o(t,"datasets"),a("organizationId","==",p),a("status","==","ACTIVE"),n("updatedAt","desc")));let m=(await i(P)).docs.map(h=>({...h.data(),id:h.id}));if(e!=null&&e.visibility&&(m=m.filter(h=>h.visibility===e.visibility)),e!=null&&e.query){const h=e.query.toLowerCase();m=m.filter(g=>g.name.toLowerCase().includes(h)||g.description&&g.description.toLowerCase().includes(h))}return console.log(`✅ [CloudProjectIntegration] Found ${m.length} datasets`),m}catch(t){return console.error("❌ [CloudProjectIntegration] Failed to get all datasets from Firestore:",t),[]}}async getAllOrganizationDatasets(){try{return console.log("🔍 [CloudProjectIntegration] Getting all datasets for organization"),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - fetching all organization datasets from Firestore"),await this.getAllDatasetsFromFirestore()):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.getAllDatasetsFromFirestore())}catch(e){return console.error("❌ [CloudProjectIntegration] Failed to get organization datasets:",e),[]}}async assignDatasetToProjectInFirestore(e,t){var r;try{console.log("🔍 [CloudProjectIntegration] Assigning dataset to project in Firestore:",{projectId:e,datasetId:t});const{db:o}=await w(async()=>{const{db:P}=await import("./firebase-tQA8zM4m.js");return{db:P}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{doc:c,updateDoc:a,getDoc:i,collection:n,addDoc:l}=await w(async()=>{const{doc:P,updateDoc:b,getDoc:m,collection:h,addDoc:g}=await import("./index.esm-9jaBBmwp.js");return{doc:P,updateDoc:b,getDoc:m,collection:h,addDoc:g}},__vite__mapDeps([7,6])),s=c(o,"datasets",t),d=await i(s);if(!d.exists())throw new Error("Dataset not found");const u=c(o,"projects",e);if(!(await i(u)).exists())throw new Error("Project not found");await a(s,{projectId:e,updatedAt:new Date().toISOString()});const p={projectId:e,datasetId:t,addedByUserId:((r=d.data())==null?void 0:r.ownerId)||"system",addedAt:new Date().toISOString(),createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};await l(n(o,"project_datasets"),p),await a(u,{updatedAt:new Date().toISOString(),lastAccessedAt:new Date().toISOString()}),console.log("✅ [CloudProjectIntegration] Dataset assigned to project successfully in Firestore")}catch(o){throw console.error("❌ [CloudProjectIntegration] Failed to assign dataset to project in Firestore:",o),o}}async getLicensedTeamMembers(e){return await this.serviceFactory.getTeamMemberService().getLicensedTeamMembers(e)}async getProjectTeamMembers(e){return await this.serviceFactory.getTeamMemberService().getProjectTeamMembers(e)}async addTeamMemberToProject(e,t,r=D.MEMBER){await this.serviceFactory.getTeamMemberService().addTeamMemberToProject(e,t,r)}async removeTeamMemberFromProject(e,t){await this.serviceFactory.getTeamMemberService().removeTeamMemberFromProject(e,t)}async updateTeamMemberRole(e,t,r){await this.serviceFactory.getTeamMemberService().updateTeamMemberRole(e,t,r)}async validateTeamMemberCredentials(e,t){return await this.serviceFactory.getTeamMemberService().validateTeamMemberCredentials(e,t)}setAuthTokenCallback(e){this.authTokenCallback=e}setAuthToken(e){console.log("Setting auth token:",e),typeof localStorage<"u"&&localStorage.setItem("auth_token",e),this.authTokenCallback&&this.authTokenCallback()}cleanDocumentData(e){const t={};for(const[r,o]of Object.entries(e))if(o!==void 0){if(o===null){t[r]=null;continue}if(typeof o=="object"&&!Array.isArray(o)&&!(o instanceof Date)){t[r]=this.cleanDocumentData(o);continue}t[r]=o}return t}async waitForFirebaseAuth(e=5e3){const{auth:t}=await w(async()=>{const{auth:o}=await import("./firebase-tQA8zM4m.js");return{auth:o}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{onAuthStateChanged:r}=await w(async()=>{const{onAuthStateChanged:o}=await import("./index.esm-CiRfLMBX.js");return{onAuthStateChanged:o}},__vite__mapDeps([8,6]));return t.currentUser?t.currentUser:(console.log("⏳ [CloudProjectIntegration] Waiting for Firebase Auth initialization..."),new Promise(o=>{const c=setTimeout(()=>{console.warn("⚠️ [CloudProjectIntegration] Firebase Auth timeout after waiting"),o(null)},e),a=r(t,i=>{clearTimeout(c),a(),i?console.log("✅ [CloudProjectIntegration] Firebase Auth ready, user authenticated:",i.email):console.log("ℹ️ [CloudProjectIntegration] Firebase Auth ready, but no user authenticated"),o(i)})}))}};A(C,"instance");let V=C;const k=V.getInstance();typeof window<"u"&&(window.cloudProjectIntegration=k);const Q=Object.freeze(Object.defineProperty({__proto__:null,cloudProjectIntegration:k},Symbol.toStringTag,{value:"Module"}));export{Q as C,D as T,N as a,k as c};
