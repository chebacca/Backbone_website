const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-D3UXsHa2.js","assets/index-Ce-WVyXv.js","assets/mui-BEXhTKQE.js","assets/vendor-CjD1bmmO.js","assets/stripe-BgsnbYLP.js","assets/index-CBai7h7s.css","assets/index.esm-D7ujsXeY.js","assets/index.esm-DonjM_pP.js","assets/index.esm-D2YDx4vs.js"])))=>i.map(i=>d[i]);
var z=Object.defineProperty;var O=(d,e,t)=>e in d?z(d,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):d[e]=t;var h=(d,e,t)=>O(d,typeof e!="symbol"?e+"":e,t);import{_ as f}from"./index-Ce-WVyXv.js";import"./mui-BEXhTKQE.js";import"./vendor-CjD1bmmO.js";import"./stripe-BgsnbYLP.js";const w=class w{constructor(){h(this,"db");h(this,"auth")}static arrayUnion(e){return{_method:"arrayUnion",value:e}}static arrayRemove(e){return{_method:"arrayRemove",value:e}}static getInstance(){return w.instance||(w.instance=new w),w.instance}async initialize(){const e=await f(()=>import("./firebase-D3UXsHa2.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=e.db,this.auth=e.auth}getCurrentUser(){var e;return(e=this.auth)==null?void 0:e.currentUser}async getDocumentById(e,t){try{const{doc:r,getDoc:a}=await f(async()=>{const{doc:s,getDoc:n}=await import("./index.esm-DonjM_pP.js");return{doc:s,getDoc:n}},__vite__mapDeps([7,6])),l=r(this.db,e,t),i=await a(l);if(i.exists()){const s=i.data();return{id:i.id,...this.convertFirestoreDates(s)}}return null}catch(r){return console.error(`❌ [FirestoreAdapter] Error getting document ${t} from ${e}:`,r),null}}async queryDocuments(e,t=[]){try{const{collection:r,query:a,where:l,getDocs:i}=await f(async()=>{const{collection:u,query:m,where:P,getDocs:S}=await import("./index.esm-DonjM_pP.js");return{collection:u,query:m,where:P,getDocs:S}},__vite__mapDeps([7,6])),s=r(this.db,e);let n;if(t.length>0){let u=[];for(const m of t)u.push(l(m.field,m.operator,m.value));n=a(s,...u)}else n=a(s);const o=await i(n),c=[];return o.forEach(u=>{const m=u.data();c.push({id:u.id,...this.convertFirestoreDates(m)})}),c}catch(r){return console.error(`❌ [FirestoreAdapter] Error querying ${e}:`,r),[]}}async createDocument(e,t){try{const{collection:r,addDoc:a}=await f(async()=>{const{collection:s,addDoc:n}=await import("./index.esm-DonjM_pP.js");return{collection:s,addDoc:n}},__vite__mapDeps([7,6])),l=this.cleanDocumentData({...t,createdAt:new Date,updatedAt:new Date});return{id:(await a(r(this.db,e),l)).id,...l}}catch(r){return console.error(`❌ [FirestoreAdapter] Error creating document in ${e}:`,r),null}}async updateDocumentWithArrayOps(e,t,r){try{const{doc:a,updateDoc:l}=await f(async()=>{const{doc:c,updateDoc:u}=await import("./index.esm-DonjM_pP.js");return{doc:c,updateDoc:u}},__vite__mapDeps([7,6])),{arrayUnion:i,arrayRemove:s}=await f(async()=>{const{arrayUnion:c,arrayRemove:u}=await import("./index.esm-DonjM_pP.js");return{arrayUnion:c,arrayRemove:u}},__vite__mapDeps([7,6])),n={};for(const[c,u]of Object.entries(r))u&&typeof u=="object"&&u._method==="arrayUnion"?n[c]=i(u.value):u&&typeof u=="object"&&u._method==="arrayRemove"?n[c]=s(u.value):n[c]=u;const o=this.cleanDocumentData({...n,updatedAt:new Date});return await l(a(this.db,e,t),o),!0}catch(a){return console.error(`❌ [FirestoreAdapter] Error updating document ${t} in ${e} with array ops:`,a),!1}}async updateDocument(e,t,r){try{const{doc:a,updateDoc:l}=await f(async()=>{const{doc:s,updateDoc:n}=await import("./index.esm-DonjM_pP.js");return{doc:s,updateDoc:n}},__vite__mapDeps([7,6])),i=this.cleanDocumentData({...r,updatedAt:new Date});return await l(a(this.db,e,t),i),!0}catch(a){return console.error(`❌ [FirestoreAdapter] Error updating document ${t} in ${e}:`,a),!1}}async deleteDocument(e,t){try{const{doc:r,deleteDoc:a}=await f(async()=>{const{doc:l,deleteDoc:i}=await import("./index.esm-DonjM_pP.js");return{doc:l,deleteDoc:i}},__vite__mapDeps([7,6]));return await a(r(this.db,e,t)),!0}catch(r){return console.error(`❌ [FirestoreAdapter] Error deleting document ${t} from ${e}:`,r),!1}}cleanDocumentData(e){const t={};for(const[r,a]of Object.entries(e))if(a!==void 0){if(a===null){t[r]=null;continue}if(typeof a=="object"&&!Array.isArray(a)&&!(a instanceof Date)){t[r]=this.cleanDocumentData(a);continue}t[r]=a}return t}convertFirestoreDates(e){const t={};for(const[r,a]of Object.entries(e))a&&typeof a=="object"&&a.toDate&&typeof a.toDate=="function"?t[r]=a.toDate().toISOString():a&&typeof a=="object"&&!Array.isArray(a)?t[r]=this.convertFirestoreDates(a):t[r]=a;return t}};h(w,"instance");let g=w;class ${constructor(e){h(this,"config");h(this,"firestoreAdapter");this.config=e,this.firestoreAdapter=g.getInstance()}isWebOnlyMode(){return this.config.isWebOnlyMode}getConfig(){return this.config}async apiRequest(e,t="GET",r,a){try{const i=`${this.config.apiBaseUrl||"/api"}/${e.startsWith("/")?e.substring(1):e}`,s={"Content-Type":"application/json",...a},n={method:t,headers:s,credentials:"include"};r&&(t==="POST"||t==="PATCH")&&(n.body=JSON.stringify(r));const o=await fetch(i,n);if(!o.ok)throw new Error(`API request failed: ${o.status} ${o.statusText}`);const c=o.headers.get("content-type");return c&&c.includes("application/json")?await o.json():await o.text()}catch(l){throw console.error(`❌ [BaseService] API request failed for ${e}:`,l),l}}handleError(e,t){console.error(`❌ [${this.constructor.name}] Error in ${t}:`,e)}}var y=(d=>(d.ADMIN="ADMIN",d.MEMBER="MEMBER",d.VIEWER="VIEWER",d.OWNER="OWNER",d.DO_ER="DO_ER",d))(y||{}),p=(d=>(d.ACTIVE="active",d.ARCHIVED="archived",d.DELETED="deleted",d.DRAFT="draft",d))(p||{});const v=class v extends ${constructor(e){super(e)}static getInstance(e){return v.instance||(v.instance=new v(e)),v.instance}async getProjects(){try{if(console.log("🚀 [ProjectService] Getting all projects"),this.isWebOnlyMode())return await this.getProjectsFromFirestore();try{return await this.apiRequest("projects")}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.getProjectsFromFirestore()}}catch(e){return this.handleError(e,"getProjects"),[]}}async getProject(e){try{if(console.log(`🚀 [ProjectService] Getting project: ${e}`),this.isWebOnlyMode())return await this.getProjectFromFirestore(e);try{return await this.apiRequest(`projects/${e}`)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.getProjectFromFirestore(e)}}catch(t){return this.handleError(t,`getProject(${e})`),null}}async createProject(e){try{if(console.log("🚀 [ProjectService] Creating new project"),this.isWebOnlyMode())return await this.createProjectInFirestore(e);try{return await this.apiRequest("projects","POST",e)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.createProjectInFirestore(e)}}catch(t){return this.handleError(t,"createProject"),null}}async updateProject(e,t){try{if(console.log(`🚀 [ProjectService] Updating project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,t);try{return await this.apiRequest(`projects/${e}`,"PATCH",t)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,t)}}catch(r){return this.handleError(r,`updateProject(${e})`),null}}async archiveProject(e){try{if(console.log(`🚀 [ProjectService] Archiving project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,{status:p.ARCHIVED})!==null;try{return await this.apiRequest(`projects/${e}/archive`,"POST"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,{status:p.ARCHIVED})!==null}}catch(t){return this.handleError(t,`archiveProject(${e})`),!1}}async restoreProject(e){try{if(console.log(`🚀 [ProjectService] Restoring project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,{status:p.ACTIVE})!==null;try{return await this.apiRequest(`projects/${e}/restore`,"POST"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,{status:p.ACTIVE})!==null}}catch(t){return this.handleError(t,`restoreProject(${e})`),!1}}async deleteProject(e){try{if(console.log(`🗑️ [ProjectService] Deleting project: ${e}`),this.isWebOnlyMode())return await this.deleteProjectFromFirestore(e);try{return await this.apiRequest(`projects/${e}`,"DELETE"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.deleteProjectFromFirestore(e)}}catch(t){return this.handleError(t,`deleteProject(${e})`),!1}}async getProjectsFromFirestore(){try{console.log("🔍 [ProjectService] Getting projects from Firestore"),await this.firestoreAdapter.initialize();const e=this.firestoreAdapter.getCurrentUser();if(!e)return console.log("❌ [ProjectService] No authenticated user found"),[];let t=null;try{const r=await this.firestoreAdapter.getDocumentById("users",e.uid);if(r&&r.organizationId)t=r.organizationId,console.log("✅ [ProjectService] Found organization ID from user document:",t);else{const a=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:e.email}]);a.length>0&&a[0].organizationId&&(t=a[0].organizationId,console.log("✅ [ProjectService] Found organization ID from user email query:",t))}}catch(r){console.warn("⚠️ [ProjectService] Error getting user organization:",r)}if(!t)return console.log("❌ [ProjectService] No organization ID found for user"),[];try{const r=await this.firestoreAdapter.queryDocuments("projects",[{field:"organizationId",operator:"==",value:t}]);console.log(`✅ [ProjectService] Found ${r.length} projects for organization: ${t}`),console.log("🔍 [ProjectService] Raw projects from Firestore:",r);const a=r.sort((l,i)=>{const s=l.lastAccessedAt?new Date(l.lastAccessedAt).getTime():0;return(i.lastAccessedAt?new Date(i.lastAccessedAt).getTime():0)-s});return console.log("🔍 [ProjectService] Sorted projects:",a),a}catch(r){if(r.message&&r.message.includes("requires an index"))return console.warn("⚠️ [ProjectService] Missing Firestore index detected. Projects query requires composite index."),console.warn("📋 Required index: organizationId (Ascending) + createdAt (Ascending) + __name__ (Ascending)"),console.warn("🔗 Create index at: https://console.firebase.google.com/v1/r/project/backbone-logic/firestore/indexes"),console.warn("📝 Note: Index creation can take several minutes. Returning empty array for now."),[];throw r}}catch(e){return this.handleError(e,"getProjectsFromFirestore"),[]}}async getProjectFromFirestore(e){try{return console.log(`🔍 [ProjectService] Getting project from Firestore: ${e}`),await this.firestoreAdapter.initialize(),await this.firestoreAdapter.getDocumentById("projects",e)}catch(t){return this.handleError(t,`getProjectFromFirestore(${e})`),null}}async createProjectInFirestore(e){try{console.log("🔍 [ProjectService] Creating project in Firestore"),await this.firestoreAdapter.initialize();const t=this.firestoreAdapter.getCurrentUser();if(!t)return console.warn("⚠️ [ProjectService] No authenticated user for project creation"),null;const r={...e,ownerId:e.ownerId||t.uid,status:e.status||p.ACTIVE,teamMembers:e.teamMembers||[]};return await this.firestoreAdapter.createDocument("projects",r)}catch(t){return this.handleError(t,"createProjectInFirestore"),null}}async updateProjectInFirestore(e,t){try{console.log(`🔍 [ProjectService] Updating project in Firestore: ${e}`),await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.getDocumentById("projects",e);return r?await this.firestoreAdapter.updateDocument("projects",e,t)?{...r,...t,id:e}:null:(console.warn(`⚠️ [ProjectService] Project not found: ${e}`),null)}catch(r){return this.handleError(r,`updateProjectInFirestore(${e})`),null}}async deleteProjectFromFirestore(e){try{return console.log(`🗑️ [ProjectService] Deleting project from Firestore: ${e}`),await this.firestoreAdapter.initialize(),await this.firestoreAdapter.getDocumentById("projects",e)?await this.firestoreAdapter.deleteDocument("projects",e)?(console.log(`✅ [ProjectService] Project successfully deleted from Firestore: ${e}`),!0):(console.warn(`⚠️ [ProjectService] Failed to delete project from Firestore: ${e}`),!1):(console.warn(`⚠️ [ProjectService] Project not found for deletion: ${e}`),!1)}catch(t){return this.handleError(t,`deleteProjectFromFirestore(${e})`),!1}}};h(v,"instance");let T=v;const b=class b extends ${constructor(e){super(e)}static getInstance(e){return b.instance||(b.instance=new b(e)),b.instance}async listDatasets(e){try{if(console.log("🚀 [DatasetService] Listing datasets with params:",e),this.isWebOnlyMode())return await this.getAvailableDatasetsFromFirestore(e);const t=new URLSearchParams;e!=null&&e.organizationId&&t.append("organizationId",e.organizationId),e!=null&&e.visibility&&t.append("visibility",e.visibility),e!=null&&e.backend&&e.backend!=="all"&&t.append("backend",e.backend),e!=null&&e.query&&t.append("query",e.query);try{return await this.apiRequest(`datasets${t.toString()?`?${t}`:""}`)}catch{return console.warn("⚠️ [DatasetService] API request failed, falling back to Firestore"),await this.getAvailableDatasetsFromFirestore(e)}}catch(t){return this.handleError(t,"listDatasets"),[]}}async createDataset(e){try{if(console.log("🚀 [DatasetService] Creating dataset"),this.isWebOnlyMode())return await this.createDatasetInFirestore(e);const t={...e};try{return await this.apiRequest("datasets","POST",t)}catch{return console.warn("⚠️ [DatasetService] API request failed, falling back to Firestore"),await this.createDatasetInFirestore(e)}}catch(t){return this.handleError(t,"createDataset"),null}}async getProjectDatasets(e){try{if(console.log(`🚀 [DatasetService] Getting datasets for project: ${e}`),this.isWebOnlyMode())return await this.getProjectDatasetsFromFirestore(e);try{return await this.apiRequest(`datasets/project/${e}`,"GET")}catch{return console.warn("⚠️ [DatasetService] API request failed, falling back to Firestore"),await this.getProjectDatasetsFromFirestore(e)}}catch(t){return this.handleError(t,`getProjectDatasets(${e})`),[]}}async assignDatasetToProject(e,t){try{if(console.log(`🚀 [DatasetService] Assigning dataset ${t} to project ${e}`),this.isWebOnlyMode())return await this.assignDatasetToProjectInFirestore(e,t);try{return await this.apiRequest(`projects/${e}/datasets/${t}`,"POST"),!0}catch{return console.warn("⚠️ [DatasetService] API request failed, falling back to Firestore"),await this.assignDatasetToProjectInFirestore(e,t)}}catch(r){return this.handleError(r,`assignDatasetToProject(${e}, ${t})`),!1}}async unassignDatasetFromProject(e,t){try{if(console.log(`🚀 [DatasetService] Unassigning dataset ${t} from project ${e}`),this.isWebOnlyMode())return await this.unassignDatasetFromProjectInFirestore(e,t);try{return await this.apiRequest(`projects/${e}/datasets/${t}`,"DELETE"),!0}catch{return console.warn("⚠️ [DatasetService] API request failed, falling back to Firestore"),await this.unassignDatasetFromProjectInFirestore(e,t)}}catch(r){return this.handleError(r,`unassignDatasetFromProject(${e}, ${t})`),!1}}async getAvailableDatasetsFromFirestore(e){try{console.log("🔍 [DatasetService] Fetching available datasets from Firestore"),await this.firestoreAdapter.initialize();const t=this.firestoreAdapter.getCurrentUser();if(!t)return console.log("❌ [DatasetService] No authenticated user found"),[];let r=null;try{const s=await this.firestoreAdapter.getDocumentById("users",t.uid);if(s&&s.organizationId)r=s.organizationId,console.log("✅ [DatasetService] Found organization ID from user document:",r);else{const n=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:t.email}]);n.length>0&&n[0].organizationId&&(r=n[0].organizationId,console.log("✅ [DatasetService] Found organization ID from user email query:",r))}}catch(s){console.warn("⚠️ [DatasetService] Error getting user organization:",s)}if(!r)return console.log("❌ [DatasetService] No organization ID found for user"),[];console.log("🏢 [DatasetService] Fetching available datasets for organization:",r);let i=(await this.firestoreAdapter.queryDocuments("datasets",[{field:"organizationId",operator:"==",value:(e==null?void 0:e.organizationId)||r}])).filter(s=>!(s.projectIds&&s.projectIds.length>0));if(e!=null&&e.backend&&e.backend!=="all"&&(i=i.filter(s=>{var o;return(((o=s.storage)==null?void 0:o.backend)||"firestore")===e.backend})),e!=null&&e.query){const s=e.query.toLowerCase();i=i.filter(n=>{const o=(n.name||"").toLowerCase(),c=(n.description||"").toLowerCase();return o.includes(s)||c.includes(s)})}return e!=null&&e.visibility&&(i=i.filter(s=>(s.visibility||"private")===e.visibility)),i.sort((s,n)=>{const o=new Date(s.createdAt||"").getTime();return new Date(n.createdAt||"").getTime()-o}),console.log(`✅ [DatasetService] Found ${i.length} available datasets from Firestore`),i}catch(t){return this.handleError(t,"getAvailableDatasetsFromFirestore"),[]}}async listDatasetsFromFirestore(e){try{console.log("🔍 [DatasetService] Fetching datasets from Firestore with params:",e),await this.firestoreAdapter.initialize();const t=this.firestoreAdapter.getCurrentUser();if(!t)return console.log("❌ [DatasetService] No authenticated user found"),[];let r=null;try{const s=await this.firestoreAdapter.getDocumentById("users",t.uid);if(s&&s.organizationId)r=s.organizationId,console.log("✅ [DatasetService] Found organization ID from user document:",r);else{const n=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:t.email}]);n.length>0&&n[0].organizationId&&(r=n[0].organizationId,console.log("✅ [DatasetService] Found organization ID from user email query:",r))}}catch(s){console.warn("⚠️ [DatasetService] Error getting user organization:",s)}if(!r)return console.log("❌ [DatasetService] No organization ID found for user"),[];console.log("🏢 [DatasetService] Fetching datasets for organization:",r);const a=[];a.push({field:"organizationId",operator:"==",value:(e==null?void 0:e.organizationId)||r});let i=await this.firestoreAdapter.queryDocuments("datasets",a);if(e!=null&&e.backend&&e.backend!=="all"&&(i=i.filter(s=>{var o;return(((o=s.storage)==null?void 0:o.backend)||"firestore")===e.backend})),e!=null&&e.query){const s=e.query.toLowerCase();i=i.filter(n=>{const o=(n.name||"").toLowerCase(),c=(n.description||"").toLowerCase();return o.includes(s)||c.includes(s)})}return e!=null&&e.visibility&&(i=i.filter(s=>(s.visibility||"private")===e.visibility)),i.sort((s,n)=>{const o=new Date(s.createdAt||"").getTime();return new Date(n.createdAt||"").getTime()-o}),console.log(`✅ [DatasetService] Found ${i.length} datasets from Firestore`),i}catch(t){return this.handleError(t,"listDatasetsFromFirestore"),[]}}async createDatasetInFirestore(e){try{console.log("🔍 [DatasetService] Creating dataset in Firestore"),await this.firestoreAdapter.initialize();let t=e.organizationId;if(!t){const a=this.firestoreAdapter.getCurrentUser();if(a)try{const l=await this.firestoreAdapter.getDocumentById("users",a.uid);if(l&&l.organizationId)t=l.organizationId;else{const i=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:a.email}]);i.length>0&&i[0].organizationId&&(t=i[0].organizationId)}}catch(l){console.warn("⚠️ [DatasetService] Error getting user organization for dataset creation:",l)}if(!t)return console.warn("⚠️ [DatasetService] No organization ID found for dataset creation"),null;console.log("✅ [DatasetService] Using organization ID for dataset creation:",t)}const r={...e,ownerId:"l5YKvrhAD72EV2MnugbS",organizationId:t,visibility:e.visibility||"private",storage:e.storage||{backend:"firestore"},status:e.status||"active",projectIds:[],primaryProjectId:null};return await this.firestoreAdapter.createDocument("datasets",r)}catch(t){return this.handleError(t,"createDatasetInFirestore"),null}}async getProjectDatasetsFromFirestore(e){try{console.log(`🔍 [DatasetService] Fetching datasets from Firestore for project: ${e}`),await this.firestoreAdapter.initialize();const t=this.firestoreAdapter.getCurrentUser();if(!t)return console.warn("⚠️ [DatasetService] No authenticated user found"),[];let r=null;try{const s=await this.firestoreAdapter.getDocumentById("users",t.uid);if(s&&s.organizationId)r=s.organizationId;else{const n=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:t.email}]);n.length>0&&n[0].organizationId&&(r=n[0].organizationId)}}catch(s){console.warn("⚠️ [DatasetService] Error getting user organization:",s)}if(!r)return console.warn("⚠️ [DatasetService] No organization ID found for user"),[];const a=await this.firestoreAdapter.queryDocuments("project_datasets",[{field:"projectId",operator:"==",value:e},{field:"organizationId",operator:"==",value:r}]);if(a.length===0)return console.log(`✅ [DatasetService] No datasets found for project ${e}`),[];const l=a.map(s=>s.datasetId),i=[];for(const s of l){const n=await this.firestoreAdapter.getDocumentById("datasets",s);n&&i.push(n)}return i.sort((s,n)=>{const o=new Date(s.createdAt||"").getTime();return new Date(n.createdAt||"").getTime()-o}),console.log(`✅ [DatasetService] Found ${i.length} datasets for project ${e}`),i}catch(t){return this.handleError(t,`getProjectDatasetsFromFirestore(${e})`),[]}}async assignDatasetToProjectInFirestore(e,t){try{console.log(`🔍 [DatasetService] Assigning dataset to project in Firestore: ${e}, ${t}`),await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.getDocumentById("datasets",t);if(!r)return console.warn(`⚠️ [DatasetService] Dataset not found: ${t}`),!1;if(!await this.firestoreAdapter.getDocumentById("projects",e))return console.warn(`⚠️ [DatasetService] Project not found: ${e}`),!1;if(!await this.firestoreAdapter.updateDocumentWithArrayOps("datasets",t,{projectIds:g.arrayUnion(e),primaryProjectId:e,updatedAt:new Date().toISOString()}))return console.warn(`⚠️ [DatasetService] Failed to update dataset: ${t}`),!1;const i=this.firestoreAdapter.getCurrentUser();let s=null;if(i)try{const u=await this.firestoreAdapter.getDocumentById("users",i.uid);if(u&&u.organizationId)s=u.organizationId;else{const m=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:i.email}]);m.length>0&&m[0].organizationId&&(s=m[0].organizationId)}}catch(u){console.warn("⚠️ [DatasetService] Error getting user organization:",u)}const n={projectId:e,datasetId:t,organizationId:s||r.organizationId||"unknown",addedByUserId:r.ownerId||"system",addedAt:new Date().toISOString(),createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return await this.firestoreAdapter.createDocument("project_datasets",n)?(await this.firestoreAdapter.updateDocument("projects",e,{updatedAt:new Date().toISOString(),lastAccessedAt:new Date().toISOString()})||console.warn(`⚠️ [DatasetService] Failed to update project: ${e}, but dataset assignment succeeded`),console.log("✅ [DatasetService] Dataset successfully assigned to project in Firestore"),!0):(console.warn("⚠️ [DatasetService] Failed to create project-dataset link"),await this.firestoreAdapter.updateDocumentWithArrayOps("datasets",t,{projectIds:g.arrayRemove(e),primaryProjectId:null,updatedAt:new Date().toISOString()}),!1)}catch(r){return this.handleError(r,`assignDatasetToProjectInFirestore(${e}, ${t})`),!1}}async unassignDatasetFromProjectInFirestore(e,t){var r;try{console.log(`🔍 [DatasetService] Unassigning dataset from project in Firestore: ${e}, ${t}`),await this.firestoreAdapter.initialize();const a=await this.firestoreAdapter.getDocumentById("datasets",t);if(!a)return console.warn(`⚠️ [DatasetService] Dataset not found: ${t}`),!1;if(!((r=a.projectIds)!=null&&r.includes(e)))return console.warn(`⚠️ [DatasetService] Dataset is not assigned to this project: ${t}, ${e}`),!1;if(!await this.firestoreAdapter.updateDocumentWithArrayOps("datasets",t,{projectIds:g.arrayRemove(e),updatedAt:new Date().toISOString()}))return console.warn(`⚠️ [DatasetService] Failed to update dataset: ${t}`),!1;const i=this.firestoreAdapter.getCurrentUser();let s=null;if(i)try{const c=await this.firestoreAdapter.getDocumentById("users",i.uid);if(c&&c.organizationId)s=c.organizationId;else{const u=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:i.email}]);u.length>0&&u[0].organizationId&&(s=u[0].organizationId)}}catch(c){console.warn("⚠️ [DatasetService] Error getting user organization:",c)}if(!s)return console.warn("⚠️ [DatasetService] No organization ID found for user"),!1;const n=await this.firestoreAdapter.queryDocuments("project_datasets",[{field:"projectId",operator:"==",value:e},{field:"datasetId",operator:"==",value:t},{field:"organizationId",operator:"==",value:s}]);return n.length>0&&!await this.firestoreAdapter.deleteDocument("project_datasets",n[0].id)?(console.warn("⚠️ [DatasetService] Failed to delete project-dataset link"),await this.firestoreAdapter.updateDocumentWithArrayOps("datasets",t,{projectIds:g.arrayUnion(e),updatedAt:new Date().toISOString()}),!1):(await this.firestoreAdapter.updateDocument("projects",e,{updatedAt:new Date().toISOString(),lastAccessedAt:new Date().toISOString()})||console.warn(`⚠️ [DatasetService] Failed to update project: ${e}, but dataset unassignment succeeded`),console.log("✅ [DatasetService] Dataset successfully unassigned from project in Firestore"),!0)}catch(a){return this.handleError(a,`unassignDatasetFromProjectInFirestore(${e}, ${t})`),!1}}};h(b,"instance");let j=b;const D=class D extends ${constructor(e){super(e)}static getInstance(e){return D.instance||(D.instance=new D(e)),D.instance}async getLicensedTeamMembers(e){try{if(console.log("🚀 [TeamMemberService] Getting licensed team members with options:",e),this.isWebOnlyMode())return await this.getLicensedTeamMembersFromFirestore(e);const t=new URLSearchParams;e!=null&&e.search&&t.append("search",e.search),e!=null&&e.excludeProjectId&&t.append("excludeProjectId",e.excludeProjectId);const r=`team-members/licensed${t.toString()?`?${t.toString()}`:""}`;try{return await this.apiRequest(r)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.getLicensedTeamMembersFromFirestore(e)}}catch(t){return this.handleError(t,"getLicensedTeamMembers"),[]}}async getProjectTeamMembers(e){try{if(console.log("🚀 [TeamMemberService] Getting team members for project:",e),this.isWebOnlyMode())return await this.getProjectTeamMembersFromFirestore(e);try{return await this.apiRequest(`projects/${e}/team-members`)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.getProjectTeamMembersFromFirestore(e)}}catch(t){return this.handleError(t,`getProjectTeamMembers(${e})`),[]}}async addTeamMemberToProject(e,t,r=y.DO_ER){try{if(console.log("🚀 [TeamMemberService] Adding team member to project:",{projectId:e,teamMemberId:t,role:r}),this.isWebOnlyMode())return await this.addTeamMemberToProjectInFirestore(e,t,r);try{return await this.apiRequest(`projects/${e}/team-members`,"POST",{teamMemberId:t,role:r}),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.addTeamMemberToProjectInFirestore(e,t,r)}}catch(a){return this.handleError(a,`addTeamMemberToProject(${e}, ${t})`),!1}}async removeTeamMemberFromProject(e,t){try{if(console.log("🚀 [TeamMemberService] Removing team member from project:",{projectId:e,teamMemberId:t}),this.isWebOnlyMode())return await this.removeTeamMemberFromProjectInFirestore(e,t);try{return await this.apiRequest(`projects/${e}/team-members/${t}`,"DELETE"),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.removeTeamMemberFromProjectInFirestore(e,t)}}catch(r){return this.handleError(r,`removeTeamMemberFromProject(${e}, ${t})`),!1}}async updateTeamMemberRole(e,t,r){try{if(console.log("🚀 [TeamMemberService] Updating team member role:",{projectId:e,teamMemberId:t,role:r}),this.isWebOnlyMode())return await this.updateTeamMemberRoleInFirestore(e,t,r);try{return await this.apiRequest(`projects/${e}/team-members/${t}/role`,"PATCH",{role:r}),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.updateTeamMemberRoleInFirestore(e,t,r)}}catch(a){return this.handleError(a,`updateTeamMemberRole(${e}, ${t})`),!1}}async validateTeamMemberCredentials(e,t){try{if(console.log("🚀 [TeamMemberService] Validating team member credentials for:",e),this.isWebOnlyMode())return await this.validateTeamMemberCredentialsFromFirestore(e,t);try{return await this.apiRequest("team-members/validate-credentials","POST",{email:e,password:t})}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.validateTeamMemberCredentialsFromFirestore(e,t)}}catch(r){return this.handleError(r,"validateTeamMemberCredentials"),{isValid:!1,error:"Authentication failed"}}}async refreshTeamMembers(){try{console.log("🔄 [TeamMemberService] Refreshing team member data..."),console.log("✅ [TeamMemberService] Team member data refresh initiated")}catch(e){console.error("❌ [TeamMemberService] Failed to refresh team member data:",e)}}async createTeamMemberWithFirebaseAuth(e){try{if(console.log("🚀 [TeamMemberService] Creating team member with Firebase Auth:",e),this.isWebOnlyMode())return await this.createTeamMemberWithFirebaseAuthInFirestore(e);try{return await this.apiRequest("team-members/create","POST",e)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.createTeamMemberWithFirebaseAuthInFirestore(e)}}catch(t){return this.handleError(t,"createTeamMemberWithFirebaseAuth"),{success:!1,error:"Failed to create team member with Firebase Auth"}}}async getLicensedTeamMembersFromFirestore(e){try{console.log("🔍 [TeamMemberService] Fetching licensed team members from Firestore with options:",e),await this.firestoreAdapter.initialize();const t=this.firestoreAdapter.getCurrentUser();if(!t)return console.log("❌ [TeamMemberService] No authenticated user found"),[];let r=null;try{const o=await this.firestoreAdapter.getDocumentById("users",t.uid);if(o&&o.organizationId)r=o.organizationId,console.log("✅ [TeamMemberService] Found organization ID from user document:",r);else{const c=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:t.email}]);c.length>0&&c[0].organizationId&&(r=c[0].organizationId,console.log("✅ [TeamMemberService] Found organization ID from user email query:",r))}}catch(o){console.warn("⚠️ [TeamMemberService] Error getting user organization:",o)}if(!r)return console.log("❌ [TeamMemberService] No organization ID found for user"),[];console.log("🏢 [TeamMemberService] Fetching team members for organization:",r);const a=await this.firestoreAdapter.queryDocuments("teamMembers",[{field:"organizationId",operator:"==",value:r}]);console.log(`🔍 [TeamMemberService] Raw team members found: ${a.length}`);const l=a.filter(o=>{var u,m;const c=((m=(u=o.status)==null?void 0:u.toUpperCase)==null?void 0:m.call(u))||o.status||"UNKNOWN";return c!=="ACTIVE"&&c!=="active"?(console.log(`⚠️ [TeamMemberService] Excluding team member ${o.email} with status: ${c}`),!1):o.isActive===!1?(console.log(`⚠️ [TeamMemberService] Excluding team member ${o.email} with isActive: false`),!1):o.revokedAt||o.removedAt||o.suspendedAt?(console.log(`⚠️ [TeamMemberService] Excluding team member ${o.email} with revocation/removal dates`),!1):!0});console.log(`✅ [TeamMemberService] Active team members after filtering: ${l.length}`);let i=[];if(e!=null&&e.excludeProjectId)try{i=(await this.getProjectTeamMembersFromFirestore(e.excludeProjectId)).map(c=>c.teamMemberId),console.log(`🔍 [TeamMemberService] Excluding ${i.length} already assigned team members`)}catch(o){console.warn("⚠️ [TeamMemberService] Failed to get assigned team members:",o)}const n=l.filter(o=>{if(i.includes(o.id))return!1;if(e!=null&&e.search){const c=e.search.toLowerCase(),u=(o.name||"").toLowerCase(),m=(o.firstName||"").toLowerCase(),P=(o.lastName||"").toLowerCase(),S=(o.email||"").toLowerCase();return u.includes(c)||m.includes(c)||P.includes(c)||S.includes(c)}return!0}).map(o=>{let c=o.name;c||(o.firstName&&o.lastName?c=`${o.firstName} ${o.lastName}`:o.firstName?c=o.firstName:o.lastName?c=o.lastName:o.email?c=o.email.split("@")[0].replace(/[._-]/g," ").split(" ").map(S=>S.charAt(0).toUpperCase()+S.slice(1).toLowerCase()).join(" "):c="Unknown User");let u=o.licenseType;return u||(u="professional"),{...o,name:c,licenseType:u,status:"active",isActive:!0}});return n.sort((o,c)=>{const u=(o.name||"").toLowerCase(),m=(c.name||"").toLowerCase();return u.localeCompare(m)}),console.log(`✅ [TeamMemberService] Final filtered and mapped team members: ${n.length}`),n}catch(t){return this.handleError(t,"getLicensedTeamMembersFromFirestore"),[]}}async getProjectTeamMembersFromFirestore(e){try{console.log("🔍 [TeamMemberService] Fetching team members from Firestore for project:",e),await this.firestoreAdapter.initialize();const t=[],r=await this.firestoreAdapter.getDocumentById("projects",e);if(r){const l=r.teamMembers||[];for(const i of l)t.push({id:i.userId||i.id,teamMemberId:i.userId||i.id,projectId:e,role:i.role||"member",permissions:i.permissions||["read"],assignedAt:i.assignedAt||new Date().toISOString(),isActive:i.isActive!==!1,email:i.email,name:i.name||i.email,status:i.status||"active"})}try{const l=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e}]);for(const i of l)t.find(s=>s.teamMemberId===i.teamMemberId)||t.push(i)}catch{console.log("ℹ️ [TeamMemberService] projectTeamMembers collection not found or accessible")}const a=[];for(const l of t)try{const i=await this.firestoreAdapter.getDocumentById("teamMembers",l.teamMemberId);i?a.push({...l,name:i.name||i.email||l.name||"Unnamed User",email:i.email||l.email||"No email",teamMember:i}):a.push(l)}catch(i){console.warn("⚠️ [TeamMemberService] Failed to get full profile for team member:",l.teamMemberId,i),a.push(l)}return console.log(`✅ [TeamMemberService] Found ${a.length} team members for project ${e}`),a}catch(t){return this.handleError(t,`getProjectTeamMembersFromFirestore(${e})`),[]}}async addTeamMemberToProjectInFirestore(e,t,r){try{console.log("🔍 [TeamMemberService] Adding team member to project in Firestore:",{projectId:e,teamMemberId:t,role:r}),await this.firestoreAdapter.initialize();const a=await this.firestoreAdapter.getDocumentById("teamMembers",t);if(!a)return console.warn("⚠️ [TeamMemberService] Team member not found:",t),!1;if(r===y.ADMIN&&(await this.getProjectTeamMembersFromFirestore(e)).some(o=>o.role===y.ADMIN))throw console.warn("⚠️ [TeamMemberService] Only one Admin is allowed per project"),new Error("Only one Admin is allowed per project. Please remove the existing Admin first.");const l={projectId:e,teamMemberId:t,role:r,assignedBy:"system",assignedAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isActive:!0,teamMemberName:a.name||"Unknown User",teamMemberEmail:a.email||"No email",teamMemberRole:a.role||"MEMBER",teamMemberLicenseType:a.licenseType||"BASIC"};return await this.firestoreAdapter.createDocument("projectTeamMembers",l)!==null}catch(a){return this.handleError(a,`addTeamMemberToProjectInFirestore(${e}, ${t})`),!1}}async removeTeamMemberFromProjectInFirestore(e,t){try{console.log("🔍 [TeamMemberService] Removing team member from project in Firestore:",{projectId:e,teamMemberId:t}),await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e},{field:"teamMemberId",operator:"==",value:t}]);return r.length===0?(console.warn("⚠️ [TeamMemberService] Team member not found in project"),!1):await this.firestoreAdapter.deleteDocument("projectTeamMembers",r[0].id)}catch(r){return this.handleError(r,`removeTeamMemberFromProjectInFirestore(${e}, ${t})`),!1}}async updateTeamMemberRoleInFirestore(e,t,r){try{console.log("🔍 [TeamMemberService] Updating team member role in Firestore:",{projectId:e,teamMemberId:t,role:r}),await this.firestoreAdapter.initialize();const a=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e},{field:"teamMemberId",operator:"==",value:t}]);if(a.length===0)return console.warn("⚠️ [TeamMemberService] Team member not found in project"),!1;if(r===y.ADMIN&&(await this.getProjectTeamMembersFromFirestore(e)).some(n=>n.role===y.ADMIN&&n.teamMemberId!==t))throw console.warn("⚠️ [TeamMemberService] Only one Admin is allowed per project"),new Error("Only one Admin is allowed per project. Please remove the existing Admin first.");return await this.firestoreAdapter.updateDocument("projectTeamMembers",a[0].id,{role:r,updatedAt:new Date().toISOString()})}catch(a){return this.handleError(a,`updateTeamMemberRoleInFirestore(${e}, ${t})`),!1}}async validateTeamMemberCredentialsFromFirestore(e,t){try{await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.queryDocuments("teamMembers",[{field:"email",operator:"==",value:e}]);if(r.length===0)return{isValid:!1,error:"Team member not found"};const a=r[0];return t.length<1?{isValid:!1,error:"Password is required"}:{isValid:!0,teamMember:a,projectAccess:[]}}catch(r){return this.handleError(r,"validateTeamMemberCredentialsFromFirestore"),{isValid:!1,error:"Authentication failed"}}}async createTeamMemberWithFirebaseAuthInFirestore(e){try{console.log("🔍 [TeamMemberService] Creating team member with Firebase Auth in Firestore:",e),await this.firestoreAdapter.initialize();const{auth:t}=await f(async()=>{const{auth:c}=await import("./firebase-D3UXsHa2.js");return{auth:c}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{createUserWithEmailAndPassword:r}=await f(async()=>{const{createUserWithEmailAndPassword:c}=await import("./index.esm-D2YDx4vs.js");return{createUserWithEmailAndPassword:c}},__vite__mapDeps([8,6])),a=e.temporaryPassword||this.generateSecurePassword();let l;try{l=(await r(t,e.email,a)).user,console.log("✅ [TeamMemberService] Firebase Auth user created successfully:",l.uid)}catch(c){if(c.code==="auth/email-already-in-use")return{success:!1,error:"User with this email already exists in Firebase Authentication"};throw c}const i={id:l.uid,email:e.email,firstName:e.firstName,lastName:e.lastName,name:`${e.firstName} ${e.lastName}`,licenseType:e.licenseType||"PROFESSIONAL",status:"ACTIVE",organizationId:e.organizationId,department:e.department,role:e.role||"MEMBER",firebaseUid:l.uid,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isActive:!0},s={id:l.uid,email:e.email,name:`${e.firstName} ${e.lastName}`,firstName:e.firstName,lastName:e.lastName,role:"TEAM_MEMBER",firebaseUid:l.uid,isEmailVerified:!1,twoFactorEnabled:!1,twoFactorBackupCodes:[],privacyConsent:[],marketingConsent:!1,dataProcessingConsent:!1,identityVerified:!1,kycStatus:"PENDING",isTeamMember:!0,organizationId:e.organizationId,memberRole:e.role||"MEMBER",memberStatus:"ACTIVE",department:e.department,licenseType:e.licenseType||"PROFESSIONAL",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};let n=null,o=null;if(n=await this.firestoreAdapter.createDocument("teamMembers",i),n&&(o=await this.firestoreAdapter.createDocument("users",s)),!n||!o){try{await l.delete(),console.log("🔄 [TeamMemberService] Rolled back Firebase Auth user after Firestore failure")}catch(c){console.error("❌ [TeamMemberService] Failed to rollback Firebase Auth user:",c)}return{success:!1,error:"Failed to create required documents in Firestore"}}return console.log("✅ [TeamMemberService] Team member created successfully in Firestore"),{success:!0,teamMember:i,firebaseUid:l.uid,temporaryPassword:a}}catch(t){return this.handleError(t,"createTeamMemberWithFirebaseAuthInFirestore"),{success:!1,error:(t==null?void 0:t.message)||"Failed to create team member with Firebase Auth"}}}generateSecurePassword(){const t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";let r="";r+="ABCDEFGHIJKLMNOPQRSTUVWXYZ"[Math.floor(Math.random()*26)],r+="abcdefghijklmnopqrstuvwxyz"[Math.floor(Math.random()*26)],r+="0123456789"[Math.floor(Math.random()*10)],r+="!@#$%^&*"[Math.floor(Math.random()*8)];for(let a=4;a<12;a++)r+=t[Math.floor(Math.random()*t.length)];return r.split("").sort(()=>Math.random()-.5).join("")}};h(D,"instance");let M=D;const F=class F{constructor(){h(this,"config");h(this,"projectService",null);h(this,"datasetService",null);h(this,"teamMemberService",null);this.config={isWebOnlyMode:this.detectWebOnlyMode(),apiBaseUrl:"/api"},this.initializeFirestoreAdapter()}static getInstance(){return F.instance||(F.instance=new F),F.instance}initialize(e){this.config={...this.config,...e},console.log("🔧 [ServiceFactory] Initialized with config:",this.config),this.projectService=null,this.datasetService=null,this.teamMemberService=null}getProjectService(){return this.projectService||(this.projectService=T.getInstance(this.config)),this.projectService}getDatasetService(){return this.datasetService||(this.datasetService=j.getInstance(this.config)),this.datasetService}getTeamMemberService(){return this.teamMemberService||(this.teamMemberService=M.getInstance(this.config)),this.teamMemberService}detectWebOnlyMode(){if(typeof window<"u"){const e=new URLSearchParams(window.location.search);if(e.has("webonly"))return e.get("webonly")==="true";const t=localStorage.getItem("webonly_mode");if(t)return t==="true";if(window.ENV&&window.ENV.WEBONLY)return window.ENV.WEBONLY===!0}return!0}async initializeFirestoreAdapter(){try{await g.getInstance().initialize()}catch(e){console.error("❌ [ServiceFactory] Failed to initialize Firestore adapter:",e)}}};h(F,"instance");let E=F;const A=class A{constructor(){h(this,"serviceFactory");h(this,"authTokenCallback",null);this.serviceFactory=E.getInstance(),this.serviceFactory.initialize({isWebOnlyMode:this.isWebOnlyMode()})}static getInstance(){return A.instance||(A.instance=new A),A.instance}isWebOnlyMode(){if(typeof window<"u"){const e=new URLSearchParams(window.location.search);if(e.has("webonly"))return e.get("webonly")==="true";const t=localStorage.getItem("webonly_mode");if(t)return t==="true";if(window.ENV&&window.ENV.WEBONLY)return window.ENV.WEBONLY===!0}return!0}setConfig(e){this.serviceFactory.initialize(e)}async getProjects(){return await this.serviceFactory.getProjectService().getProjects()}async getUserProjects(){return await this.serviceFactory.getProjectService().getProjects()}async getProject(e){return await this.serviceFactory.getProjectService().getProject(e)}async createProject(e){return await this.serviceFactory.getProjectService().createProject(e)}async createCloudProject(e){return await this.serviceFactory.getProjectService().createProject(e)}async createCloudProjectInFirestore(e){return await this.serviceFactory.getProjectService().createProject(e)}async updateProject(e,t){return await this.serviceFactory.getProjectService().updateProject(e,t)}async updateProjectInFirestore(e,t){return await this.serviceFactory.getProjectService().updateProject(e,t)}async archiveProject(e){return await this.serviceFactory.getProjectService().archiveProject(e)}async archiveProjectInFirestore(e){return await this.serviceFactory.getProjectService().archiveProject(e)}async restoreProject(e){return await this.serviceFactory.getProjectService().restoreProject(e)}async deleteProject(e){return await this.serviceFactory.getProjectService().deleteProject(e)}async listDatasets(e){return await this.serviceFactory.getDatasetService().listDatasets(e)}async createDataset(e){return await this.serviceFactory.getDatasetService().createDataset(e)}async getProjectDatasets(e){return await this.serviceFactory.getDatasetService().getProjectDatasets(e)}async assignDatasetToProject(e,t){await this.serviceFactory.getDatasetService().assignDatasetToProject(e,t)}async unassignDatasetFromProject(e,t){await this.serviceFactory.getDatasetService().unassignDatasetFromProject(e,t)}async getLicensedTeamMembers(e){return await this.serviceFactory.getTeamMemberService().getLicensedTeamMembers(e)}async getProjectTeamMembers(e){return await this.serviceFactory.getTeamMemberService().getProjectTeamMembers(e)}async addTeamMemberToProject(e,t,r=y.DO_ER){await this.serviceFactory.getTeamMemberService().addTeamMemberToProject(e,t,r)}async removeTeamMemberFromProject(e,t){await this.serviceFactory.getTeamMemberService().removeTeamMemberFromProject(e,t)}async updateTeamMemberRole(e,t,r){await this.serviceFactory.getTeamMemberService().updateTeamMemberRole(e,t,r)}async validateTeamMemberCredentials(e,t){return await this.serviceFactory.getTeamMemberService().validateTeamMemberCredentials(e,t)}setAuthTokenCallback(e){this.authTokenCallback=e}setAuthToken(e){console.log("Setting auth token:",e),typeof localStorage<"u"&&localStorage.setItem("auth_token",e),this.authTokenCallback&&this.authTokenCallback()}cleanDocumentData(e){const t={};for(const[r,a]of Object.entries(e))if(a!==void 0){if(a===null){t[r]=null;continue}if(typeof a=="object"&&!Array.isArray(a)&&!(a instanceof Date)){t[r]=this.cleanDocumentData(a);continue}t[r]=a}return t}};h(A,"instance");let I=A;const q=I.getInstance();typeof window<"u"&&(window.cloudProjectIntegration=q);export{q as cloudProjectIntegration,I as default};
