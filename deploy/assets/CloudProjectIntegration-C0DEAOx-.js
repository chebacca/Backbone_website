var p=Object.defineProperty;var f=(n,e,t)=>e in n?p(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var c=(n,e,t)=>f(n,typeof e!="symbol"?e+"":e,t);import{s as u}from"./index-BvoI4F7U.js";import"./mui-BeKQ6Vc5.js";import"./vendor-OeuszDaU.js";import"./stripe-B_MuO_-5.js";const l=class l{constructor(){c(this,"baseURL");c(this,"authToken",null);this.baseURL=this.getBaseURL(),this.initializeAuth()}static getInstance(){return this.instance||(this.instance=new l),this.instance}initializeAuth(){this.authToken=localStorage.getItem("auth_token")}getBaseURL(){return window.location.hostname!=="localhost"&&window.location.hostname!=="127.0.0.1"&&!window.location.hostname.includes("localhost"),"/api"}async apiRequest(e,t="GET",r){const a=`${this.baseURL}/${e}`,o={"Content-Type":"application/json"};this.authToken&&(o.Authorization=`Bearer ${this.authToken}`);const h={method:t,headers:o,...r&&{body:JSON.stringify(r)}};try{const s=await fetch(a,h);if(!s.ok)throw s.status===401?(await this.handleAuthError(),new Error("Authentication required")):new Error(`API request failed: ${s.statusText}`);const i=await s.json();if(!i.success)throw new Error(i.error||i.message||"API request failed");return i.data}catch(s){throw console.error("API request error:",s),s}}async handleAuthError(){var e,t;try{const r=localStorage.getItem("refresh_token");if(!r)throw new Error("No refresh token available");const a=await fetch(`${this.baseURL}/auth/refresh`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({refreshToken:r})});if(a.ok){const o=await a.json();if(o.success&&((t=(e=o.data)==null?void 0:e.tokens)!=null&&t.accessToken)){this.authToken=o.data.tokens.accessToken,localStorage.setItem("auth_token",this.authToken),o.data.tokens.refreshToken&&localStorage.setItem("refresh_token",o.data.tokens.refreshToken);return}}}catch(r){console.error("Token refresh failed:",r)}localStorage.removeItem("auth_token"),localStorage.removeItem("refresh_token"),this.authToken=null,await u.reset()}setAuthToken(e){this.authToken=e,localStorage.setItem("auth_token",e)}async createCloudProject(e){try{const t=this.mapToCloudProjectPayload(e),r=await this.apiRequest("projects","POST",t);return console.log("Cloud project created:",r),await this.setupProjectResources(r.id,e),r.id}catch(t){throw console.error("Failed to create cloud project:",t),new Error(`Failed to create cloud project: ${t.message}`)}}mapToCloudProjectPayload(e){const t=u.getState(),r={name:e.name,description:e.description,type:this.mapApplicationModeToType(t.selectedMode),applicationMode:t.selectedMode,visibility:"private",storageBackend:this.mapStorageModeToBackend(t.storageMode)};return e.cloudConfig&&(e.cloudConfig.provider==="gcs"?(r.storageBackend="gcs",r.gcsBucket=e.cloudConfig.bucket,r.gcsPrefix=e.cloudConfig.prefix):r.storageBackend="firestore"),e.collaborationSettings&&t.selectedMode==="shared_network"&&(r.allowCollaboration=!0,r.maxCollaborators=e.collaborationSettings.maxCollaborators,r.realTimeEnabled=e.collaborationSettings.enableRealTime,r.enableComments=e.collaborationSettings.enableComments,r.enableActivityLog=!0,r.enablePresenceIndicators=!0),t.selectedMode==="standalone"&&(r.autoSave=!0,r.backupEnabled=!0,r.offlineMode=t.storageMode==="local"),r}mapApplicationModeToType(e){switch(e){case"standalone":return"standalone";case"shared_network":return"networked";default:return"networked"}}mapStorageModeToBackend(e){switch(e){case"cloud":return"firestore";case"hybrid":return"firestore";case"local":return"firestore";default:return"firestore"}}async setupProjectResources(e,t){var r,a;(r=t.localNetworkConfig)!=null&&r.enabled&&await this.setupLocalNetworkDeployment(e,t.localNetworkConfig),((a=t.cloudConfig)==null?void 0:a.provider)==="gcs"&&await this.validateGCSConfiguration(e,t.cloudConfig),await this.initializeProjectWorkspace(e,t)}async setupLocalNetworkDeployment(e,t){try{console.log("Setting up local network deployment:",{projectId:e,port:t.port,address:t.address,maxUsers:t.maxUsers}),await this.apiRequest(`projects/${e}`,"PATCH",{metadata:{localNetwork:{enabled:!0,port:t.port,address:t.address,maxUsers:t.maxUsers,deployedAt:new Date().toISOString()}}})}catch(r){console.error("Failed to setup local network deployment:",r)}}async validateGCSConfiguration(e,t){try{await this.apiRequest(`projects/${e}/storage/signed-url`,"POST",{filename:"test-validation.txt",operation:"upload"}),console.log("GCS configuration validated for project:",e)}catch(r){throw console.error("GCS configuration validation failed:",r),new Error("GCS storage configuration is invalid")}}async initializeProjectWorkspace(e,t){try{console.log("Initializing project workspace for:",e)}catch(r){console.error("Failed to initialize project workspace:",r)}}async getUserProjects(){try{return await this.apiRequest("projects")}catch(e){return console.error("Failed to fetch user projects:",e),[]}}async getProject(e){try{return await this.apiRequest(`projects/${e}`)}catch(t){return console.error("Failed to fetch project:",t),null}}async validateProjectAccess(e){try{return await this.getProject(e)!==null}catch{return!1}}async generateSignedUrl(e,t,r="upload",a){try{const o=await this.apiRequest(`projects/${e}/storage/signed-url`,"POST",{filename:t,operation:r,contentType:a});return{url:o.url,method:o.method,headers:o.headers}}catch(o){throw console.error("Failed to generate signed URL:",o),o}}async updateProject(e,t){try{return await this.apiRequest(`projects/${e}`,"PATCH",t)}catch(r){throw console.error("Failed to update project:",r),r}}async archiveProject(e){try{await this.apiRequest(`projects/${e}`,"DELETE")}catch(t){throw console.error("Failed to archive project:",t),t}}};c(l,"instance");let d=l;const g=d.getInstance();typeof window<"u"&&(window.cloudProjectIntegration=g);export{g as cloudProjectIntegration,d as default};
