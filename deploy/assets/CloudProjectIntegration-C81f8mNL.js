const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-DEnzXDV2.js","assets/index-BQL290Xm.js","assets/mui-CbJLuC6G.js","assets/vendor-CjD1bmmO.js","assets/stripe-iaBWsbMy.js","assets/index-CBai7h7s.css","assets/index.esm-B6Q1BJpE.js","assets/index.esm-D6OvRmrs.js","assets/index.esm-Cicvjgiv.js"])))=>i.map(i=>d[i]);
var ue=Object.defineProperty;var ge=(g,e,t)=>e in g?ue(g,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):g[e]=t;var j=(g,e,t)=>ge(g,typeof e!="symbol"?e+"":e,t);import{c as B,_ as b}from"./index-BQL290Xm.js";var S=(g=>(g.ADMIN="admin",g.DO_ER="do_er",g))(S||{}),v=(g=>(g.ACTIVE="active",g.INACTIVE="inactive",g.SUSPENDED="suspended",g))(v||{}),T=(g=>(g.PROFESSIONAL="professional",g.ENTERPRISE="enterprise",g.BASIC="basic",g))(T||{});const se=[{teamMemberRole:"admin",backboneUserRole:"ADMIN",permissions:["userManagement.create_users","userManagement.edit_users","userManagement.delete_users","userManagement.manage_roles","userManagement.assign_permissions","system.access_settings","system.manage_integrations","reports.access_analytics","sessions.manage_workflow_steps","inventory.manage_assets","messages.manage_notifications"],description:"Full administrative access to the project. Can manage users, roles, and all project settings."},{teamMemberRole:"do_er",backboneUserRole:"MEMBER",permissions:["sessions.create_sessions","sessions.edit_sessions","sessions.delete_sessions","inventory.create_assets","inventory.edit_assets","inventory.delete_assets","reports.create_reports","reports.edit_reports","messages.create_channels"],description:"Can create, edit, and delete data but cannot manage users or administrative settings."}],Pe=Object.freeze(Object.defineProperty({__proto__:null,LicenseType:T,TEAM_MEMBER_ROLE_MAPPINGS:se,TeamMemberRole:S,TeamMemberStatus:v},Symbol.toStringTag,{value:"Module"})),D=()=>typeof navigator<"u"&&"onLine"in navigator?navigator.onLine:!0,me=(g,e)=>typeof window>"u"?()=>{}:(window.addEventListener("online",g),window.addEventListener("offline",e),()=>{window.removeEventListener("online",g),window.removeEventListener("offline",e)}),fe=async()=>{try{const g=`https://backbone-logic.web.app/ping?_=${Date.now()}`,e=await fetch(g,{method:"HEAD",mode:"no-cors",cache:"no-cache",headers:{"Cache-Control":"no-cache"},redirect:"error"});return!0}catch{return!1}};let V;const he=new Uint8Array(16);function ye(){if(!V&&(V=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!V))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return V(he)}const w=[];for(let g=0;g<256;++g)w.push((g+256).toString(16).slice(1));function be(g,e=0){return w[g[e+0]]+w[g[e+1]]+w[g[e+2]]+w[g[e+3]]+"-"+w[g[e+4]]+w[g[e+5]]+"-"+w[g[e+6]]+w[g[e+7]]+"-"+w[g[e+8]]+w[g[e+9]]+"-"+w[g[e+10]]+w[g[e+11]]+w[g[e+12]]+w[g[e+13]]+w[g[e+14]]+w[g[e+15]]}const pe=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),ne={randomUUID:pe};function ie(g,e,t){if(ne.randomUUID&&!g)return ne.randomUUID();g=g||{};const r=g.random||(g.rng||ye)();return r[6]=r[6]&15|64,r[8]=r[8]&63|128,be(r)}const I={PENDING_PROJECTS:"offline_pending_projects",SYNC_QUEUE:"offline_sync_queue"},M=class M{constructor(){j(this,"dbName","backbone_offline_storage");j(this,"dbVersion",1);j(this,"db",null);j(this,"initPromise",null);this.initPromise=this.initDatabase()}static getInstance(){return M.instance||(M.instance=new M),M.instance}async initDatabase(){return new Promise((e,t)=>{try{if(!window.indexedDB){console.warn("IndexedDB not supported - offline storage will be limited"),e(!1);return}const r=window.indexedDB.open(this.dbName,this.dbVersion);r.onupgradeneeded=o=>{const a=o.target.result;if(!a.objectStoreNames.contains("projects")){const s=a.createObjectStore("projects",{keyPath:"id"});s.createIndex("pendingSync","pendingSync",{unique:!1}),s.createIndex("createdAt","createdAt",{unique:!1})}if(!a.objectStoreNames.contains("syncQueue")){const s=a.createObjectStore("syncQueue",{keyPath:"id"});s.createIndex("type","type",{unique:!1}),s.createIndex("createdAt","createdAt",{unique:!1})}},r.onsuccess=o=>{this.db=o.target.result,console.log("✅ IndexedDB initialized for offline storage"),e(!0)},r.onerror=o=>{console.error("❌ Failed to initialize IndexedDB:",o),e(!1)}}catch(r){console.error("❌ Error initializing IndexedDB:",r),e(!1)}})}async ensureInitialized(){return this.db?!0:this.initPromise?this.initPromise:this.initDatabase()}async storeOfflineProject(e){if(await this.ensureInitialized(),!this.db)try{const t=this.getLocalStorageProjects();return t.push(e),localStorage.setItem(I.PENDING_PROJECTS,JSON.stringify(t)),e.id}catch(t){throw console.error("❌ Failed to store project in localStorage:",t),t}return new Promise((t,r)=>{try{const s=this.db.transaction(["projects"],"readwrite").objectStore("projects").put(e);s.onsuccess=()=>{console.log("✅ Project stored offline:",e.id),t(e.id)},s.onerror=i=>{console.error("❌ Failed to store project offline:",i),r(new Error("Failed to store project offline"))}}catch(o){console.error("❌ Error storing project offline:",o),r(o)}})}async getOfflineProjects(){return await this.ensureInitialized(),this.db?new Promise((e,t)=>{try{const a=this.db.transaction(["projects"],"readonly").objectStore("projects").getAll();a.onsuccess=s=>{const i=s.target.result;e(i)},a.onerror=s=>{console.error("❌ Failed to get offline projects:",s),t(new Error("Failed to get offline projects"))}}catch(r){console.error("❌ Error getting offline projects:",r),t(r)}}):this.getLocalStorageProjects()}getLocalStorageProjects(){try{const e=localStorage.getItem(I.PENDING_PROJECTS);return e?JSON.parse(e):[]}catch(e){return console.error("❌ Failed to get projects from localStorage:",e),[]}}async getPendingSyncProjects(){return await this.ensureInitialized(),this.db?new Promise((e,t)=>{try{const s=this.db.transaction(["projects"],"readonly").objectStore("projects").index("pendingSync").getAll(IDBKeyRange.only(!0));s.onsuccess=i=>{const l=i.target.result;e(l)},s.onerror=i=>{console.error("❌ Failed to get pending sync projects:",i),t(new Error("Failed to get pending sync projects"))}}catch(r){console.error("❌ Error getting pending sync projects:",r),t(r)}}):this.getLocalStorageProjects().filter(t=>t.pendingSync)}async markProjectSynced(e,t){if(await this.ensureInitialized(),!this.db){try{const o=this.getLocalStorageProjects().map(a=>a.id===e?{...a,pendingSync:!1,onlineId:t}:a);localStorage.setItem(I.PENDING_PROJECTS,JSON.stringify(o))}catch(r){throw console.error("❌ Failed to mark project as synced in localStorage:",r),r}return}return new Promise((r,o)=>{try{const s=this.db.transaction(["projects"],"readwrite").objectStore("projects"),i=s.get(e);i.onsuccess=l=>{const c=l.target.result;if(!c){o(new Error(`Project not found: ${e}`));return}c.pendingSync=!1,t&&(c.id=t);const d=s.put(c);d.onsuccess=()=>{console.log("✅ Project marked as synced:",e),r()},d.onerror=n=>{console.error("❌ Failed to mark project as synced:",n),o(new Error("Failed to mark project as synced"))}},i.onerror=l=>{console.error("❌ Failed to get project for sync update:",l),o(new Error("Failed to get project for sync update"))}}catch(a){console.error("❌ Error marking project as synced:",a),o(a)}})}async addToSyncQueue(e){await this.ensureInitialized();const t={id:ie(),...e,createdAt:new Date().toISOString(),attempts:0};if(!this.db)try{const r=localStorage.getItem(I.SYNC_QUEUE),o=r?JSON.parse(r):[];return o.push(t),localStorage.setItem(I.SYNC_QUEUE,JSON.stringify(o)),t.id}catch(r){throw console.error("❌ Failed to add to sync queue in localStorage:",r),r}return new Promise((r,o)=>{try{const i=this.db.transaction(["syncQueue"],"readwrite").objectStore("syncQueue").add(t);i.onsuccess=()=>{console.log("✅ Item added to sync queue:",t.id),r(t.id)},i.onerror=l=>{console.error("❌ Failed to add item to sync queue:",l),o(new Error("Failed to add item to sync queue"))}}catch(a){console.error("❌ Error adding item to sync queue:",a),o(a)}})}async getSyncQueue(){if(await this.ensureInitialized(),!this.db)try{const e=localStorage.getItem(I.SYNC_QUEUE);return e?JSON.parse(e):[]}catch(e){return console.error("❌ Failed to get sync queue from localStorage:",e),[]}return new Promise((e,t)=>{try{const a=this.db.transaction(["syncQueue"],"readonly").objectStore("syncQueue").getAll();a.onsuccess=s=>{const i=s.target.result;e(i)},a.onerror=s=>{console.error("❌ Failed to get sync queue:",s),t(new Error("Failed to get sync queue"))}}catch(r){console.error("❌ Error getting sync queue:",r),t(r)}})}async removeFromSyncQueue(e){if(await this.ensureInitialized(),!this.db){try{const t=localStorage.getItem(I.SYNC_QUEUE),o=(t?JSON.parse(t):[]).filter(a=>a.id!==e);localStorage.setItem(I.SYNC_QUEUE,JSON.stringify(o))}catch(t){throw console.error("❌ Failed to remove from sync queue in localStorage:",t),t}return}return new Promise((t,r)=>{try{const s=this.db.transaction(["syncQueue"],"readwrite").objectStore("syncQueue").delete(e);s.onsuccess=()=>{console.log("✅ Item removed from sync queue:",e),t()},s.onerror=i=>{console.error("❌ Failed to remove item from sync queue:",i),r(new Error("Failed to remove item from sync queue"))}}catch(o){console.error("❌ Error removing item from sync queue:",o),r(o)}})}async updateSyncAttempt(e){if(await this.ensureInitialized(),!this.db){try{const t=localStorage.getItem(I.SYNC_QUEUE),o=(t?JSON.parse(t):[]).map(a=>a.id===e?{...a,attempts:(a.attempts||0)+1,lastAttempt:new Date().toISOString()}:a);localStorage.setItem(I.SYNC_QUEUE,JSON.stringify(o))}catch(t){throw console.error("❌ Failed to update sync attempt in localStorage:",t),t}return}return new Promise((t,r)=>{try{const a=this.db.transaction(["syncQueue"],"readwrite").objectStore("syncQueue"),s=a.get(e);s.onsuccess=i=>{const l=i.target.result;if(!l){r(new Error(`Sync queue item not found: ${e}`));return}l.attempts=(l.attempts||0)+1,l.lastAttempt=new Date().toISOString();const c=a.put(l);c.onsuccess=()=>{console.log("✅ Sync attempt updated for item:",e),t()},c.onerror=d=>{console.error("❌ Failed to update sync attempt:",d),r(new Error("Failed to update sync attempt"))}},s.onerror=i=>{console.error("❌ Failed to get sync queue item:",i),r(new Error("Failed to get sync queue item"))}}catch(o){console.error("❌ Error updating sync attempt:",o),r(o)}})}};j(M,"instance");let J=M;const C=J.getInstance(),O=class O{constructor(){j(this,"syncInProgress",!1);j(this,"networkListenerCleanup",null);j(this,"syncInterval",null);this.setupNetworkListeners()}static getInstance(){return O.instance||(O.instance=new O),O.instance}setupNetworkListeners(){this.networkListenerCleanup&&this.networkListenerCleanup(),this.networkListenerCleanup=me(()=>{console.log("🌐 Network connection restored - starting sync"),this.startSync()},()=>{console.log("📴 Network connection lost - pausing sync"),this.pauseSync()})}startSync(e=!0){this.pauseSync(),e&&this.syncOfflineData(),this.syncInterval=window.setInterval(()=>{this.syncOfflineData()},5*60*1e3)}pauseSync(){this.syncInterval&&(window.clearInterval(this.syncInterval),this.syncInterval=null)}async syncOfflineData(){if(this.syncInProgress){console.log("⏳ Sync already in progress, skipping");return}if(!D()){console.log("📴 Device is offline, skipping sync");return}try{if(this.syncInProgress=!0,!await fe()){console.log("📴 Network connectivity test failed, skipping sync");return}console.log("🔄 Starting offline data sync"),await this.syncPendingProjects(),await this.processSyncQueue(),console.log("✅ Offline data sync completed")}catch(e){console.error("❌ Error during offline data sync:",e)}finally{this.syncInProgress=!1}}async syncPendingProjects(){try{const e=await C.getPendingSyncProjects();if(e.length===0){console.log("✅ No pending projects to sync");return}console.log(`🔄 Syncing ${e.length} pending projects`);for(const t of e)try{const r=await R.createCloudProjectInFirestore(t.originalOptions);await C.markProjectSynced(t.id,r),console.log(`✅ Project synced: ${t.id} -> ${r}`)}catch(r){console.error(`❌ Failed to sync project ${t.id}:`,r)}}catch(e){console.error("❌ Error syncing pending projects:",e)}}async processSyncQueue(){try{const e=await C.getSyncQueue();if(e.length===0){console.log("✅ No items in sync queue");return}console.log(`🔄 Processing ${e.length} items in sync queue`);for(const t of e)try{await this.processSyncQueueItem(t),await C.removeFromSyncQueue(t.id)}catch(r){console.error(`❌ Failed to process sync queue item ${t.id}:`,r),await C.updateSyncAttempt(t.id)}}catch(e){console.error("❌ Error processing sync queue:",e)}}async processSyncQueueItem(e){switch(e.type){case"project_create":await R.createCloudProjectInFirestore(e.data);break;case"project_update":await R.updateProjectInFirestore(e.data.id,e.data.updates);break;case"project_delete":await R.archiveProjectInFirestore(e.data.id);break;default:throw new Error(`Unknown sync queue item type: ${e.type}`)}}async forceSyncNow(){if(!D())return console.log("📴 Device is offline, cannot force sync"),!1;try{return await this.syncOfflineData(),!0}catch(e){return console.error("❌ Error during forced sync:",e),!1}}cleanup(){this.pauseSync(),this.networkListenerCleanup&&(this.networkListenerCleanup(),this.networkListenerCleanup=null)}};j(O,"instance");let G=O;const Q=G.getInstance();Q.startSync(!1);const W=class W{constructor(){j(this,"baseURL");j(this,"baseURLOverride",null);j(this,"authToken",null);j(this,"authTokenCallback",null);this.baseURL="/api",this.initializeAuth(),this.initializeOfflineSupport()}async initializeOfflineSupport(){try{console.log("🔄 [CloudProjectIntegration] Initializing offline support..."),Q.startSync(!1),console.log("✅ [CloudProjectIntegration] Offline support initialized")}catch(e){console.error("❌ [CloudProjectIntegration] Failed to initialize offline support:",e)}}static getInstance(){return this.instance||(this.instance=new W),this.instance}setAuthTokenCallback(e){this.authTokenCallback=e}getAuthToken(){const e=this.authTokenCallback?this.authTokenCallback():null,t=this.authToken;return e||t}initializeAuth(){try{this.authToken=localStorage.getItem("auth_token")}catch{console.warn("localStorage not available, using auth callback instead"),this.authToken=null}}async apiRequest(e,t="GET",r){var o,a,s;try{const i=String(e||"").replace(/^\//,""),l={};try{const d=localStorage.getItem("preferredApplicationMode")||"shared_network";d&&(l["X-Application-Mode"]=String(d))}catch{}console.log(`🔍 [CloudProjectIntegration] Making ${t} request to: ${i}`),r&&console.log("🔍 [CloudProjectIntegration] Data:",r);let c;switch(t){case"GET":c=await B.get(i,{headers:l});break;case"POST":c=await B.post(i,r,{headers:l});break;case"PATCH":c=await B.patch(i,r,{headers:l});break;case"DELETE":c=await B.delete(i,{headers:l});break;default:throw new Error(`Unsupported HTTP method: ${t}`)}if(console.log("✅ [CloudProjectIntegration] API request successful:",c.data),c.data&&c.data.success)return c.data.data;if(c.data&&Array.isArray(c.data))return c.data;throw new Error(((o=c.data)==null?void 0:o.error)||((a=c.data)==null?void 0:a.message)||"API request failed")}catch(i){throw console.error("❌ [CloudProjectIntegration] API request failed:",i),((s=i.response)==null?void 0:s.status)===401?(await this.handleAuthError(),new Error("Authentication required")):i}}async handleAuthError(){var e,t;try{let r=null;try{r=localStorage.getItem("refresh_token")}catch{console.warn("localStorage not available for refresh token")}if(!r)throw new Error("No refresh token available");const o=await fetch(`${this.baseURL}/auth/refresh`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({refreshToken:r})});if(o.ok){const a=await o.json();if(a.success&&((t=(e=a.data)==null?void 0:e.tokens)!=null&&t.accessToken)){const s=a.data.tokens.accessToken;this.authToken=s;try{localStorage.setItem("auth_token",s);const i=a.data.tokens.refreshToken;i&&localStorage.setItem("refresh_token",i)}catch{console.warn("localStorage not available for storing tokens")}return}}}catch(r){console.error("Token refresh failed:",r)}try{localStorage.removeItem("auth_token"),localStorage.removeItem("refresh_token")}catch{console.warn("localStorage not available for clearing tokens")}this.authToken=null;try{localStorage.removeItem("preferredApplicationMode"),localStorage.removeItem("preferredStorageMode"),sessionStorage.removeItem("startup_reset")}catch{}}setAuthToken(e){this.authToken=e,localStorage.setItem("auth_token",e)}async createCloudProject(e){try{const t=D();if(!0&&t)try{return await this.createCloudProjectInFirestore(e)}catch(s){return console.error("Failed to create cloud project in Firestore:",s),await this.createProjectOfflineWithSync(e)}else if(!t)return console.log("📴 Device is offline - creating project locally for later sync"),await this.createProjectOffline(e);const o=this.mapToCloudProjectPayload(e),a=await this.apiRequest("projects","POST",o);return console.log("Cloud project created:",a),await this.setupProjectResources(a.id,e),typeof window<"u"&&window.dispatchEvent(new CustomEvent("project:created",{detail:{projectId:a.id,project:a}})),a.id}catch(t){console.error("Failed to create cloud project:",t);try{return console.log("⚠️ Falling back to offline project creation"),await this.createProjectOffline(e)}catch(r){console.error("Failed to create offline project as fallback:",r);const o=t instanceof Error?t.message:String(t);throw new Error(`Failed to create cloud project: ${o}`)}}}async createProjectOffline(e){var t,r,o,a,s,i,l;try{console.log("🔄 Creating project offline:",e.name);const c=`offline_${ie()}`,d=(()=>{var u;return(u=e==null?void 0:e.localNetworkConfig)!=null&&u.enabled?"shared_network":e.storageMode==="local"?"standalone":"shared_network"})();let n="local";if(e.storageMode==="cloud")switch((t=e.cloudConfig)==null?void 0:t.provider){case"gcs":n="gcs";break;case"s3":n="s3";break;case"azure-blob":n="azure-blob";break;case"firestore":default:n="firestore"}else e.storageMode==="hybrid"?n="firestore":n="local";const f=(()=>{try{const u=localStorage.getItem("auth_user");if(!u)return null;const m=JSON.parse(u);return(m==null?void 0:m.organizationId)||null}catch{return null}})(),h=(()=>{try{const u=localStorage.getItem("auth_user");if(!u)return"unknown_user";const m=JSON.parse(u);return(m==null?void 0:m.id)||"unknown_user"}catch{return"unknown_user"}})(),y={id:c,name:(r=e.name)==null?void 0:r.trim(),description:e.description||"",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),storageMode:e.storageMode,applicationMode:d,pendingSync:!0,syncAttempts:0,originalOptions:e};return await C.storeOfflineProject(y),await C.addToSyncQueue({type:"project_create",data:e}),D()&&(console.log("🔄 Device appears to be online - attempting immediate sync"),Q.forceSyncNow().catch(u=>{console.warn("Failed to sync immediately:",u)})),typeof window<"u"&&window.dispatchEvent(new CustomEvent("project:created",{detail:{projectId:c,project:{id:c,name:(o=e.name)==null?void 0:o.trim(),description:e.description||"",type:d==="standalone"?"standalone":"networked",applicationMode:d,visibility:(e==null?void 0:e.visibility)||"private",storageBackend:n,ownerId:h,organizationId:f,createdAt:new Date().toISOString(),lastAccessedAt:new Date().toISOString(),isActive:!0,isArchived:!1,allowCollaboration:!!((a=e.collaborationSettings)!=null&&a.maxCollaborators),maxCollaborators:((s=e.collaborationSettings)==null?void 0:s.maxCollaborators)||10,realTimeEnabled:((i=e.collaborationSettings)==null?void 0:i.enableRealTime)??d==="shared_network",enableComments:((l=e.collaborationSettings)==null?void 0:l.enableComments)??!0,enableActivityLog:!0,offlineCreated:!0,pendingSync:!0}}})),console.log("✅ Project created offline successfully:",c),c}catch(c){throw console.error("❌ Failed to create project offline:",c),c}}async createProjectOfflineWithSync(e){const t=await this.createProjectOffline(e);try{await Q.forceSyncNow()}catch(r){console.warn("Failed to sync after offline creation:",r)}return t}async createCloudProjectInFirestore(e){var m,p,A,E,_,q,N,F,L,z,x,U,$,H,Y,K,X,ee,te,re,oe,ae;const{auth:t,db:r}=await b(async()=>{const{auth:P,db:k}=await import("./firebase-DEnzXDV2.js");return{auth:P,db:k}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{addDoc:o,collection:a,serverTimestamp:s,updateDoc:i,doc:l}=await b(async()=>{const{addDoc:P,collection:k,serverTimestamp:ce,updateDoc:le,doc:de}=await import("./index.esm-D6OvRmrs.js");return{addDoc:P,collection:k,serverTimestamp:ce,updateDoc:le,doc:de}},__vite__mapDeps([7,6]));if(!t.currentUser)throw new Error("Firebase authentication required. Please log out and log back in.");const c=t.currentUser.uid,d=(()=>{var P;return(P=e==null?void 0:e.localNetworkConfig)!=null&&P.enabled?"shared_network":e.storageMode==="local"?"standalone":"shared_network"})();let n="local";if(e.storageMode==="cloud")switch((m=e.cloudConfig)==null?void 0:m.provider){case"gcs":n="gcs";break;case"s3":n="s3";break;case"azure-blob":n="azure-blob";break;case"firestore":default:n="firestore"}else e.storageMode==="hybrid"?n="firestore":n="local";const f=s(),h=(()=>{try{const P=localStorage.getItem("auth_user");if(!P)return null;const k=JSON.parse(P);return(k==null?void 0:k.organizationId)||null}catch{return null}})(),y=Object.fromEntries(Object.entries({name:(p=e.name)==null?void 0:p.trim(),description:e.description||"",type:d==="standalone"?"standalone":"networked",applicationMode:d,visibility:(e==null?void 0:e.visibility)||"private",storageBackend:n,gcsBucket:((A=e.cloudConfig)==null?void 0:A.provider)==="gcs"?(E=e.cloudConfig)==null?void 0:E.bucket:void 0,gcsPrefix:((_=e.cloudConfig)==null?void 0:_.provider)==="gcs"?(q=e.cloudConfig)==null?void 0:q.prefix:void 0,s3Bucket:((N=e.cloudConfig)==null?void 0:N.provider)==="s3"?(F=e.cloudConfig)==null?void 0:F.bucket:void 0,s3Region:((L=e.cloudConfig)==null?void 0:L.provider)==="s3"?(z=e.cloudConfig)==null?void 0:z.region:void 0,s3Prefix:((x=e.cloudConfig)==null?void 0:x.provider)==="s3"?(U=e.cloudConfig)==null?void 0:U.prefix:void 0,azureStorageAccount:(($=e.cloudConfig)==null?void 0:$.provider)==="azure-blob"?(H=e.cloudConfig)==null?void 0:H.storageAccount:void 0,azureContainer:((Y=e.cloudConfig)==null?void 0:Y.provider)==="azure-blob"?(K=e.cloudConfig)==null?void 0:K.bucket:void 0,azurePrefix:((X=e.cloudConfig)==null?void 0:X.provider)==="azure-blob"?(ee=e.cloudConfig)==null?void 0:ee.prefix:void 0,ownerId:c,organizationId:h,createdAt:f,updatedAt:f,lastAccessedAt:f,isActive:!0,isArchived:!1,allowCollaboration:!!((te=e.collaborationSettings)!=null&&te.maxCollaborators),maxCollaborators:((re=e.collaborationSettings)==null?void 0:re.maxCollaborators)||10,realTimeEnabled:((oe=e.collaborationSettings)==null?void 0:oe.enableRealTime)??d==="shared_network",enableComments:((ae=e.collaborationSettings)==null?void 0:ae.enableComments)??!0,enableActivityLog:!0,settings:{preferredPorts:e.preferredPorts||void 0}}).filter(([,P])=>P!==void 0)),u=await o(a(r,"projects"),y);try{await i(l(r,"projects",u.id),{id:u.id})}catch{}return typeof window<"u"&&window.dispatchEvent(new CustomEvent("project:created",{detail:{projectId:u.id,project:{id:u.id,...y}}})),u.id}mapToCloudProjectPayload(e){var o;let t="shared_network";try{const a=localStorage.getItem("preferredApplicationMode");a?t=a:(o=e==null?void 0:e.localNetworkConfig)!=null&&o.enabled?t="shared_network":e.storageMode==="local"&&(t="standalone")}catch{}const r={name:e.name,description:e.description,type:this.mapApplicationModeToType(t),applicationMode:t,visibility:(e==null?void 0:e.visibility)||"private",storageBackend:this.mapStorageModeToBackend(e.storageMode)};return e.cloudConfig&&(e.cloudConfig.provider==="gcs"?(r.storageBackend="gcs",r.gcsBucket=e.cloudConfig.bucket,r.gcsPrefix=e.cloudConfig.prefix):e.cloudConfig.provider==="s3"?(r.storageBackend="s3",r.s3Bucket=e.cloudConfig.bucket,r.s3Region=e.cloudConfig.region||"us-east-1",r.s3Prefix=e.cloudConfig.prefix):e.cloudConfig.provider==="azure-blob"?(r.storageBackend="azure-blob",r.azureStorageAccount=e.cloudConfig.storageAccount,r.azureContainer=e.cloudConfig.bucket,r.azurePrefix=e.cloudConfig.prefix):r.storageBackend="firestore"),e.collaborationSettings&&t==="shared_network"&&(r.allowCollaboration=!0,r.maxCollaborators=Math.max(1,Math.round(e.collaborationSettings.maxCollaborators)),r.realTimeEnabled=e.collaborationSettings.enableRealTime,r.enableComments=e.collaborationSettings.enableComments,r.enableActivityLog=!0,r.enablePresenceIndicators=!0),t==="standalone"&&(r.autoSave=!0,r.backupEnabled=!0,r.offlineMode=e.storageMode==="local"),e.preferredPorts&&(e.preferredPorts.website||e.preferredPorts.api)&&(r.settings={...r.settings||{},preferredPorts:{...e.preferredPorts.website?{website:e.preferredPorts.website}:{},...e.preferredPorts.api?{api:e.preferredPorts.api}:{}}}),r}mapApplicationModeToType(e){switch(e){case"standalone":return"standalone";case"shared_network":return"networked";default:return"networked"}}mapStorageModeToBackend(e){switch(e){case"cloud":return"firestore";case"hybrid":return"firestore";case"local":return"firestore";default:return"firestore"}}async setupProjectResources(e,t){var r,o;(r=t.localNetworkConfig)!=null&&r.enabled&&await this.setupLocalNetworkDeployment(e,t.localNetworkConfig),((o=t.cloudConfig)==null?void 0:o.provider)==="gcs"&&await this.validateGCSConfiguration(e,t.cloudConfig),await this.initializeProjectWorkspace(e,t)}async setupLocalNetworkDeployment(e,t){try{console.log("Setting up local network deployment:",{projectId:e,port:t.port,address:t.address,maxUsers:t.maxUsers}),await this.apiRequest(`projects/${e}`,"PATCH",{metadata:{localNetwork:{enabled:!0,port:t.port,address:t.address,maxUsers:t.maxUsers,deployedAt:new Date().toISOString()}}})}catch(r){console.error("Failed to setup local network deployment:",r)}}async validateGCSConfiguration(e,t){try{await this.apiRequest(`projects/${e}/storage/signed-url`,"POST",{filename:"test-validation.txt",operation:"upload"}),console.log("GCS configuration validated for project:",e)}catch(r){throw console.error("GCS configuration validation failed:",r),new Error("GCS storage configuration is invalid")}}async initializeProjectWorkspace(e,t){try{console.log("Initializing project workspace for:",e)}catch(r){console.error("Failed to initialize project workspace:",r)}}async getUserProjects(){try{let e=[],t=[];try{t=await this.getOfflineProjects(),console.log(`📱 [CloudProjectIntegration] Found ${t.length} offline projects`)}catch(a){console.error("❌ [CloudProjectIntegration] Failed to get offline projects:",a)}if(D())try{this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - using direct Firestore access"),e=await this.getUserProjectsFromFirestore()):(console.log("🔍 [CloudProjectIntegration] Making GET request to: projects?includeArchived=true"),e=await this.apiRequest("projects?includeArchived=true")),console.log(`🌐 [CloudProjectIntegration] Found ${e.length} online projects`)}catch(a){console.error("❌ [CloudProjectIntegration] Failed to get online projects:",a);try{this.isWebOnlyMode()?(console.log("🔄 [CloudProjectIntegration] Falling back to direct Firestore access"),e=await this.getUserProjectsFromFirestore()):(console.log("🔍 [CloudProjectIntegration] Making GET request to: projects/public"),e=await this.apiRequest("projects/public"))}catch(s){console.error("❌ [CloudProjectIntegration] Fallback for online projects failed:",s)}}else console.log("📴 [CloudProjectIntegration] Device is offline - using only offline projects");const r=new Set(e.map(a=>a.id)),o=[...e,...t.filter(a=>!r.has(a.id))];return console.log(`✅ [CloudProjectIntegration] Returning ${o.length} total projects (${e.length} online, ${t.length} offline)`),o}catch(e){console.error("❌ [CloudProjectIntegration] Failed to get projects:",e);try{const t=await this.getOfflineProjects();return console.log(`📱 [CloudProjectIntegration] Returning ${t.length} offline projects as fallback`),t}catch{return[]}}}async getOfflineProjects(){try{return(await C.getOfflineProjects()).map(t=>{const r=t.applicationMode||"shared_network";let o="local";t.storageMode==="cloud"||t.storageMode==="hybrid"?o="firestore":o="local";const a=(()=>{try{const i=localStorage.getItem("auth_user");if(!i)return"unknown_user";const l=JSON.parse(i);return(l==null?void 0:l.id)||"unknown_user"}catch{return"unknown_user"}})(),s=(()=>{try{const i=localStorage.getItem("auth_user");if(!i)return null;const l=JSON.parse(i);return(l==null?void 0:l.organizationId)||null}catch{return null}})();return{id:t.id,name:t.name,description:t.description||"",type:r==="standalone"?"standalone":"networked",applicationMode:r,visibility:"private",storageBackend:o,ownerId:a,organizationId:s,createdAt:t.createdAt,lastAccessedAt:t.updatedAt,isActive:!0,isArchived:!1,allowCollaboration:!0,maxCollaborators:10,realTimeEnabled:!0,enableComments:!0,enableChat:!1,enableActivityLog:!0,offlineCreated:!0,pendingSync:t.pendingSync}})}catch(e){return console.error("❌ [CloudProjectIntegration] Failed to get offline projects:",e),[]}}async ensureProjectInitialized(e){var l,c,d;const t=await this.getProject(e);if(!t)throw new Error("Project not found");let r=[];try{r=await this.getProjectDatasets(e)}catch{}let o=[];try{o=await this.getProjectTeamMembers(e)}catch{}const a=o.some(n=>n.role===S.ADMIN||n.role==="admin");try{let n=null;try{const h=localStorage.getItem("currentUser");h&&(n=JSON.parse(h))}catch{}const f=!!(n!=null&&n.isTeamMember)&&(n==null?void 0:n.id);if(!a&&f)if(o.some(y=>y.teamMemberId===n.id)){const y=o.find(u=>u.teamMemberId===n.id);if(y&&y.role!==S.ADMIN){await this.updateTeamMemberRole(e,y.teamMemberId,S.ADMIN);try{o=await this.getProjectTeamMembers(e)}catch{}}}else{await this.addTeamMemberToProject(e,n.id,S.ADMIN);try{o=await this.getProjectTeamMembers(e)}catch{}}}catch(n){console.warn("Default admin enforcement skipped:",n)}let s=null;try{const n=await this.getTeamMemberProjectContext(e);n&&(s={id:(l=n.teamMember)==null?void 0:l.id,email:(c=n.teamMember)==null?void 0:c.email,backboneUserRole:n.backboneUserRole,teamMemberRole:(d=n.project)==null?void 0:d.role,permissions:n.permissions})}catch{}const i={projectId:t.id,mode:t.applicationMode,storageBackend:t.storageBackend,datasetIds:r.map(n=>n.id),organizationId:t.organizationId,origin:"cloud",edgeBaseUrl:null,user:s};try{sessionStorage.setItem(`launch_context_${e}`,JSON.stringify(i))}catch{}return i}async getProject(e){try{if(e.startsWith("offline_"))return console.log("🔍 [CloudProjectIntegration] Getting offline project:",e),(await this.getOfflineProjects()).find(s=>s.id===e)||null;if(D())try{return this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] Getting project from Firestore:",e),await this.getProjectFromFirestore(e)):await this.apiRequest(`projects/${e}`)}catch(o){if(console.error("Failed to fetch project from online source:",o),this.isWebOnlyMode())try{return await this.getProjectFromFirestore(e)}catch(a){console.error("Failed to fetch project from Firestore:",a)}}else console.log("📴 [CloudProjectIntegration] Device is offline - cannot fetch online project");const r=(await this.getOfflineProjects()).find(o=>o.id===e);return r?(console.log("📱 [CloudProjectIntegration] Found cached version of project:",e),r):null}catch(t){return console.error("Failed to fetch project:",t),null}}async getProjectFromFirestore(e){try{console.log("🔍 [CloudProjectIntegration] Getting project from Firestore:",e);const{db:t}=await b(async()=>{const{db:c}=await import("./firebase-DEnzXDV2.js");return{db:c}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{doc:r,getDoc:o}=await b(async()=>{const{doc:c,getDoc:d}=await import("./index.esm-D6OvRmrs.js");return{doc:c,getDoc:d}},__vite__mapDeps([7,6])),a=r(t,"projects",e),s=await o(a);if(!s.exists())return console.warn("⚠️ [CloudProjectIntegration] Project not found in Firestore:",e),null;const i=s.data(),l=this.mapFirestoreProjectToCloudProject(e,i);return console.log("✅ [CloudProjectIntegration] Project retrieved from Firestore:",l.name),l}catch(t){throw console.error("❌ [CloudProjectIntegration] Error getting project from Firestore:",t),t}}async validateProjectAccess(e){try{return e.startsWith("offline_")?(await this.getOfflineProjects()).some(o=>o.id===e):await this.getProject(e)!==null}catch(t){return console.error("❌ [CloudProjectIntegration] Error validating project access:",t),!1}}async generateSignedUrl(e,t,r="upload",o){try{const a=await this.apiRequest(`projects/${e}/storage/signed-url`,"POST",{filename:t,operation:r,contentType:o});return{url:a.url,method:a.method,headers:a.headers}}catch(a){throw console.error("Failed to generate signed URL:",a),a}}async uploadFileViaSignedUrl(e,t,r){const o=t.name||"upload.bin",a=o.replace(/[^a-zA-Z0-9._\-]/g,"_"),s=r!=null&&r.targetPath?`${String(r.targetPath).replace(/\/$/,"")}/${a}`:a,{url:i,headers:l}=await this.generateSignedUrl(e,s,"upload",t.type||"application/octet-stream");await new Promise((c,d)=>{const n=new XMLHttpRequest;n.open("PUT",i,!0),l&&Object.entries(l).forEach(([f,h])=>{try{n.setRequestHeader(f,h)}catch{}}),r!=null&&r.onProgress&&n.upload&&(n.upload.onprogress=f=>{if(f.lengthComputable){const h=Math.round(f.loaded*100/f.total);r.onProgress(h)}}),n.onload=()=>{n.status>=200&&n.status<300?c():d(new Error(`Upload failed: ${n.status} ${n.statusText}`))},n.onerror=()=>d(new Error("Network error during upload")),n.send(t)});try{await this.apiRequest(`projects/${e}/storage/record`,"POST",{key:s,name:o,size:t.size,contentType:t.type||"application/octet-stream",url:i})}catch(c){console.warn("File metadata record failed",c)}return{key:s,url:i}}async updateProject(e,t){try{return this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - updating project in Firestore"),await this.updateProjectInFirestore(e,t)):await this.apiRequest(`projects/${e}`,"PATCH",t)}catch(r){if(console.error("Failed to update project:",r),this.isWebOnlyMode()){console.log("🔄 [CloudProjectIntegration] Falling back to direct Firestore access for project update");try{return await this.updateProjectInFirestore(e,t)}catch(o){throw console.error("❌ [CloudProjectIntegration] Firestore fallback failed:",o),o}}throw r}}async archiveProject(e){try{if(this.isWebOnlyMode())return console.log("🔍 [CloudProjectIntegration] WebOnly mode - archiving project in Firestore"),await this.archiveProjectInFirestore(e);await this.apiRequest(`projects/${e}`,"DELETE")}catch(t){if(console.error("Failed to archive project:",t),this.isWebOnlyMode()){console.log("🔄 [CloudProjectIntegration] Falling back to direct Firestore access for project archive");try{return await this.archiveProjectInFirestore(e)}catch(r){throw console.error("❌ [CloudProjectIntegration] Firestore fallback failed:",r),r}}throw t}}async restoreProject(e){try{await this.apiRequest(`projects/${e}/archive`,"PATCH",{isArchived:!1})}catch(t){throw console.error("Failed to restore project:",t),t}}async listDatasets(e){const t=new URLSearchParams;return e!=null&&e.organizationId&&t.append("organizationId",e.organizationId),e!=null&&e.visibility&&t.append("visibility",e.visibility),e!=null&&e.backend&&t.append("backend",e.backend),e!=null&&e.query&&t.append("query",e.query),this.apiRequest(`datasets${t.toString()?`?${t}`:""}`)}async createDataset(e){const t={...e};return(t.organizationId==null||t.organizationId==="")&&delete t.organizationId,Array.isArray(t.tags)&&t.tags.length===0&&delete t.tags,t.schema&&typeof t.schema=="object"&&Object.keys(t.schema).length===0&&delete t.schema,t.storage&&typeof t.storage=="object"&&(t.storage.backend||delete t.storage.backend,t.storage.gcsBucket||delete t.storage.gcsBucket,t.storage.gcsPrefix||delete t.storage.gcsPrefix,t.storage.path||delete t.storage.path,Object.keys(t.storage).length===0&&delete t.storage),this.apiRequest("datasets","POST",t)}async getProjectDatasets(e){try{return this.isWebOnlyMode()?(console.log(`🔍 [CloudProjectIntegration] WebOnly mode - fetching datasets from Firestore for project: ${e}`),await this.getProjectDatasetsFromFirestore(e)):this.apiRequest(`datasets/project/${e}`,"GET")}catch(t){if(console.error("❌ [CloudProjectIntegration] API request failed:",t),this.isWebOnlyMode()){console.log("🔄 [CloudProjectIntegration] Falling back to direct Firestore access for datasets");try{return await this.getProjectDatasetsFromFirestore(e)}catch(r){return console.error("❌ [CloudProjectIntegration] Firestore fallback failed:",r),[]}}return[]}}async assignDatasetToProject(e,t){await this.apiRequest(`datasets/project/${e}/${t}`,"POST")}async unassignDatasetFromProject(e,t){await this.apiRequest(`datasets/project/${e}/${t}`,"DELETE")}isWebOnlyMode(){return!0}async archiveProjectInFirestore(e){try{console.log("🔍 [CloudProjectIntegration] Archiving project in Firestore:",e);const{db:t}=await b(async()=>{const{db:s}=await import("./firebase-DEnzXDV2.js");return{db:s}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{doc:r,updateDoc:o}=await b(async()=>{const{doc:s,updateDoc:i}=await import("./index.esm-D6OvRmrs.js");return{doc:s,updateDoc:i}},__vite__mapDeps([7,6])),a=r(t,"projects",e);await o(a,{isArchived:!0,updatedAt:new Date}),console.log("✅ [CloudProjectIntegration] Project archived successfully in Firestore")}catch(t){throw console.error("❌ [CloudProjectIntegration] Error archiving project in Firestore:",t),t}}async updateProjectInFirestore(e,t){try{console.log("🔍 [CloudProjectIntegration] Updating project in Firestore:",e,t);const{db:r}=await b(async()=>{const{db:d}=await import("./firebase-DEnzXDV2.js");return{db:d}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{doc:o,updateDoc:a,getDoc:s}=await b(async()=>{const{doc:d,updateDoc:n,getDoc:f}=await import("./index.esm-D6OvRmrs.js");return{doc:d,updateDoc:n,getDoc:f}},__vite__mapDeps([7,6])),i=o(r,"projects",e);await a(i,{...t,updatedAt:new Date});const l=await s(i);if(!l.exists())throw new Error("Project not found after update");const c=this.mapFirestoreProjectToCloudProject(l.id,l.data());return console.log("✅ [CloudProjectIntegration] Project updated successfully in Firestore"),c}catch(r){throw console.error("❌ [CloudProjectIntegration] Error updating project in Firestore:",r),r}}async addTeamMemberToProjectInFirestore(e,t,r){try{console.log("🔍 [CloudProjectIntegration] Adding team member to project in Firestore:",{projectId:e,teamMemberId:t,role:r});const{db:o}=await b(async()=>{const{db:c}=await import("./firebase-DEnzXDV2.js");return{db:c}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{collection:a,addDoc:s}=await b(async()=>{const{collection:c,addDoc:d}=await import("./index.esm-D6OvRmrs.js");return{collection:c,addDoc:d}},__vite__mapDeps([7,6])),i={projectId:e,teamMemberId:t,role:r,assignedBy:"system",assignedAt:new Date,updatedAt:new Date,isActive:!0},l=this.cleanDocumentData(i);await s(a(o,"projectTeamMembers"),l),console.log("✅ [CloudProjectIntegration] Team member added to project successfully in Firestore")}catch(o){throw console.error("❌ [CloudProjectIntegration] Error adding team member to project in Firestore:",o),o}}cleanDocumentData(e){if(typeof e!="object"||e===null)return e;if(Array.isArray(e))return e.map(r=>this.cleanDocumentData(r));const t={};for(const[r,o]of Object.entries(e))o!=null&&(t[r]=this.cleanDocumentData(o));return t}async removeTeamMemberFromProjectInFirestore(e,t){try{console.log("🔍 [CloudProjectIntegration] Removing team member from project in Firestore:",{projectId:e,teamMemberId:t});const{db:r}=await b(async()=>{const{db:n}=await import("./firebase-DEnzXDV2.js");return{db:n}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{collection:o,query:a,where:s,getDocs:i,deleteDoc:l}=await b(async()=>{const{collection:n,query:f,where:h,getDocs:y,deleteDoc:u}=await import("./index.esm-D6OvRmrs.js");return{collection:n,query:f,where:h,getDocs:y,deleteDoc:u}},__vite__mapDeps([7,6])),c=a(o(r,"projectTeamMembers"),s("projectId","==",e),s("teamMemberId","==",t)),d=await i(c);if(d.empty)throw new Error("Team member is not assigned to this project");await l(d.docs[0].ref),console.log("✅ [CloudProjectIntegration] Team member removed from project successfully in Firestore")}catch(r){throw console.error("❌ [CloudProjectIntegration] Error removing team member from project in Firestore:",r),r}}async getUserProjectsFromFirestore(){try{console.log("🔍 [CloudProjectIntegration] Fetching projects from Firestore...");const{db:e,auth:t}=await b(async()=>{const{db:c,auth:d}=await import("./firebase-DEnzXDV2.js");return{db:c,auth:d}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{collection:r,query:o,where:a,getDocs:s,orderBy:i}=await b(async()=>{const{collection:c,query:d,where:n,getDocs:f,orderBy:h}=await import("./index.esm-D6OvRmrs.js");return{collection:c,query:d,where:n,getDocs:f,orderBy:h}},__vite__mapDeps([7,6]));let l=t.currentUser;if(!l){console.warn("⚠️ [CloudProjectIntegration] No Firebase Auth user found"),console.log("ℹ️ [CloudProjectIntegration] In webonly mode, Firebase Auth is required for Firestore access"),console.log("ℹ️ [CloudProjectIntegration] The user needs to be authenticated with Firebase Auth during login");const c=localStorage.getItem("auth_user");if(c){const d=JSON.parse(c);console.log("🔍 [CloudProjectIntegration] Found server auth user:",{id:d.id,email:d.email,name:d.name}),console.log("❌ [CloudProjectIntegration] But this user is not authenticated with Firebase Auth"),console.log("💡 [CloudProjectIntegration] Solution: Modify login flow to also authenticate with Firebase Auth")}return[]}return console.log("✅ [CloudProjectIntegration] Authenticated Firebase user:",l.uid),await this.getUserProjectsByUserId(l.uid,e)}catch(e){return console.error("❌ [CloudProjectIntegration] Error fetching projects from Firestore:",e),[]}}async getUserProjectsByUserId(e,t){try{console.log("🔍 [CloudProjectIntegration] Fetching projects by user ID:",e);const{collection:r,query:o,where:a,getDocs:s,orderBy:i}=await b(async()=>{const{collection:h,query:y,where:u,getDocs:m,orderBy:p}=await import("./index.esm-D6OvRmrs.js");return{collection:h,query:y,where:u,getDocs:m,orderBy:p}},__vite__mapDeps([7,6])),l=[];console.log("📁 [CloudProjectIntegration] Fetching owned projects by user ID...");const c=o(r(t,"projects"),a("ownerId","==",e),i("updatedAt","desc")),d=await s(c);d.forEach(h=>{const y=h.data();l.push(this.mapFirestoreProjectToCloudProject(h.id,y))}),console.log(`✅ [CloudProjectIntegration] Found ${d.size} owned projects`),console.log("👥 [CloudProjectIntegration] Fetching team member projects by user ID...");const n=o(r(t,"projects"),i("updatedAt","desc"));return(await s(n)).forEach(h=>{const y=h.data();(y.teamMembers||[]).find(p=>p.userId===e)&&!l.find(p=>p.id===h.id)&&l.push(this.mapFirestoreProjectToCloudProject(h.id,y))}),console.log(`✅ [CloudProjectIntegration] Total accessible projects: ${l.length}`),l.forEach((h,y)=>{console.log(`📁 [CloudProjectIntegration] Project ${y+1}:`,{id:h.id,name:h.name,ownerId:h.ownerId,isOwner:h.ownerId===e,storageBackend:h.storageBackend})}),l}catch(r){return console.error("❌ [CloudProjectIntegration] Error fetching projects by user ID:",r),[]}}mapFirestoreProjectToCloudProject(e,t){var r,o,a,s,i,l,c,d,n;return{id:e,name:t.name||"Untitled Project",description:t.description||"",type:t.type||"network",applicationMode:t.applicationMode||"shared_network",visibility:t.visibility||"private",storageBackend:t.storageBackend||"firestore",ownerId:t.ownerId,organizationId:t.organizationId,createdAt:((a=(o=(r=t.createdAt)==null?void 0:r.toDate)==null?void 0:o.call(r))==null?void 0:a.toISOString())||t.createdAt||new Date().toISOString(),lastAccessedAt:((l=(i=(s=t.lastAccessedAt)==null?void 0:s.toDate)==null?void 0:i.call(s))==null?void 0:l.toISOString())||((n=(d=(c=t.updatedAt)==null?void 0:c.toDate)==null?void 0:d.call(c))==null?void 0:n.toISOString())||new Date().toISOString(),isActive:t.isActive!==!1,isArchived:t.isArchived||!1,allowCollaboration:t.allowCollaboration||!1,maxCollaborators:t.maxCollaborators||10,realTimeEnabled:t.realTimeEnabled||!1,enableComments:t.enableComments||!1,enableChat:t.enableChat||!1,enableActivityLog:t.enableActivityLog||!1,gcsBucket:t.gcsBucket,gcsPrefix:t.gcsPrefix,s3Bucket:t.s3Bucket,s3Region:t.s3Region,s3Prefix:t.s3Prefix,azureStorageAccount:t.azureStorageAccount,azureContainer:t.azureContainer,azurePrefix:t.azurePrefix,filePath:t.filePath,autoSave:t.autoSave,backupEnabled:t.backupEnabled,encryptionEnabled:t.encryptionEnabled}}async getProjectDatasetsFromFirestore(e){try{console.log("🔍 [CloudProjectIntegration] Fetching datasets from Firestore for project:",e);const{db:t}=await b(async()=>{const{db:d}=await import("./firebase-DEnzXDV2.js");return{db:d}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{collection:r,query:o,where:a,getDocs:s}=await b(async()=>{const{collection:d,query:n,where:f,getDocs:h}=await import("./index.esm-D6OvRmrs.js");return{collection:d,query:n,where:f,getDocs:h}},__vite__mapDeps([7,6])),i=[],l=o(r(t,"datasets"),a("projectId","==",e));return(await s(l)).forEach(d=>{var f,h,y,u,m,p;const n=d.data();i.push({id:d.id,name:n.name||"Untitled Dataset",description:n.description||"",projectId:n.projectId,type:n.type||"general",status:n.status||"active",createdAt:((y=(h=(f=n.createdAt)==null?void 0:f.toDate)==null?void 0:h.call(f))==null?void 0:y.toISOString())||n.createdAt||new Date().toISOString(),updatedAt:((p=(m=(u=n.updatedAt)==null?void 0:u.toDate)==null?void 0:m.call(u))==null?void 0:p.toISOString())||n.updatedAt||new Date().toISOString(),size:n.size||0,recordCount:n.recordCount||0,schema:n.schema||{},tags:n.tags||[],isPublic:n.isPublic||!1,ownerId:n.ownerId,storage:n.storage||{},visibility:n.visibility||"private"})}),console.log(`✅ [CloudProjectIntegration] Found ${i.length} datasets for project ${e}`),i}catch(t){return console.error("❌ [CloudProjectIntegration] Error fetching datasets from Firestore:",t),[]}}async getProjectTeamMembersFromFirestore(e){try{console.log("🔍 [CloudProjectIntegration] Fetching team members from Firestore for project:",e);const{db:t}=await b(async()=>{const{db:c}=await import("./firebase-DEnzXDV2.js");return{db:c}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{collection:r,query:o,where:a,getDocs:s}=await b(async()=>{const{collection:c,query:d,where:n,getDocs:f}=await import("./index.esm-D6OvRmrs.js");return{collection:c,query:d,where:n,getDocs:f}},__vite__mapDeps([7,6])),i=[],l=await b(async()=>{const{doc:c,getDoc:d}=await import("./index.esm-D6OvRmrs.js");return{doc:c,getDoc:d}},__vite__mapDeps([7,6])).then(({doc:c,getDoc:d})=>d(c(t,"projects",e)));if(l.exists()){const d=l.data().teamMembers||[];for(const n of d)i.push({id:n.userId||n.id,teamMemberId:n.userId||n.id,projectId:e,role:n.role||"member",permissions:n.permissions||["read"],assignedAt:n.assignedAt||new Date().toISOString(),isActive:n.isActive!==!1,email:n.email,name:n.name||n.email,status:n.status||"active"})}try{const c=o(r(t,"projectTeamMembers"),a("projectId","==",e));(await s(c)).forEach(n=>{var h,y,u;const f=n.data();i.find(m=>m.teamMemberId===f.teamMemberId)||i.push({id:n.id,teamMemberId:f.teamMemberId,projectId:f.projectId,role:f.role||"member",permissions:f.permissions||["read"],assignedAt:((u=(y=(h=f.assignedAt)==null?void 0:h.toDate)==null?void 0:y.call(h))==null?void 0:u.toISOString())||f.assignedAt||new Date().toISOString(),isActive:f.isActive!==!1,email:f.teamMemberEmail||f.email,name:f.teamMemberName||f.name||f.email,status:f.status||"active"})})}catch{console.log("ℹ️ [CloudProjectIntegration] projectTeamMembers collection not found or accessible")}return console.log(`✅ [CloudProjectIntegration] Found ${i.length} team members for project ${e}`),i}catch(t){return console.error("❌ [CloudProjectIntegration] Error fetching team members from Firestore:",t),[]}}async getLicensedTeamMembersFromFirestore(e){try{console.log("🔍 [CloudProjectIntegration] Fetching licensed team members from Firestore with options:",e);const{db:t,auth:r}=await b(async()=>{const{db:u,auth:m}=await import("./firebase-DEnzXDV2.js");return{db:u,auth:m}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{collection:o,query:a,where:s,getDocs:i,orderBy:l}=await b(async()=>{const{collection:u,query:m,where:p,getDocs:A,orderBy:E}=await import("./index.esm-D6OvRmrs.js");return{collection:u,query:m,where:p,getDocs:A,orderBy:E}},__vite__mapDeps([7,6]));if(!r.currentUser)return console.warn("⚠️ [CloudProjectIntegration] No authenticated user for team members fetch"),[];const d=localStorage.getItem("auth_user");let n=null;if(d&&(n=JSON.parse(d).organizationId),!n)return console.warn("⚠️ [CloudProjectIntegration] No organization ID found for current user"),[];console.log("🏢 [CloudProjectIntegration] Fetching team members for organization:",n);const f=[];let h;try{const u=a(o(t,"teamMembers"),s("organizationId","==",n),l("name","asc"));if(h=await i(u),h.empty){console.log("🔄 [CloudProjectIntegration] No results with organizationId, trying orgId field...");const m=a(o(t,"teamMembers"),s("orgId","==",n),l("name","asc"));h=await i(m)}}catch(u){return console.warn("⚠️ [CloudProjectIntegration] Error querying teamMembers:",u),[]}let y=[];if(e!=null&&e.excludeProjectId)try{y=(await this.getProjectTeamMembersFromFirestore(e.excludeProjectId)).map(m=>m.teamMemberId)}catch(u){console.warn("Failed to get assigned team members:",u)}return h.forEach(u=>{var p,A,E,_,q,N,F,L,z;const m=u.data();if(!y.includes(u.id)){if(e!=null&&e.search){const x=e.search.toLowerCase(),U=(m.name||"").toLowerCase(),$=(m.email||"").toLowerCase();if(!U.includes(x)&&!$.includes(x))return}f.push({id:u.id,name:m.name||m.email,email:m.email,role:m.role||"MEMBER",status:m.status||"ACTIVE",organizationId:m.organizationId,firebaseUid:m.firebaseUid,isEmailVerified:m.isEmailVerified||!1,licenseType:m.licenseType||"BASIC",createdAt:((E=(A=(p=m.createdAt)==null?void 0:p.toDate)==null?void 0:A.call(p))==null?void 0:E.toISOString())||m.createdAt||new Date().toISOString(),updatedAt:((N=(q=(_=m.updatedAt)==null?void 0:_.toDate)==null?void 0:q.call(_))==null?void 0:N.toISOString())||m.updatedAt||new Date().toISOString(),lastActive:((z=(L=(F=m.lastActive)==null?void 0:F.toDate)==null?void 0:L.call(F))==null?void 0:z.toISOString())||m.lastActive,permissions:m.permissions||[],department:m.department,position:m.position,avatar:m.avatar})}}),console.log(`✅ [CloudProjectIntegration] Found ${f.length} licensed team members`),f.forEach((u,m)=>{console.log(`👤 [CloudProjectIntegration] Team Member ${m+1}:`,{id:u.id,name:u.name,email:u.email,role:u.role,status:u.status})}),f}catch(t){return console.error("❌ [CloudProjectIntegration] Error fetching licensed team members from Firestore:",t),[]}}async getProjectTeamMembers(e){var t,r;try{if(console.log("🚀 [CloudProjectIntegration] getProjectTeamMembers called for project:",e),this.isWebOnlyMode())return console.log(`🔍 [CloudProjectIntegration] WebOnly mode - fetching team members from Firestore for project: ${e}`),await this.getProjectTeamMembersFromFirestore(e);const o=await this.apiRequest(`projects/${e}/team-members`);return console.log("✅ [CloudProjectIntegration] Team members API call successful:",((t=o==null?void 0:o.data)==null?void 0:t.length)||0,"members"),o!=null&&o.data&&Array.isArray(o.data)?o.data:Array.isArray(o)?o:(console.warn("🔍 [CloudProjectIntegration] Unexpected result format, returning empty array"),[])}catch(o){if(console.error("❌ [CloudProjectIntegration] Team member API call failed:",o),this.isWebOnlyMode()){console.log("🔄 [CloudProjectIntegration] Falling back to direct Firestore access for team members");try{return await this.getProjectTeamMembersFromFirestore(e)}catch(a){return console.error("❌ [CloudProjectIntegration] Firestore fallback failed:",a),[]}}return(r=o==null?void 0:o.message)!=null&&r.includes("404")||(o==null?void 0:o.status)===404?(console.warn("Using fallback data due to 404 error"),this.getFallbackTeamMembers(e)):(console.warn("Returning empty array due to API error"),[])}}getFallbackTeamMembers(e){const t=localStorage.getItem(`project_team_members_${e}`);if(t)try{return JSON.parse(t)}catch{console.warn("Failed to parse stored team members")}return[]}async getLicensedTeamMembers(e){var t;try{if(console.log("🚀 [CloudProjectIntegration] getLicensedTeamMembers called with options:",e),this.isWebOnlyMode())return console.log("🔍 [CloudProjectIntegration] WebOnly mode - fetching team members from Firestore"),await this.getLicensedTeamMembersFromFirestore(e);const r=new URLSearchParams;e!=null&&e.search&&r.append("search",e.search),e!=null&&e.excludeProjectId&&r.append("excludeProjectId",e.excludeProjectId);const o=`team-members/licensed${r.toString()?`?${r.toString()}`:""}`,a=await this.apiRequest(o);return console.log("✅ [CloudProjectIntegration] Licensed team members API call successful:",(a==null?void 0:a.length)||0,"members"),a||[]}catch(r){if(console.error("❌ [CloudProjectIntegration] Licensed team members API call failed:",r),this.isWebOnlyMode()){console.log("🔄 [CloudProjectIntegration] Falling back to direct Firestore access for team members");try{return await this.getLicensedTeamMembersFromFirestore(e)}catch(o){return console.error("❌ [CloudProjectIntegration] Firestore fallback failed:",o),[]}}if((t=r==null?void 0:r.message)!=null&&t.includes("404")||(r==null?void 0:r.status)===404)return console.warn("Using fallback data due to 404 error"),this.getFallbackLicensedTeamMembers(e);throw r}}getFallbackLicensedTeamMembers(e){let r=[{id:"audrey_guz_001",name:"Audrey Guz",email:"audrey.guz@apple.com",firstName:"Audrey",lastName:"Guz",licenseType:T.PROFESSIONAL,status:v.ACTIVE,organizationId:"org_001",department:"Not assigned",createdAt:"2024-01-01T00:00:00Z",updatedAt:"2025-08-14T00:00:00Z",lastActive:"8/14/2025"},{id:"lissa_001",name:"Lissa",email:"lissa@apple.com",firstName:"Lissa",licenseType:T.PROFESSIONAL,status:v.ACTIVE,organizationId:"org_001",department:"Not assigned",createdAt:"2024-01-01T00:00:00Z",updatedAt:"2025-08-13T00:00:00Z",lastActive:"8/13/2025"},{id:"enterprise_user_001",name:"Enterprise User",email:"enterprise.user@example.com",firstName:"Enterprise",lastName:"User",licenseType:T.ENTERPRISE,status:v.ACTIVE,organizationId:"org_001",department:"Not assigned",createdAt:"2024-01-01T00:00:00Z",updatedAt:"2025-08-13T00:00:00Z",lastActive:"8/13/2025"},{id:"chebacca_001",name:"Chebacca",email:"chebacca@gmail.com",firstName:"Chebacca",licenseType:T.PROFESSIONAL,status:v.ACTIVE,organizationId:"org_001",department:"Not assigned",createdAt:"2024-01-01T00:00:00Z",updatedAt:"2025-08-13T00:00:00Z",lastActive:"8/13/2025"},{id:"s_moser_001",name:"S Moser",email:"s.moser@apple.com",firstName:"S",lastName:"Moser",licenseType:T.PROFESSIONAL,status:v.ACTIVE,organizationId:"org_001",department:"Not assigned",createdAt:"2024-01-01T00:00:00Z",updatedAt:"2025-08-14T00:00:00Z",lastActive:"8/14/2025"}];if(e!=null&&e.search){const o=e.search.toLowerCase();r=r.filter(a=>a.name.toLowerCase().includes(o)||a.email.toLowerCase().includes(o))}if(e!=null&&e.excludeProjectId){const a=this.getFallbackTeamMembers(e.excludeProjectId).map(s=>s.id);r=r.filter(s=>!a.includes(s.id))}return r}async addTeamMemberToProject(e,t,r=S.DO_ER){try{if(this.isWebOnlyMode())return console.log("🔍 [CloudProjectIntegration] WebOnly mode - adding team member to project in Firestore"),await this.addTeamMemberToProjectInFirestore(e,t,r);const o=await this.apiRequest(`projects/${e}/team-members`,"POST",{teamMemberId:t,role:r});console.log("✅ Team member added via API:",o)}catch(o){if(console.warn("Add team member API endpoint failed:",o==null?void 0:o.message),this.isWebOnlyMode()){console.log("🔄 [CloudProjectIntegration] Falling back to direct Firestore access for adding team member");try{return await this.addTeamMemberToProjectInFirestore(e,t,r)}catch(i){throw console.error("❌ [CloudProjectIntegration] Firestore fallback failed:",i),i}}const s=this.getFallbackLicensedTeamMembers().find(i=>i.id===t);if(s){const i=this.getFallbackTeamMembers(e),l=i.some(n=>n.role===S.ADMIN);if(r===S.ADMIN&&l)throw new Error("Only one Admin is allowed per project. Please remove the existing Admin first.");const c={id:`ptm_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,projectId:e,teamMemberId:t,role:r,teamMember:s,assignedAt:new Date().toISOString(),assignedBy:"current_user",isActive:!0},d=[...i,c];localStorage.setItem(`project_team_members_${e}`,JSON.stringify(d))}}}async removeTeamMemberFromProject(e,t){try{if(this.isWebOnlyMode())return console.log("🔍 [CloudProjectIntegration] WebOnly mode - removing team member from project in Firestore"),await this.removeTeamMemberFromProjectInFirestore(e,t);const r=await this.apiRequest(`projects/${e}/team-members/${t}`,"DELETE");console.log("✅ Team member removed via API:",r)}catch(r){if(console.warn("Remove team member API endpoint failed:",r==null?void 0:r.message),this.isWebOnlyMode()){console.log("🔄 [CloudProjectIntegration] Falling back to direct Firestore access for removing team member");try{return await this.removeTeamMemberFromProjectInFirestore(e,t)}catch(s){throw console.error("❌ [CloudProjectIntegration] Firestore fallback failed:",s),s}}const a=this.getFallbackTeamMembers(e).filter(s=>s.id!==t);localStorage.setItem(`project_team_members_${e}`,JSON.stringify(a))}}async updateTeamMemberRole(e,t,r){await this.apiRequest(`projects/${e}/team-members/${t}`,"PATCH",{role:r})}async getTeamMemberById(e){try{return await this.apiRequest(`team-members/${e}`)}catch(t){return console.error("Failed to fetch team member details:",t),null}}async getTeamMemberProjectContext(e){let t=null;try{const r=localStorage.getItem("currentUser");r&&(t=JSON.parse(r))}catch{return null}if(!(t!=null&&t.isTeamMember))return null;try{const o=(await this.getProjectTeamMembers(e)).find(s=>s.teamMemberId===t.id);if(!o)throw new Error("Team member is not assigned to this project");const a=se.find(s=>s.teamMemberRole===o.role);if(!a)throw new Error("Invalid team member role mapping");return{teamMember:t,project:{id:e,role:o.role},backboneUserRole:a.backboneUserRole,permissions:a.permissions,canManageTeam:o.role==="admin"}}catch(r){throw console.error("Failed to get team member project context:",r),r}}async validateTeamMemberCredentials(e,t){try{return await this.apiRequest("auth/team-member/validate","POST",{email:e,password:t})}catch(r){console.warn("Team member credential validation API not yet implemented, using fallback:",r==null?void 0:r.message);const a=this.getFallbackLicensedTeamMembers().find(i=>i.email===e);if(!a)return{isValid:!1,error:"Team member not found"};if(t.length<1)return{isValid:!1,error:"Password is required"};const s=this.getTeamMemberProjectAccess(a.id);return{isValid:!0,teamMember:a,projectAccess:s}}}getTeamMemberProjectAccess(e){return[]}};j(W,"instance");let Z=W;const R=Z.getInstance();typeof window<"u"&&(window.cloudProjectIntegration=R);const Ie=Object.freeze(Object.defineProperty({__proto__:null,cloudProjectIntegration:R},Symbol.toStringTag,{value:"Module"}));export{Ie as C,R as c,D as i,C as o,Q as s,Pe as t};
