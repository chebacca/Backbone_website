var k=Object.defineProperty;var j=(n,e,t)=>e in n?k(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var h=(n,e,t)=>j(n,typeof e!="symbol"?e+"":e,t);import{s as f}from"./UnifiedProjectCreationDialog-C9AiepaU.js";import"./mui-T5zcPaKR.js";import"./vendor-OeuszDaU.js";import"./index-MtSCjjhR.js";import"./stripe-Bd-xCkZF.js";import"./proxy-Bigtmpzy.js";const p=class p{constructor(){h(this,"baseURL");h(this,"authToken",null);this.baseURL=this.getBaseURL(),this.initializeAuth()}static getInstance(){return this.instance||(this.instance=new p),this.instance}initializeAuth(){this.authToken=localStorage.getItem("auth_token")}getBaseURL(){return window.location.hostname!=="localhost"&&window.location.hostname!=="127.0.0.1"&&!window.location.hostname.includes("localhost"),"/api"}async apiRequest(e,t="GET",r){const s=this.baseURL.replace(/\/$/,""),a=String(e||"").replace(/^\//,""),l=`${s}/${a}`,c={"Content-Type":"application/json"};this.authToken&&(c.Authorization=`Bearer ${this.authToken}`);const w={method:t,headers:c,...r&&{body:JSON.stringify(r)}};try{const o=await fetch(l,w);if(!o.ok){if(o.status===401)throw await this.handleAuthError(),new Error("Authentication required");let u="";try{const i=await o.clone().json();u=(i==null?void 0:i.error)||(i==null?void 0:i.message)||""}catch{try{u=await o.text()||""}catch{}}const y=o.statusText||"Bad Request",m=u?` - ${u}`:"";throw new Error(`API request failed: ${o.status} ${y}${m}`)}const d=await o.json();if(!d.success)throw new Error(d.error||d.message||"API request failed");return d.data}catch(o){throw console.error("API request error:",o),o}}async handleAuthError(){var e,t;try{const r=localStorage.getItem("refresh_token");if(!r)throw new Error("No refresh token available");const s=await fetch(`${this.baseURL}/auth/refresh`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({refreshToken:r})});if(s.ok){const a=await s.json();if(a.success&&((t=(e=a.data)==null?void 0:e.tokens)!=null&&t.accessToken)){const l=a.data.tokens.accessToken;this.authToken=l,localStorage.setItem("auth_token",l);const c=a.data.tokens.refreshToken;c&&localStorage.setItem("refresh_token",c);return}}}catch(r){console.error("Token refresh failed:",r)}localStorage.removeItem("auth_token"),localStorage.removeItem("refresh_token"),this.authToken=null,await f.reset()}setAuthToken(e){this.authToken=e,localStorage.setItem("auth_token",e)}async createCloudProject(e){try{const t=this.mapToCloudProjectPayload(e),r=await this.apiRequest("projects","POST",t);return console.log("Cloud project created:",r),await this.setupProjectResources(r.id,e),r.id}catch(t){console.error("Failed to create cloud project:",t);const r=t instanceof Error?t.message:String(t);throw new Error(`Failed to create cloud project: ${r}`)}}mapToCloudProjectPayload(e){const t=f.getState(),r={name:e.name,description:e.description,type:this.mapApplicationModeToType(t.selectedMode),applicationMode:t.selectedMode,visibility:"private",storageBackend:this.mapStorageModeToBackend(t.storageMode)};return e.cloudConfig&&(e.cloudConfig.provider==="gcs"?(r.storageBackend="gcs",r.gcsBucket=e.cloudConfig.bucket,r.gcsPrefix=e.cloudConfig.prefix):r.storageBackend="firestore"),e.collaborationSettings&&t.selectedMode==="shared_network"&&(r.allowCollaboration=!0,r.maxCollaborators=Math.max(1,Math.round(e.collaborationSettings.maxCollaborators)),r.realTimeEnabled=e.collaborationSettings.enableRealTime,r.enableComments=e.collaborationSettings.enableComments,r.enableActivityLog=!0,r.enablePresenceIndicators=!0),t.selectedMode==="standalone"&&(r.autoSave=!0,r.backupEnabled=!0,r.offlineMode=t.storageMode==="local"),e.preferredPorts&&(e.preferredPorts.website||e.preferredPorts.api)&&(r.settings={...r.settings||{},preferredPorts:{...e.preferredPorts.website?{website:e.preferredPorts.website}:{},...e.preferredPorts.api?{api:e.preferredPorts.api}:{}}}),r}mapApplicationModeToType(e){switch(e){case"standalone":return"standalone";case"shared_network":return"networked";default:return"networked"}}mapStorageModeToBackend(e){switch(e){case"cloud":return"firestore";case"hybrid":return"firestore";case"local":return"firestore";default:return"firestore"}}async setupProjectResources(e,t){var r,s;(r=t.localNetworkConfig)!=null&&r.enabled&&await this.setupLocalNetworkDeployment(e,t.localNetworkConfig),((s=t.cloudConfig)==null?void 0:s.provider)==="gcs"&&await this.validateGCSConfiguration(e,t.cloudConfig),await this.initializeProjectWorkspace(e,t)}async setupLocalNetworkDeployment(e,t){try{console.log("Setting up local network deployment:",{projectId:e,port:t.port,address:t.address,maxUsers:t.maxUsers}),await this.apiRequest(`projects/${e}`,"PATCH",{metadata:{localNetwork:{enabled:!0,port:t.port,address:t.address,maxUsers:t.maxUsers,deployedAt:new Date().toISOString()}}})}catch(r){console.error("Failed to setup local network deployment:",r)}}async validateGCSConfiguration(e,t){try{await this.apiRequest(`projects/${e}/storage/signed-url`,"POST",{filename:"test-validation.txt",operation:"upload"}),console.log("GCS configuration validated for project:",e)}catch(r){throw console.error("GCS configuration validation failed:",r),new Error("GCS storage configuration is invalid")}}async initializeProjectWorkspace(e,t){try{console.log("Initializing project workspace for:",e)}catch(r){console.error("Failed to initialize project workspace:",r)}}async getUserProjects(){try{const e=this.authToken?"projects":"projects/public";return await this.apiRequest(e)}catch(e){return console.error("Failed to fetch user projects:",e),[]}}async getProject(e){try{return await this.apiRequest(`projects/${e}`)}catch(t){return console.error("Failed to fetch project:",t),null}}async validateProjectAccess(e){try{return await this.getProject(e)!==null}catch{return!1}}async generateSignedUrl(e,t,r="upload",s){try{const a=await this.apiRequest(`projects/${e}/storage/signed-url`,"POST",{filename:t,operation:r,contentType:s});return{url:a.url,method:a.method,headers:a.headers}}catch(a){throw console.error("Failed to generate signed URL:",a),a}}async updateProject(e,t){try{return await this.apiRequest(`projects/${e}`,"PATCH",t)}catch(r){throw console.error("Failed to update project:",r),r}}async archiveProject(e){try{await this.apiRequest(`projects/${e}`,"DELETE")}catch(t){throw console.error("Failed to archive project:",t),t}}async listDatasets(e){const t=new URLSearchParams;return e!=null&&e.organizationId&&t.append("organizationId",e.organizationId),e!=null&&e.visibility&&t.append("visibility",e.visibility),this.apiRequest(`datasets${t.toString()?`?${t}`:""}`)}async createDataset(e){return this.apiRequest("datasets","POST",e)}async getProjectDatasets(e){return this.apiRequest(`datasets/project/${e}`,"GET")}async assignDatasetToProject(e,t){await this.apiRequest(`datasets/project/${e}/${t}`,"POST")}async unassignDatasetFromProject(e,t){await this.apiRequest(`datasets/project/${e}/${t}`,"DELETE")}};h(p,"instance");let g=p;const P=g.getInstance();typeof window<"u"&&(window.cloudProjectIntegration=P);export{P as cloudProjectIntegration,g as default};
