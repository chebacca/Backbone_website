var j=Object.defineProperty;var m=(h,e,t)=>e in h?j(h,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):h[e]=t;var f=(h,e,t)=>m(h,typeof e!="symbol"?e+"":e,t);import{s as k}from"./UnifiedProjectCreationDialog-DQWKP1qO.js";import"./mui-CqGO0PUa.js";import"./vendor-OeuszDaU.js";import"./index-16alK9s2.js";import"./stripe-jpbJ1A2u.js";const w=class w{constructor(){f(this,"baseURL");f(this,"authToken",null);this.baseURL=this.getBaseURL(),this.initializeAuth()}static getInstance(){return this.instance||(this.instance=new w),this.instance}initializeAuth(){this.authToken=localStorage.getItem("auth_token")}getBaseURL(){return window.location.hostname!=="localhost"&&window.location.hostname!=="127.0.0.1"&&!window.location.hostname.includes("localhost")?"/api":"https://backbone-logic.web.app/api"}async apiRequest(e,t="GET",r){const a=this.baseURL.replace(/\/$/,""),o=String(e||"").replace(/^\//,""),d=`${a}/${o}`,c={"Content-Type":"application/json"};this.authToken&&(c.Authorization=`Bearer ${this.authToken}`);const p={method:t,headers:c,...r&&{body:JSON.stringify(r)}};try{const i=await fetch(d,p);if(!i.ok){if(i.status===401)throw await this.handleAuthError(),new Error("Authentication required");let s="",l;try{const n=await i.clone().json();s=(n==null?void 0:n.error)||(n==null?void 0:n.message)||"",n!=null&&n.details&&(l=n.details)}catch{try{s=await i.text()||""}catch{}}const g=i.statusText||"Bad Request",P=s?` - ${s}`:"",b=l?` | details=${JSON.stringify(l)}`:"";throw new Error(`API request failed: ${i.status} ${g}${P}${b}`)}const u=await i.json();if(!u.success)throw new Error(u.error||u.message||"API request failed");return u.data}catch(i){throw console.error("API request error:",i),i}}async handleAuthError(){var e,t;try{const r=localStorage.getItem("refresh_token");if(!r)throw new Error("No refresh token available");const a=await fetch(`${this.baseURL}/auth/refresh`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({refreshToken:r})});if(a.ok){const o=await a.json();if(o.success&&((t=(e=o.data)==null?void 0:e.tokens)!=null&&t.accessToken)){const d=o.data.tokens.accessToken;this.authToken=d,localStorage.setItem("auth_token",d);const c=o.data.tokens.refreshToken;c&&localStorage.setItem("refresh_token",c);return}}}catch(r){console.error("Token refresh failed:",r)}localStorage.removeItem("auth_token"),localStorage.removeItem("refresh_token"),this.authToken=null,await k.reset()}setAuthToken(e){this.authToken=e,localStorage.setItem("auth_token",e)}async createCloudProject(e){try{const t=this.mapToCloudProjectPayload(e),r=await this.apiRequest("projects","POST",t);return console.log("Cloud project created:",r),await this.setupProjectResources(r.id,e),typeof window<"u"&&window.dispatchEvent(new CustomEvent("project:created",{detail:{projectId:r.id,project:r}})),r.id}catch(t){console.error("Failed to create cloud project:",t);const r=t instanceof Error?t.message:String(t);throw new Error(`Failed to create cloud project: ${r}`)}}mapToCloudProjectPayload(e){const t=k.getState(),r=t.selectedMode||"shared_network",a={name:e.name,description:e.description,type:this.mapApplicationModeToType(r),applicationMode:r,visibility:"private",storageBackend:this.mapStorageModeToBackend(t.storageMode)};return e.cloudConfig&&(e.cloudConfig.provider==="gcs"?(a.storageBackend="gcs",a.gcsBucket=e.cloudConfig.bucket,a.gcsPrefix=e.cloudConfig.prefix):a.storageBackend="firestore"),e.collaborationSettings&&r==="shared_network"&&(a.allowCollaboration=!0,a.maxCollaborators=Math.max(1,Math.round(e.collaborationSettings.maxCollaborators)),a.realTimeEnabled=e.collaborationSettings.enableRealTime,a.enableComments=e.collaborationSettings.enableComments,a.enableActivityLog=!0,a.enablePresenceIndicators=!0),r==="standalone"&&(a.autoSave=!0,a.backupEnabled=!0,a.offlineMode=t.storageMode==="local"),e.preferredPorts&&(e.preferredPorts.website||e.preferredPorts.api)&&(a.settings={...a.settings||{},preferredPorts:{...e.preferredPorts.website?{website:e.preferredPorts.website}:{},...e.preferredPorts.api?{api:e.preferredPorts.api}:{}}}),a}mapApplicationModeToType(e){switch(e){case"standalone":return"standalone";case"shared_network":return"networked";default:return"networked"}}mapStorageModeToBackend(e){switch(e){case"cloud":return"firestore";case"hybrid":return"firestore";case"local":return"firestore";default:return"firestore"}}async setupProjectResources(e,t){var r,a;(r=t.localNetworkConfig)!=null&&r.enabled&&await this.setupLocalNetworkDeployment(e,t.localNetworkConfig),((a=t.cloudConfig)==null?void 0:a.provider)==="gcs"&&await this.validateGCSConfiguration(e,t.cloudConfig),await this.initializeProjectWorkspace(e,t)}async setupLocalNetworkDeployment(e,t){try{console.log("Setting up local network deployment:",{projectId:e,port:t.port,address:t.address,maxUsers:t.maxUsers}),await this.apiRequest(`projects/${e}`,"PATCH",{metadata:{localNetwork:{enabled:!0,port:t.port,address:t.address,maxUsers:t.maxUsers,deployedAt:new Date().toISOString()}}})}catch(r){console.error("Failed to setup local network deployment:",r)}}async validateGCSConfiguration(e,t){try{await this.apiRequest(`projects/${e}/storage/signed-url`,"POST",{filename:"test-validation.txt",operation:"upload"}),console.log("GCS configuration validated for project:",e)}catch(r){throw console.error("GCS configuration validation failed:",r),new Error("GCS storage configuration is invalid")}}async initializeProjectWorkspace(e,t){try{console.log("Initializing project workspace for:",e)}catch(r){console.error("Failed to initialize project workspace:",r)}}async getUserProjects(){try{const e=this.authToken?"projects":"projects/public";return await this.apiRequest(e)}catch(e){return console.error("Failed to fetch user projects:",e),[]}}async getProject(e){try{return await this.apiRequest(`projects/${e}`)}catch(t){return console.error("Failed to fetch project:",t),null}}async validateProjectAccess(e){try{return await this.getProject(e)!==null}catch{return!1}}async generateSignedUrl(e,t,r="upload",a){try{const o=await this.apiRequest(`projects/${e}/storage/signed-url`,"POST",{filename:t,operation:r,contentType:a});return{url:o.url,method:o.method,headers:o.headers}}catch(o){throw console.error("Failed to generate signed URL:",o),o}}async uploadFileViaSignedUrl(e,t,r){const a=t.name||"upload.bin",o=a.replace(/[^a-zA-Z0-9._\-]/g,"_"),d=r!=null&&r.targetPath?`${String(r.targetPath).replace(/\/$/,"")}/${o}`:o,{url:c,headers:p}=await this.generateSignedUrl(e,d,"upload",t.type||"application/octet-stream");await new Promise((i,u)=>{const s=new XMLHttpRequest;s.open("PUT",c,!0),p&&Object.entries(p).forEach(([l,g])=>{try{s.setRequestHeader(l,g)}catch{}}),r!=null&&r.onProgress&&s.upload&&(s.upload.onprogress=l=>{if(l.lengthComputable){const g=Math.round(l.loaded*100/l.total);r.onProgress(g)}}),s.onload=()=>{s.status>=200&&s.status<300?i():u(new Error(`Upload failed: ${s.status} ${s.statusText}`))},s.onerror=()=>u(new Error("Network error during upload")),s.send(t)});try{await this.apiRequest(`projects/${e}/storage/record`,"POST",{key:d,name:a,size:t.size,contentType:t.type||"application/octet-stream",url:c})}catch(i){console.warn("File metadata record failed",i)}return{key:d,url:c}}async updateProject(e,t){try{return await this.apiRequest(`projects/${e}`,"PATCH",t)}catch(r){throw console.error("Failed to update project:",r),r}}async archiveProject(e){try{await this.apiRequest(`projects/${e}`,"DELETE")}catch(t){throw console.error("Failed to archive project:",t),t}}async restoreProject(e){try{await this.apiRequest(`projects/${e}/archive`,"PATCH",{isArchived:!1})}catch(t){throw console.error("Failed to restore project:",t),t}}async listDatasets(e){const t=new URLSearchParams;return e!=null&&e.organizationId&&t.append("organizationId",e.organizationId),e!=null&&e.visibility&&t.append("visibility",e.visibility),e!=null&&e.backend&&t.append("backend",e.backend),e!=null&&e.query&&t.append("query",e.query),this.apiRequest(`datasets${t.toString()?`?${t}`:""}`)}async createDataset(e){const t={...e};return(t.organizationId==null||t.organizationId==="")&&delete t.organizationId,Array.isArray(t.tags)&&t.tags.length===0&&delete t.tags,t.schema&&typeof t.schema=="object"&&Object.keys(t.schema).length===0&&delete t.schema,t.storage&&typeof t.storage=="object"&&(t.storage.backend||delete t.storage.backend,t.storage.gcsBucket||delete t.storage.gcsBucket,t.storage.gcsPrefix||delete t.storage.gcsPrefix,t.storage.path||delete t.storage.path,Object.keys(t.storage).length===0&&delete t.storage),this.apiRequest("datasets","POST",t)}async getProjectDatasets(e){return this.apiRequest(`datasets/project/${e}`,"GET")}async assignDatasetToProject(e,t){await this.apiRequest(`datasets/project/${e}/${t}`,"POST")}async unassignDatasetFromProject(e,t){await this.apiRequest(`datasets/project/${e}/${t}`,"DELETE")}};f(w,"instance");let y=w;const T=y.getInstance();typeof window<"u"&&(window.cloudProjectIntegration=T);export{T as cloudProjectIntegration,y as default};
