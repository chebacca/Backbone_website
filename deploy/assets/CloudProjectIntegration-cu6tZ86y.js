const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-CF-Jp15v.js","assets/index-Ba9wHdHC.js","assets/mui-BV3QNocG.js","assets/vendor-CjD1bmmO.js","assets/stripe-DumUHF41.js","assets/index-CBai7h7s.css","assets/index.esm-Dkmm1Qng.js","assets/index.esm-DdZh2hq1.js","assets/index.esm-e-DuI42t.js","assets/UnifiedDataService-DwNanKL4.js","assets/FirestoreCollectionManager-DVf-4duQ.js"])))=>i.map(i=>d[i]);
var Q=Object.defineProperty;var Y=(A,e,t)=>e in A?Q(A,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):A[e]=t;var I=(A,e,t)=>Y(A,typeof e!="symbol"?e+"":e,t);import{_ as p}from"./index-Ba9wHdHC.js";const M=class M{constructor(){I(this,"db");I(this,"auth")}static arrayUnion(e){return{_method:"arrayUnion",value:e}}static arrayRemove(e){return{_method:"arrayRemove",value:e}}static getInstance(){return M.instance||(M.instance=new M),M.instance}async initialize(){const e=await p(()=>import("./firebase-CF-Jp15v.js").then(t=>t.f),__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=e.db,this.auth=e.auth}getCurrentUser(){var e;return(e=this.auth)==null?void 0:e.currentUser}async getDocumentById(e,t){try{const{doc:r,getDoc:o}=await p(async()=>{const{doc:a,getDoc:s}=await import("./index.esm-DdZh2hq1.js");return{doc:a,getDoc:s}},__vite__mapDeps([7,6])),n=r(this.db,e,t),i=await o(n);if(i.exists()){const a=i.data();return{id:i.id,...this.convertFirestoreDates(a)}}return null}catch(r){return console.error(`❌ [FirestoreAdapter] Error getting document ${t} from ${e}:`,r),null}}async queryDocuments(e,t=[]){try{const{collection:r,query:o,where:n,getDocs:i}=await p(async()=>{const{collection:d,query:g,where:P,getDocs:j}=await import("./index.esm-DdZh2hq1.js");return{collection:d,query:g,where:P,getDocs:j}},__vite__mapDeps([7,6])),a=r(this.db,e);let s;if(t.length>0){let d=[];for(const g of t)d.push(n(g.field,g.operator,g.value));s=o(a,...d)}else s=o(a);const l=await i(s),c=[];return l.forEach(d=>{const g=d.data();c.push({id:d.id,...this.convertFirestoreDates(g)})}),c}catch(r){return console.error(`❌ [FirestoreAdapter] Error querying ${e}:`,r),[]}}async createDocument(e,t){try{const{collection:r,addDoc:o}=await p(async()=>{const{collection:a,addDoc:s}=await import("./index.esm-DdZh2hq1.js");return{collection:a,addDoc:s}},__vite__mapDeps([7,6])),n=this.cleanDocumentData({...t,createdAt:new Date,updatedAt:new Date});return{id:(await o(r(this.db,e),n)).id,...n}}catch(r){return console.error(`❌ [FirestoreAdapter] Error creating document in ${e}:`,r),null}}async updateDocumentWithArrayOps(e,t,r){try{const{doc:o,updateDoc:n}=await p(async()=>{const{doc:c,updateDoc:d}=await import("./index.esm-DdZh2hq1.js");return{doc:c,updateDoc:d}},__vite__mapDeps([7,6])),{arrayUnion:i,arrayRemove:a}=await p(async()=>{const{arrayUnion:c,arrayRemove:d}=await import("./index.esm-DdZh2hq1.js");return{arrayUnion:c,arrayRemove:d}},__vite__mapDeps([7,6])),s={};for(const[c,d]of Object.entries(r))d&&typeof d=="object"&&d._method==="arrayUnion"?s[c]=i(d.value):d&&typeof d=="object"&&d._method==="arrayRemove"?s[c]=a(d.value):s[c]=d;const l=this.cleanDocumentData({...s,updatedAt:new Date});return await n(o(this.db,e,t),l),!0}catch(o){return console.error(`❌ [FirestoreAdapter] Error updating document ${t} in ${e} with array ops:`,o),!1}}async updateDocument(e,t,r){try{const{doc:o,updateDoc:n}=await p(async()=>{const{doc:a,updateDoc:s}=await import("./index.esm-DdZh2hq1.js");return{doc:a,updateDoc:s}},__vite__mapDeps([7,6])),i=this.cleanDocumentData({...r,updatedAt:new Date});return await n(o(this.db,e,t),i),!0}catch(o){return console.error(`❌ [FirestoreAdapter] Error updating document ${t} in ${e}:`,o),!1}}async deleteDocument(e,t){try{const{doc:r,deleteDoc:o}=await p(async()=>{const{doc:n,deleteDoc:i}=await import("./index.esm-DdZh2hq1.js");return{doc:n,deleteDoc:i}},__vite__mapDeps([7,6]));return await o(r(this.db,e,t)),!0}catch(r){return console.error(`❌ [FirestoreAdapter] Error deleting document ${t} from ${e}:`,r),!1}}cleanDocumentData(e){const t={};for(const[r,o]of Object.entries(e))if(o!==void 0){if(o===null){t[r]=null;continue}if(typeof o=="object"&&!Array.isArray(o)&&!(o instanceof Date)){t[r]=this.cleanDocumentData(o);continue}t[r]=o}return t}convertFirestoreDates(e){const t={};for(const[r,o]of Object.entries(e))o&&typeof o=="object"&&o.toDate&&typeof o.toDate=="function"?t[r]=o.toDate().toISOString():o&&typeof o=="object"&&!Array.isArray(o)?t[r]=this.convertFirestoreDates(o):t[r]=o;return t}};I(M,"instance");let R=M;class V{constructor(e){I(this,"config");I(this,"firestoreAdapter");this.config=e,this.firestoreAdapter=R.getInstance()}isWebOnlyMode(){return this.config.isWebOnlyMode}getConfig(){return this.config}async apiRequest(e,t="GET",r,o){try{const i=`${this.config.apiBaseUrl||"/api"}/${e.startsWith("/")?e.substring(1):e}`,a={"Content-Type":"application/json",...o},s={method:t,headers:a,credentials:"include"};r&&(t==="POST"||t==="PATCH")&&(s.body=JSON.stringify(r));const l=await fetch(i,s);if(!l.ok)throw new Error(`API request failed: ${l.status} ${l.statusText}`);const c=l.headers.get("content-type");return c&&c.includes("application/json")?await l.json():await l.text()}catch(n){throw console.error(`❌ [BaseService] API request failed for ${e}:`,n),n}}handleError(e,t){console.error(`❌ [${this.constructor.name}] Error in ${t}:`,e)}}var k=(A=>(A.ACTIVE="ACTIVE",A.INACTIVE="INACTIVE",A.PENDING="PENDING",A.DELETED="DELETED",A))(k||{}),S=(A=>(A.ADMIN="ADMIN",A.MEMBER="MEMBER",A))(S||{}),$=(A=>(A.ACTIVE="active",A.ARCHIVED="archived",A.DELETED="deleted",A.DRAFT="draft",A))($||{});const E=class E extends V{constructor(e){super(e)}static getInstance(e){return E.instance||(E.instance=new E(e)),E.instance}async getProjects(){try{if(console.log("🚀 [ProjectService] Getting all projects"),this.isWebOnlyMode())return await this.getProjectsFromFirestore();try{return await this.apiRequest("projects")}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.getProjectsFromFirestore()}}catch(e){return this.handleError(e,"getProjects"),[]}}async getProject(e){try{if(console.log(`🚀 [ProjectService] Getting project: ${e}`),this.isWebOnlyMode())return await this.getProjectFromFirestore(e);try{return await this.apiRequest(`projects/${e}`)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.getProjectFromFirestore(e)}}catch(t){return this.handleError(t,`getProject(${e})`),null}}async createProject(e){try{if(console.log("🚀 [ProjectService] Creating new project"),this.isWebOnlyMode())return await this.createProjectInFirestore(e);try{return await this.apiRequest("projects","POST",e)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.createProjectInFirestore(e)}}catch(t){return this.handleError(t,"createProject"),null}}async updateProject(e,t){try{if(console.log(`🚀 [ProjectService] Updating project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,t);try{return await this.apiRequest(`projects/${e}`,"PATCH",t)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,t)}}catch(r){return this.handleError(r,`updateProject(${e})`),null}}async archiveProject(e){try{if(console.log(`🚀 [ProjectService] Archiving project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,{status:$.ARCHIVED})!==null;try{return await this.apiRequest(`projects/${e}/archive`,"POST"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,{status:$.ARCHIVED})!==null}}catch(t){return this.handleError(t,`archiveProject(${e})`),!1}}async restoreProject(e){try{if(console.log(`🚀 [ProjectService] Restoring project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,{status:$.ACTIVE})!==null;try{return await this.apiRequest(`projects/${e}/restore`,"POST"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,{status:$.ACTIVE})!==null}}catch(t){return this.handleError(t,`restoreProject(${e})`),!1}}async deleteProject(e){try{if(console.log(`🗑️ [ProjectService] Deleting project: ${e}`),this.isWebOnlyMode())return await this.deleteProjectFromFirestore(e);try{return await this.apiRequest(`projects/${e}`,"DELETE"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.deleteProjectFromFirestore(e)}}catch(t){return this.handleError(t,`deleteProject(${e})`),!1}}async getProjectsFromFirestore(){try{console.log("🔍 [ProjectService] Getting projects from Firestore"),await this.firestoreAdapter.initialize();const e=this.firestoreAdapter.getCurrentUser();if(!e)return console.log("❌ [ProjectService] No authenticated user found"),[];let t=null;try{const r=await this.firestoreAdapter.getDocumentById("users",e.uid);if(r&&r.organizationId)t=r.organizationId,console.log("✅ [ProjectService] Found organization ID from user document:",t);else{const o=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:e.email}]);o.length>0&&o[0].organizationId&&(t=o[0].organizationId,console.log("✅ [ProjectService] Found organization ID from user email query:",t))}}catch(r){console.warn("⚠️ [ProjectService] Error getting user organization:",r)}if(!t)return console.log("❌ [ProjectService] No organization ID found for user"),[];try{const r=await this.firestoreAdapter.queryDocuments("projects",[{field:"organizationId",operator:"==",value:t}]);console.log(`✅ [ProjectService] Found ${r.length} projects for organization: ${t}`),console.log("🔍 [ProjectService] Raw projects from Firestore:",r);const o=r.sort((n,i)=>{const a=n.lastAccessedAt?new Date(n.lastAccessedAt).getTime():0;return(i.lastAccessedAt?new Date(i.lastAccessedAt).getTime():0)-a});return console.log("🔍 [ProjectService] Sorted projects:",o),o}catch(r){if(r.message&&r.message.includes("requires an index"))return console.warn("⚠️ [ProjectService] Missing Firestore index detected. Projects query requires composite index."),console.warn("📋 Required index: organizationId (Ascending) + createdAt (Ascending) + __name__ (Ascending)"),console.warn("🔗 Create index at: https://console.firebase.google.com/v1/r/project/backbone-logic/firestore/indexes"),console.warn("📝 Note: Index creation can take several minutes. Returning empty array for now."),[];throw r}}catch(e){return this.handleError(e,"getProjectsFromFirestore"),[]}}async getProjectFromFirestore(e){try{return console.log(`🔍 [ProjectService] Getting project from Firestore: ${e}`),await this.firestoreAdapter.initialize(),await this.firestoreAdapter.getDocumentById("projects",e)}catch(t){return this.handleError(t,`getProjectFromFirestore(${e})`),null}}async createProjectInFirestore(e){try{console.log("🔍 [ProjectService] Creating project in Firestore"),await this.firestoreAdapter.initialize();const t=this.firestoreAdapter.getCurrentUser();if(!t)return console.warn("⚠️ [ProjectService] No authenticated user for project creation"),null;const r={...e,ownerId:e.ownerId||t.uid,status:e.status||$.ACTIVE,teamMembers:e.teamMembers||[]};return await this.firestoreAdapter.createDocument("projects",r)}catch(t){return this.handleError(t,"createProjectInFirestore"),null}}async updateProjectInFirestore(e,t){try{console.log(`🔍 [ProjectService] Updating project in Firestore: ${e}`),await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.getDocumentById("projects",e);return r?await this.firestoreAdapter.updateDocument("projects",e,t)?{...r,...t,id:e}:null:(console.warn(`⚠️ [ProjectService] Project not found: ${e}`),null)}catch(r){return this.handleError(r,`updateProjectInFirestore(${e})`),null}}async deleteProjectFromFirestore(e){try{return console.log(`🗑️ [ProjectService] Deleting project from Firestore: ${e}`),await this.firestoreAdapter.initialize(),await this.firestoreAdapter.getDocumentById("projects",e)?await this.firestoreAdapter.deleteDocument("projects",e)?(console.log(`✅ [ProjectService] Project successfully deleted from Firestore: ${e}`),!0):(console.warn(`⚠️ [ProjectService] Failed to delete project from Firestore: ${e}`),!1):(console.warn(`⚠️ [ProjectService] Project not found for deletion: ${e}`),!1)}catch(t){return this.handleError(t,`deleteProjectFromFirestore(${e})`),!1}}};I(E,"instance");let N=E;const C=class C extends V{constructor(e){super(e)}static getInstance(e){return C.instance||(C.instance=new C(e)),C.instance}async getLicensedTeamMembers(e){try{if(console.log("🚀 [TeamMemberService] Getting licensed team members with options:",e),this.isWebOnlyMode())return await this.getLicensedTeamMembersFromFirestore(e);const t=new URLSearchParams;e!=null&&e.search&&t.append("search",e.search),e!=null&&e.excludeProjectId&&t.append("excludeProjectId",e.excludeProjectId);const r=`team-members/licensed${t.toString()?`?${t.toString()}`:""}`;try{return await this.apiRequest(r)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.getLicensedTeamMembersFromFirestore(e)}}catch(t){return this.handleError(t,"getLicensedTeamMembers"),[]}}async getProjectTeamMembers(e){try{if(console.log("🚀 [TeamMemberService] Getting team members for project:",e),this.isWebOnlyMode())return await this.getProjectTeamMembersFromFirestore(e);try{return await this.apiRequest(`projects/${e}/team-members`)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.getProjectTeamMembersFromFirestore(e)}}catch(t){return this.handleError(t,`getProjectTeamMembers(${e})`),[]}}async addTeamMemberToProject(e,t,r=S.MEMBER){try{if(console.log("🚀 [TeamMemberService] Adding team member to project:",{projectId:e,teamMemberId:t,role:r}),this.isWebOnlyMode())return await this.addTeamMemberToProjectInFirestore(e,t,r);try{return await this.apiRequest(`projects/${e}/team-members`,"POST",{teamMemberId:t,role:r}),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.addTeamMemberToProjectInFirestore(e,t,r)}}catch(o){return this.handleError(o,`addTeamMemberToProject(${e}, ${t})`),!1}}async removeTeamMemberFromProject(e,t){try{if(console.log("🚀 [TeamMemberService] Removing team member from project:",{projectId:e,teamMemberId:t}),this.isWebOnlyMode())return await this.removeTeamMemberFromProjectInFirestore(e,t);try{return await this.apiRequest(`projects/${e}/team-members/${t}`,"DELETE"),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.removeTeamMemberFromProjectInFirestore(e,t)}}catch(r){return this.handleError(r,`removeTeamMemberFromProject(${e}, ${t})`),!1}}async updateTeamMemberRole(e,t,r){try{if(console.log("🚀 [TeamMemberService] Updating team member role:",{projectId:e,teamMemberId:t,role:r}),this.isWebOnlyMode())return await this.updateTeamMemberRoleInFirestore(e,t,r);try{return await this.apiRequest(`projects/${e}/team-members/${t}/role`,"PATCH",{role:r}),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.updateTeamMemberRoleInFirestore(e,t,r)}}catch(o){return this.handleError(o,`updateTeamMemberRole(${e}, ${t})`),!1}}async validateTeamMemberCredentials(e,t){try{if(console.log("🚀 [TeamMemberService] Validating team member credentials for:",e),this.isWebOnlyMode())return await this.validateTeamMemberCredentialsFromFirestore(e,t);try{return await this.apiRequest("team-members/validate-credentials","POST",{email:e,password:t})}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.validateTeamMemberCredentialsFromFirestore(e,t)}}catch(r){return this.handleError(r,"validateTeamMemberCredentials"),{isValid:!1,error:"Authentication failed"}}}async refreshTeamMembers(){try{console.log("🔄 [TeamMemberService] Refreshing team member data..."),console.log("✅ [TeamMemberService] Team member data refresh initiated")}catch(e){console.error("❌ [TeamMemberService] Failed to refresh team member data:",e)}}async createTeamMemberWithFirebaseAuth(e){try{if(console.log("🚀 [TeamMemberService] Creating team member with Firebase Auth:",e),this.isWebOnlyMode())return await this.createTeamMemberWithFirebaseAuthInFirestore(e);try{return await this.apiRequest("team-members/create","POST",e)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.createTeamMemberWithFirebaseAuthInFirestore(e)}}catch(t){return this.handleError(t,"createTeamMemberWithFirebaseAuth"),{success:!1,error:"Failed to create team member with Firebase Auth"}}}async getLicensedTeamMembersFromFirestore(e){try{console.log("🔍 [TeamMemberService] Fetching licensed team members from Firestore with options:",e),await this.firestoreAdapter.initialize();const t=this.firestoreAdapter.getCurrentUser();if(!t)return console.log("❌ [TeamMemberService] No authenticated user found"),[];let r=null;try{const s=await this.firestoreAdapter.getDocumentById("users",t.uid);if(s&&s.organizationId)r=s.organizationId,console.log("✅ [TeamMemberService] Found organization ID from user document:",r);else{const l=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:t.email}]);l.length>0&&l[0].organizationId&&(r=l[0].organizationId,console.log("✅ [TeamMemberService] Found organization ID from user email query:",r))}}catch(s){console.warn("⚠️ [TeamMemberService] Error getting user organization:",s)}if(!r)return console.log("❌ [TeamMemberService] No organization ID found for user"),[];console.log("🏢 [TeamMemberService] Fetching team members for organization:",r),console.log("🔍 [TeamMemberService] Using UnifiedDataService for enhanced team member fetching...");let o=[];try{const{unifiedDataService:s}=await p(async()=>{const{unifiedDataService:c}=await import("./UnifiedDataService-DwNanKL4.js");return{unifiedDataService:c}},__vite__mapDeps([9,1,2,3,4,5,7,6,10,0,8])),l=await s.getTeamMembersForOrganization();console.log(`📊 [TeamMemberService] Found ${l.length} team members from UnifiedDataService`),o=l.filter(c=>c.status==="active").map(c=>{var d,g;return{id:c.id,email:c.email,firstName:c.firstName,lastName:c.lastName,name:`${c.firstName} ${c.lastName}`.trim()||c.email,role:c.role,status:k.ACTIVE,department:c.department,organizationId:c.organization.id,licenseType:((d=c.licenseAssignment)==null?void 0:d.licenseType)||"BASIC",assignedProjects:c.assignedProjects,createdAt:c.createdAt.toISOString(),updatedAt:c.updatedAt.toISOString(),isActive:!0,joinedAt:c.joinedAt.toISOString(),lastActive:(g=c.lastActive)==null?void 0:g.toISOString(),invitedBy:c.invitedBy,avatar:c.avatar}}),console.log(`✅ [TeamMemberService] Converted ${o.length} active team members from UnifiedDataService`)}catch(s){console.warn("⚠️ [TeamMemberService] UnifiedDataService failed, falling back to direct Firestore query:",s);const l=await this.firestoreAdapter.queryDocuments("teamMembers",[{field:"organizationId",operator:"==",value:r}]);console.log(`🔍 [TeamMemberService] Raw team members found: ${l.length}`),o=l.filter(c=>{var g,P;const d=((P=(g=c.status)==null?void 0:g.toUpperCase)==null?void 0:P.call(g))||c.status||"UNKNOWN";return d!=="ACTIVE"&&d!=="active"?(console.log(`⚠️ [TeamMemberService] Excluding team member ${c.email} with status: ${d}`),!1):c.isActive===!1?(console.log(`⚠️ [TeamMemberService] Excluding team member ${c.email} with isActive: false`),!1):c.revokedAt||c.removedAt||c.suspendedAt?(console.log(`⚠️ [TeamMemberService] Excluding team member ${c.email} with revocation/removal dates`),!1):!0}),console.log(`✅ [TeamMemberService] Active team members after filtering: ${o.length}`)}let n=[];if(e!=null&&e.excludeProjectId)try{n=(await this.getProjectTeamMembersFromFirestore(e.excludeProjectId)).map(l=>l.teamMemberId),console.log(`🔍 [TeamMemberService] Excluding ${n.length} already assigned team members`)}catch(s){console.warn("⚠️ [TeamMemberService] Failed to get assigned team members:",s)}const a=o.filter(s=>{if(n.includes(s.id))return!1;if(e!=null&&e.search){const l=e.search.toLowerCase(),c=(s.name||"").toLowerCase(),d=(s.firstName||"").toLowerCase(),g=(s.lastName||"").toLowerCase(),P=(s.email||"").toLowerCase();return c.includes(l)||d.includes(l)||g.includes(l)||P.includes(l)}return!0}).map(s=>{let l=s.name;l||(s.firstName&&s.lastName?l=`${s.firstName} ${s.lastName}`:s.firstName?l=s.firstName:s.lastName?l=s.lastName:s.email?l=s.email.split("@")[0].replace(/[._-]/g," ").split(" ").map(P=>P.charAt(0).toUpperCase()+P.slice(1).toLowerCase()).join(" "):l="Unknown User");let c=s.licenseType;return c||(c="professional"),{...s,name:l,licenseType:c,status:"active",isActive:!0}});return a.sort((s,l)=>{const c=(s.name||"").toLowerCase(),d=(l.name||"").toLowerCase();return c.localeCompare(d)}),console.log(`✅ [TeamMemberService] Final filtered and mapped team members: ${a.length}`),a}catch(t){return this.handleError(t,"getLicensedTeamMembersFromFirestore"),[]}}async getProjectTeamMembersFromFirestore(e){try{console.log("🔍 [TeamMemberService] Fetching team members from Firestore for project:",e),await this.firestoreAdapter.initialize();const t=[],r=await this.firestoreAdapter.getDocumentById("projects",e);if(r){const n=r.teamMembers||[];for(const i of n)t.push({id:i.userId||i.id,teamMemberId:i.userId||i.id,projectId:e,role:i.role||"member",permissions:i.permissions||["read"],assignedAt:i.assignedAt||new Date().toISOString(),isActive:i.isActive!==!1,email:i.email,name:i.name||i.email,status:i.status||"active"})}try{const n=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e}]);for(const i of n)t.find(a=>a.teamMemberId===i.teamMemberId)||t.push(i)}catch{console.log("ℹ️ [TeamMemberService] projectTeamMembers collection not found or accessible")}const o=[];for(const n of t)try{let i=null;try{i=await this.firestoreAdapter.getDocumentById("teamMembers",n.teamMemberId),i&&console.log("✅ [TeamMemberService] Found team member in teamMembers collection:",i.name||i.email)}catch{console.log("🔍 [TeamMemberService] Team member not found in teamMembers, trying users collection...")}if(!i)try{i=await this.firestoreAdapter.getDocumentById("users",n.teamMemberId),i&&console.log("✅ [TeamMemberService] Found team member in users collection:",i.name||i.email)}catch{console.log("🔍 [TeamMemberService] Team member not found in users collection either")}if(i){let a="Unnamed User";i.name&&i.name!=="Unnamed User"?a=i.name:i.firstName&&i.lastName?a=`${i.firstName} ${i.lastName}`:i.firstName?a=i.firstName:i.lastName?a=i.lastName:i.email&&(a=i.email.split("@")[0].replace(/[._-]/g," ").split(" ").map(l=>l.charAt(0).toUpperCase()+l.slice(1).toLowerCase()).join(" ")),console.log("🔍 [TeamMemberService] Extracted display name:",a,"from profile:",{name:i.name,firstName:i.firstName,lastName:i.lastName,email:i.email}),o.push({...n,name:a,email:i.email||n.email||"No email",teamMember:{...i,name:a}})}else console.warn("⚠️ [TeamMemberService] No profile found for team member:",n.teamMemberId),o.push(n)}catch(i){console.warn("⚠️ [TeamMemberService] Failed to get full profile for team member:",n.teamMemberId,i),o.push(n)}return console.log(`✅ [TeamMemberService] Found ${o.length} team members for project ${e}`),o}catch(t){return this.handleError(t,`getProjectTeamMembersFromFirestore(${e})`),[]}}async addTeamMemberToProjectInFirestore(e,t,r){try{console.log("🔍 [TeamMemberService] Adding team member to project in Firestore:",{projectId:e,teamMemberId:t,role:r}),await this.firestoreAdapter.initialize();let o=null;if(o=await this.firestoreAdapter.getDocumentById("teamMembers",t),!o){console.log("🔍 [TeamMemberService] Team member not found in teamMembers, trying users collection...");const a=await this.firestoreAdapter.getDocumentById("users",t);a&&(o={id:a.id,email:a.email,name:a.name||`${a.firstName||""} ${a.lastName||""}`.trim(),firstName:a.firstName,lastName:a.lastName,role:a.role||"MEMBER",licenseType:a.licenseType||"BASIC",status:a.status||"ACTIVE",organizationId:a.organizationId,department:a.department,company:a.company,createdAt:a.createdAt||new Date,updatedAt:a.updatedAt||new Date},console.log("✅ [TeamMemberService] Found team member in users collection:",o.name))}if(!o){console.log("🔍 [TeamMemberService] Team member not found in users, trying orgMembers collection...");const a=await this.firestoreAdapter.getDocumentById("orgMembers",t);a&&(o={id:a.id,email:a.email,name:a.name||`${a.firstName||""} ${a.lastName||""}`.trim(),firstName:a.firstName,lastName:a.lastName,role:a.role||"MEMBER",licenseType:a.licenseType||"BASIC",status:a.status||"ACTIVE",organizationId:a.organizationId,department:a.department,company:a.company,createdAt:a.createdAt||new Date,updatedAt:a.updatedAt||new Date},console.log("✅ [TeamMemberService] Found team member in orgMembers collection:",o.name))}if(!o)throw console.warn("⚠️ [TeamMemberService] Team member not found in any collection:",t),new Error(`Team member not found: ${t}`);if(r===S.ADMIN&&(await this.getProjectTeamMembersFromFirestore(e)).some(l=>l.role===S.ADMIN))throw console.warn("⚠️ [TeamMemberService] Only one Admin is allowed per project"),new Error("Only one Admin is allowed per project. Please remove the existing Admin first.");const n={projectId:e,teamMemberId:t,role:r,assignedBy:"system",assignedAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isActive:!0,teamMemberName:o.name||"Unknown User",teamMemberEmail:o.email||"No email",teamMemberRole:o.role||"MEMBER",teamMemberLicenseType:o.licenseType||"BASIC"};return await this.firestoreAdapter.createDocument("projectTeamMembers",n)!==null}catch(o){return this.handleError(o,`addTeamMemberToProjectInFirestore(${e}, ${t})`),!1}}async removeTeamMemberFromProjectInFirestore(e,t){try{console.log("🔍 [TeamMemberService] Removing team member from project in Firestore:",{projectId:e,teamMemberId:t}),await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e},{field:"teamMemberId",operator:"==",value:t}]);return r.length===0?(console.warn("⚠️ [TeamMemberService] Team member not found in project"),!1):await this.firestoreAdapter.deleteDocument("projectTeamMembers",r[0].id)}catch(r){return this.handleError(r,`removeTeamMemberFromProjectInFirestore(${e}, ${t})`),!1}}async updateTeamMemberRoleInFirestore(e,t,r){try{console.log("🔍 [TeamMemberService] Updating team member role in Firestore:",{projectId:e,teamMemberId:t,role:r}),await this.firestoreAdapter.initialize();const o=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e},{field:"teamMemberId",operator:"==",value:t}]);if(o.length===0)return console.warn("⚠️ [TeamMemberService] Team member not found in project"),!1;if(r===S.ADMIN&&(await this.getProjectTeamMembersFromFirestore(e)).some(s=>s.role===S.ADMIN&&s.teamMemberId!==t))throw console.warn("⚠️ [TeamMemberService] Only one Admin is allowed per project"),new Error("Only one Admin is allowed per project. Please remove the existing Admin first.");return await this.firestoreAdapter.updateDocument("projectTeamMembers",o[0].id,{role:r,updatedAt:new Date().toISOString()})}catch(o){return this.handleError(o,`updateTeamMemberRoleInFirestore(${e}, ${t})`),!1}}async validateTeamMemberCredentialsFromFirestore(e,t){try{await this.firestoreAdapter.initialize();const r=await this.firestoreAdapter.queryDocuments("teamMembers",[{field:"email",operator:"==",value:e}]);if(r.length===0)return{isValid:!1,error:"Team member not found"};const o=r[0];return t.length<1?{isValid:!1,error:"Password is required"}:{isValid:!0,teamMember:o,projectAccess:[]}}catch(r){return this.handleError(r,"validateTeamMemberCredentialsFromFirestore"),{isValid:!1,error:"Authentication failed"}}}async createTeamMemberWithFirebaseAuthInFirestore(e){try{console.log("🔍 [TeamMemberService] Creating team member with Firebase Auth in Firestore:",e),await this.firestoreAdapter.initialize();const{auth:t}=await p(async()=>{const{auth:c}=await import("./firebase-CF-Jp15v.js").then(d=>d.f);return{auth:c}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{createUserWithEmailAndPassword:r}=await p(async()=>{const{createUserWithEmailAndPassword:c}=await import("./index.esm-e-DuI42t.js");return{createUserWithEmailAndPassword:c}},__vite__mapDeps([8,6])),o=e.temporaryPassword||this.generateSecurePassword();let n;try{n=(await r(t,e.email,o)).user,console.log("✅ [TeamMemberService] Firebase Auth user created successfully:",n.uid)}catch(c){if(c.code==="auth/email-already-in-use")return{success:!1,error:"User with this email already exists in Firebase Authentication"};throw c}const i={id:n.uid,email:e.email,firstName:e.firstName,lastName:e.lastName,name:`${e.firstName} ${e.lastName}`,licenseType:e.licenseType||"PROFESSIONAL",status:"ACTIVE",organizationId:e.organizationId,department:e.department,role:e.role||"MEMBER",firebaseUid:n.uid,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isActive:!0},a={id:n.uid,email:e.email,name:`${e.firstName} ${e.lastName}`,firstName:e.firstName,lastName:e.lastName,role:"TEAM_MEMBER",firebaseUid:n.uid,isEmailVerified:!1,twoFactorEnabled:!1,twoFactorBackupCodes:[],privacyConsent:[],marketingConsent:!1,dataProcessingConsent:!1,identityVerified:!1,kycStatus:"PENDING",isTeamMember:!0,organizationId:e.organizationId,memberRole:e.role||"MEMBER",memberStatus:"ACTIVE",department:e.department,licenseType:e.licenseType||"PROFESSIONAL",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};let s=null,l=null;if(s=await this.firestoreAdapter.createDocument("teamMembers",i),s&&(l=await this.firestoreAdapter.createDocument("users",a)),!s||!l){try{await n.delete(),console.log("🔄 [TeamMemberService] Rolled back Firebase Auth user after Firestore failure")}catch(c){console.error("❌ [TeamMemberService] Failed to rollback Firebase Auth user:",c)}return{success:!1,error:"Failed to create required documents in Firestore"}}return console.log("✅ [TeamMemberService] Team member created successfully in Firestore"),{success:!0,teamMember:i,firebaseUid:n.uid,temporaryPassword:o}}catch(t){return this.handleError(t,"createTeamMemberWithFirebaseAuthInFirestore"),{success:!1,error:(t==null?void 0:t.message)||"Failed to create team member with Firebase Auth"}}}generateSecurePassword(){const t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";let r="";r+="ABCDEFGHIJKLMNOPQRSTUVWXYZ"[Math.floor(Math.random()*26)],r+="abcdefghijklmnopqrstuvwxyz"[Math.floor(Math.random()*26)],r+="0123456789"[Math.floor(Math.random()*10)],r+="!@#$%^&*"[Math.floor(Math.random()*8)];for(let o=4;o<12;o++)r+=t[Math.floor(Math.random()*t.length)];return r.split("").sort(()=>Math.random()-.5).join("")}};I(C,"instance");let L=C;const _=class _{constructor(){I(this,"config");I(this,"projectService",null);I(this,"teamMemberService",null);this.config={isWebOnlyMode:this.detectWebOnlyMode(),apiBaseUrl:"/api"},this.initializeFirestoreAdapter()}static getInstance(){return _.instance||(_.instance=new _),_.instance}initialize(e){this.config={...this.config,...e},console.log("🔧 [ServiceFactory] Initialized with config:",this.config),this.projectService=null,this.teamMemberService=null}getProjectService(){return this.projectService||(this.projectService=N.getInstance(this.config)),this.projectService}getTeamMemberService(){return this.teamMemberService||(this.teamMemberService=L.getInstance(this.config)),this.teamMemberService}detectWebOnlyMode(){if(typeof window<"u"){const e=new URLSearchParams(window.location.search);if(e.has("webonly"))return e.get("webonly")==="true";const t=localStorage.getItem("webonly_mode");if(t)return t==="true";if(window.ENV&&window.ENV.WEBONLY)return window.ENV.WEBONLY===!0}return!0}async initializeFirestoreAdapter(){try{await R.getInstance().initialize()}catch(e){console.error("❌ [ServiceFactory] Failed to initialize Firestore adapter:",e)}}};I(_,"instance");let q=_;const O=class O{constructor(){I(this,"serviceFactory");I(this,"authTokenCallback",null);I(this,"isInitialized",!1);this.serviceFactory=q.getInstance(),this.serviceFactory.initialize({isWebOnlyMode:this.isWebOnlyMode()})}static getInstance(){return O.instance||(O.instance=new O),O.instance}isWebOnlyMode(){if(typeof window<"u"){const e=new URLSearchParams(window.location.search);if(e.has("webonly"))return e.get("webonly")==="true";const t=localStorage.getItem("webonly_mode");if(t)return t==="true";if(window.ENV&&window.ENV.WEBONLY)return window.ENV.WEBONLY===!0}return!0}setConfig(e){this.serviceFactory.initialize(e)}async getProjects(){return await this.serviceFactory.getProjectService().getProjects()}async getUserProjects(){return await this.serviceFactory.getProjectService().getProjects()}async getProject(e){return await this.serviceFactory.getProjectService().getProject(e)}async createProject(e){return await this.serviceFactory.getProjectService().createProject(e)}async createCloudProject(e){return await this.serviceFactory.getProjectService().createProject(e)}async createCloudProjectInFirestore(e){return await this.serviceFactory.getProjectService().createProject(e)}async updateProject(e,t){return await this.serviceFactory.getProjectService().updateProject(e,t)}async updateProjectInFirestore(e,t){return await this.serviceFactory.getProjectService().updateProject(e,t)}async archiveProject(e){return await this.serviceFactory.getProjectService().archiveProject(e)}async archiveProjectInFirestore(e){return await this.serviceFactory.getProjectService().archiveProject(e)}async restoreProject(e){return await this.serviceFactory.getProjectService().restoreProject(e)}async deleteProject(e){return await this.serviceFactory.getProjectService().deleteProject(e)}async listDatasets(e){try{return console.log("🔍 [CloudProjectIntegration] Listing all datasets with params:",e),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - fetching all datasets from Firestore"),await this.getAllDatasetsFromFirestore(e)):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.getAllDatasetsFromFirestore(e))}catch(t){return console.error("❌ [CloudProjectIntegration] Failed to list datasets:",t),[]}}async createDataset(e){try{return console.log("🔍 [CloudProjectIntegration] Creating dataset with input:",e),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - creating dataset in Firestore"),await this.createDatasetInFirestore(e)):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.createDatasetInFirestore(e))}catch(t){throw console.error("❌ [CloudProjectIntegration] Failed to create dataset:",t),t}}async updateDataset(e,t){try{return console.log("🔍 [CloudProjectIntegration] Updating dataset:",e,"with updates:",t),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - updating dataset in Firestore"),await this.updateDatasetInFirestore(e,t)):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.updateDatasetInFirestore(e,t))}catch(r){throw console.error("❌ [CloudProjectIntegration] Failed to update dataset:",r),r}}async getProjectDatasets(e){try{return console.log("🔍 [CloudProjectIntegration] Getting datasets for project:",e),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - fetching datasets from Firestore for project:",e),await this.getProjectDatasetsFromFirestore(e)):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.getProjectDatasetsFromFirestore(e))}catch(t){return console.error("❌ [CloudProjectIntegration] Failed to get project datasets:",t),[]}}async assignDatasetToProject(e,t){try{return console.log("🔍 [CloudProjectIntegration] Assigning dataset to project:",{projectId:e,datasetId:t}),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - assigning dataset to project in Firestore"),await this.assignDatasetToProjectInFirestore(e,t)):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.assignDatasetToProjectInFirestore(e,t))}catch(r){throw console.error("❌ [CloudProjectIntegration] Failed to assign dataset to project:",r),r}}async unassignDatasetFromProject(e,t){await this.unassignDatasetFromProjectInFirestore(e,t)}async unassignDatasetFromProjectInFirestore(e,t){try{console.log("🔍 [CloudProjectIntegration] Unassigning dataset from project in Firestore:",{projectId:e,datasetId:t});const{db:r}=await p(async()=>{const{db:u}=await import("./firebase-CF-Jp15v.js").then(f=>f.f);return{db:u}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{doc:o,updateDoc:n,getDoc:i,collection:a,query:s,where:l,getDocs:c,deleteDoc:d}=await p(async()=>{const{doc:u,updateDoc:f,getDoc:T,collection:F,query:y,where:m,getDocs:D,deleteDoc:z}=await import("./index.esm-DdZh2hq1.js");return{doc:u,updateDoc:f,getDoc:T,collection:F,query:y,where:m,getDocs:D,deleteDoc:z}},__vite__mapDeps([7,6])),g=o(r,"datasets",t),P=await i(g);if(!P.exists())throw new Error("Dataset not found");P.data().projectId!==e&&console.log("⚠️ [CloudProjectIntegration] Dataset is not assigned to this project, but continuing cleanup..."),await n(g,{projectId:null,updatedAt:new Date().toISOString()}),console.log("✅ [CloudProjectIntegration] Cleared projectId from dataset");const v=s(a(r,"project_datasets"),l("projectId","==",e),l("datasetId","==",t)),w=await c(v);console.log(`🔍 [CloudProjectIntegration] Found ${w.size} project_datasets links to remove`);const b=[];w.forEach(u=>{console.log(`🗑️ [CloudProjectIntegration] Removing project_datasets link: ${u.id}`),b.push(d(u.ref))}),await Promise.all(b),console.log(`✅ [CloudProjectIntegration] Removed ${b.length} project_datasets links`);const h=o(r,"projects",e);await n(h,{updatedAt:new Date().toISOString()}),console.log("✅ [CloudProjectIntegration] Updated project timestamp"),console.log("🎉 [CloudProjectIntegration] Successfully unassigned dataset from project")}catch(r){throw console.error("❌ [CloudProjectIntegration] Error unassigning dataset from project:",r),r}}async deleteDataset(e){try{console.log("🗑️ [CloudProjectIntegration] Deleting dataset:",e);const{db:t}=await p(async()=>{const{db:b}=await import("./firebase-CF-Jp15v.js").then(h=>h.f);return{db:b}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{doc:r,getDoc:o,collection:n,query:i,where:a,getDocs:s,deleteDoc:l,writeBatch:c}=await p(async()=>{const{doc:b,getDoc:h,collection:u,query:f,where:T,getDocs:F,deleteDoc:y,writeBatch:m}=await import("./index.esm-DdZh2hq1.js");return{doc:b,getDoc:h,collection:u,query:f,where:T,getDocs:F,deleteDoc:y,writeBatch:m}},__vite__mapDeps([7,6])),d=r(t,"datasets",e),g=await o(d);if(!g.exists())throw new Error("Dataset not found");const P=g.data();console.log("🔍 [CloudProjectIntegration] Dataset found:",P.name);const j=c(t),v=i(n(t,"project_datasets"),a("datasetId","==",e)),w=await s(v);return console.log(`🔍 [CloudProjectIntegration] Found ${w.size} project_datasets links to remove`),w.forEach(b=>{console.log("🗑️ [CloudProjectIntegration] Deleting project_datasets link:",b.id),j.delete(b.ref)}),j.delete(d),await j.commit(),console.log("✅ [CloudProjectIntegration] Dataset deleted successfully"),!0}catch(t){throw console.error("❌ [CloudProjectIntegration] Failed to delete dataset:",t),t}}async cleanupCorruptedDatasets(){return{cleaned:0,errors:[]}}async createDatasetInFirestore(e){var t;try{console.log("🔍 [CloudProjectIntegration] Creating dataset in Firestore:",e);const{db:r,auth:o}=await p(async()=>{const{db:h,auth:u}=await import("./firebase-CF-Jp15v.js").then(f=>f.f);return{db:h,auth:u}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{doc:n,setDoc:i,collection:a,getDoc:s}=await p(async()=>{const{doc:h,setDoc:u,collection:f,getDoc:T}=await import("./index.esm-DdZh2hq1.js");return{doc:h,setDoc:u,collection:f,getDoc:T}},__vite__mapDeps([7,6])),l=await this.waitForFirebaseAuth();if(!l)throw console.warn("⚠️ [CloudProjectIntegration] Cannot create dataset - authentication required"),new Error("Authentication required to create dataset");const d=(await s(n(r,"users",l.uid))).data();let g=(d==null?void 0:d.organizationId)||e.organizationId;if(!g)try{const h=localStorage.getItem("auth_user");if(h){const u=JSON.parse(h);g=(u==null?void 0:u.organizationId)||((t=u==null?void 0:u.teamMemberData)==null?void 0:t.organizationId)}}catch(h){console.warn("⚠️ [CloudProjectIntegration] Could not get organization ID from localStorage during creation:",h)}g||(g=l.uid),console.log("🔍 [CloudProjectIntegration] Creating dataset with organization ID:",{userId:l.uid,organizationId:g,inputOrganizationId:e.organizationId,userDataOrganizationId:d==null?void 0:d.organizationId});const P=n(a(r,"datasets")),j=new Date,v=e.collectionAssignment,w=(v==null?void 0:v.selectedCollections)||[],b={id:P.id,name:e.name,description:e.description||"",visibility:e.visibility||"private",tags:e.tags||[],schema:e.schema||{},storage:e.storage||{backend:"firestore"},ownerId:l.uid,organizationId:g,projectId:e.projectId||null,status:"ACTIVE",createdAt:j.toISOString(),updatedAt:j.toISOString(),lastAccessedAt:j.toISOString(),size:0,fileCount:0,collections:w,collectionAssignment:v||null};return await i(P,b),console.log("✅ [CloudProjectIntegration] Dataset created successfully in Firestore:",P.id),b}catch(r){throw console.error("❌ [CloudProjectIntegration] Failed to create dataset in Firestore:",r),r}}async updateDatasetInFirestore(e,t){var r,o;try{console.log("🔍 [CloudProjectIntegration] Updating dataset in Firestore:",e);const{db:n,auth:i}=await p(async()=>{const{db:y,auth:m}=await import("./firebase-CF-Jp15v.js").then(D=>D.f);return{db:y,auth:m}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{doc:a,getDoc:s,updateDoc:l,serverTimestamp:c}=await p(async()=>{const{doc:y,getDoc:m,updateDoc:D,serverTimestamp:z}=await import("./index.esm-DdZh2hq1.js");return{doc:y,getDoc:m,updateDoc:D,serverTimestamp:z}},__vite__mapDeps([7,6])),d=await this.waitForFirebaseAuth();if(!d)throw new Error("User not authenticated");const g=a(n,"datasets",e),P=await s(g);if(!P.exists())throw new Error("Dataset not found");const j=P.data(),{doc:v}=await p(async()=>{const{doc:y}=await import("./index.esm-DdZh2hq1.js");return{doc:y}},__vite__mapDeps([7,6])),b=(await s(v(n,"users",d.uid))).data();let h=b==null?void 0:b.organizationId;if(!h)try{const y=localStorage.getItem("auth_user");if(y){const m=JSON.parse(y);h=(m==null?void 0:m.organizationId)||((r=m==null?void 0:m.teamMemberData)==null?void 0:r.organizationId)}}catch(y){console.warn("⚠️ [CloudProjectIntegration] Could not get organization ID from localStorage:",y)}if(h||(h=d.uid),console.log("🔍 [CloudProjectIntegration] Authorization check:",{datasetId:e,currentUserId:d.uid,datasetOrganizationId:j.organizationId,userOrganizationId:h,userData:b}),!(j.organizationId===h||j.ownerId===d.uid||!j.organizationId))throw console.error("❌ [CloudProjectIntegration] Authorization failed:",{reason:"Organization mismatch",datasetOrganizationId:j.organizationId,userOrganizationId:h,datasetOwnerId:j.ownerId,currentUserId:d.uid}),new Error("Unauthorized: Dataset belongs to different organization");const f={...t,updatedAt:new Date().toISOString(),lastAccessedAt:new Date().toISOString()};(o=f.collectionAssignment)!=null&&o.selectedCollections&&(f.collections=f.collectionAssignment.selectedCollections),delete f.id,delete f.ownerId,delete f.createdAt,console.log("🔄 [CloudProjectIntegration] Updating dataset with data:",f),await l(g,f);const F=(await s(g)).data();return console.log("✅ [CloudProjectIntegration] Dataset updated successfully in Firestore:",e),F}catch(n){throw console.error("❌ [CloudProjectIntegration] Failed to update dataset in Firestore:",n),n}}async getProjectDatasetsFromFirestore(e){var t,r,o,n,i,a;try{console.log("🔍 [CloudProjectIntegration] Getting datasets from Firestore for project:",e);const{db:s,auth:l}=await p(async()=>{const{db:f,auth:T}=await import("./firebase-CF-Jp15v.js").then(F=>F.f);return{db:f,auth:T}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{collection:c,query:d,where:g,getDocs:P,doc:j,getDoc:v}=await p(async()=>{const{collection:f,query:T,where:F,getDocs:y,doc:m,getDoc:D}=await import("./index.esm-DdZh2hq1.js");return{collection:f,query:T,where:F,getDocs:y,doc:m,getDoc:D}},__vite__mapDeps([7,6]));if(!await this.waitForFirebaseAuth())return console.warn("⚠️ [CloudProjectIntegration] Cannot get project datasets - returning empty list"),[];const b=[],h=d(c(s,"project_datasets"),g("projectId","==",e)),u=await P(h);if(u.empty)return console.log(`✅ [CloudProjectIntegration] No dataset assignments found for project ${e}`),[];console.log(`🔍 [CloudProjectIntegration] Found ${u.size} dataset assignments for project ${e}`);for(const f of u.docs){const F=f.data().datasetId;if(!F){console.warn("⚠️ [CloudProjectIntegration] Project dataset link missing datasetId:",f.id);continue}try{const y=await v(j(s,"datasets",F));if(y.exists()){const m=y.data(),D={id:y.id,name:m.name||"Untitled Dataset",description:m.description||"",projectId:e,type:m.type||"general",status:m.status||"active",createdAt:((o=(r=(t=m.createdAt)==null?void 0:t.toDate)==null?void 0:r.call(t))==null?void 0:o.toISOString())||m.createdAt||new Date().toISOString(),updatedAt:((a=(i=(n=m.updatedAt)==null?void 0:n.toDate)==null?void 0:i.call(n))==null?void 0:a.toISOString())||m.updatedAt||new Date().toISOString(),size:m.size||0,recordCount:m.recordCount||0,schema:m.schema||{},tags:m.tags||[],isPublic:m.isPublic||!1,ownerId:m.ownerId,storage:m.storage||{backend:"firestore"},visibility:m.visibility||"private",collections:m.collections||[],collectionAssignment:m.collectionAssignment||null};b.push(D),console.log(`✅ [CloudProjectIntegration] Added dataset "${D.name}" (${D.id}) for project ${e}`)}else console.warn(`⚠️ [CloudProjectIntegration] Dataset ${F} referenced in project_datasets but not found in datasets collection`)}catch(y){console.error(`❌ [CloudProjectIntegration] Failed to fetch dataset ${F}:`,y)}}return b.sort((f,T)=>{const F=new Date(f.createdAt||0).getTime();return new Date(T.createdAt||0).getTime()-F}),console.log(`✅ [CloudProjectIntegration] Successfully loaded ${b.length} datasets for project ${e}`),b}catch(s){return console.error("❌ [CloudProjectIntegration] Failed to get datasets from Firestore:",s),[]}}async getAllDatasetsFromFirestore(e){try{console.log("🔍 [CloudProjectIntegration] Getting all datasets from Firestore with params:",e);const{db:t,auth:r}=await p(async()=>{const{db:h,auth:u}=await import("./firebase-CF-Jp15v.js").then(f=>f.f);return{db:h,auth:u}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{collection:o,query:n,where:i,getDocs:a,orderBy:s}=await p(async()=>{const{collection:h,query:u,where:f,getDocs:T,orderBy:F}=await import("./index.esm-DdZh2hq1.js");return{collection:h,query:u,where:f,getDocs:T,orderBy:F}},__vite__mapDeps([7,6])),l=await this.waitForFirebaseAuth();if(!l)return console.warn("⚠️ [CloudProjectIntegration] Cannot get all datasets - returning empty list"),[];const{doc:c,getDoc:d}=await p(async()=>{const{doc:h,getDoc:u}=await import("./index.esm-DdZh2hq1.js");return{doc:h,getDoc:u}},__vite__mapDeps([7,6])),P=(await d(c(t,"users",l.uid))).data(),j=(P==null?void 0:P.organizationId)||(e==null?void 0:e.organizationId);let v=n(o(t,"datasets"),i("status","==","ACTIVE"),s("updatedAt","desc"));j&&(v=n(o(t,"datasets"),i("organizationId","==",j),i("status","==","ACTIVE"),s("updatedAt","desc")));let b=(await a(v)).docs.map(h=>({...h.data(),id:h.id}));if(e!=null&&e.visibility&&(b=b.filter(h=>h.visibility===e.visibility)),e!=null&&e.query){const h=e.query.toLowerCase();b=b.filter(u=>u.name.toLowerCase().includes(h)||u.description&&u.description.toLowerCase().includes(h))}return console.log(`✅ [CloudProjectIntegration] Found ${b.length} datasets`),b}catch(t){return console.error("❌ [CloudProjectIntegration] Failed to get all datasets from Firestore:",t),[]}}async getAllOrganizationDatasets(){try{return console.log("🔍 [CloudProjectIntegration] Getting all datasets for organization"),this.isWebOnlyMode()?(console.log("🔍 [CloudProjectIntegration] WebOnly mode - fetching all organization datasets from Firestore"),await this.getAllDatasetsFromFirestore()):(console.log("🔄 [CloudProjectIntegration] Non-webonly mode detected, falling back to Firestore"),await this.getAllDatasetsFromFirestore())}catch(e){return console.error("❌ [CloudProjectIntegration] Failed to get organization datasets:",e),[]}}async assignDatasetToProjectInFirestore(e,t){var r,o;try{console.log("🔍 [CloudProjectIntegration] Assigning dataset to project in Firestore:",{projectId:e,datasetId:t});const{db:n}=await p(async()=>{const{db:y}=await import("./firebase-CF-Jp15v.js").then(m=>m.f);return{db:y}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{doc:i,updateDoc:a,getDoc:s,collection:l,addDoc:c,query:d,where:g,getDocs:P}=await p(async()=>{const{doc:y,updateDoc:m,getDoc:D,collection:z,addDoc:B,query:x,where:G,getDocs:H}=await import("./index.esm-DdZh2hq1.js");return{doc:y,updateDoc:m,getDoc:D,collection:z,addDoc:B,query:x,where:G,getDocs:H}},__vite__mapDeps([7,6])),j=i(n,"datasets",t),v=await s(j);if(!v.exists())throw new Error("Dataset not found");const w=v.data();console.log("🔍 [CloudProjectIntegration] Dataset data:",{id:t,name:w==null?void 0:w.name,collections:w==null?void 0:w.collections,collectionAssignment:w==null?void 0:w.collectionAssignment});const b=i(n,"projects",e),h=await s(b);if(!h.exists())throw new Error("Project not found");const u=h.data(),f=(u==null?void 0:u.organizationId)||(u==null?void 0:u.organization_id);console.log("🔍 [CloudProjectIntegration] Project data:",{id:e,name:u==null?void 0:u.name,organizationId:f}),await a(j,{projectId:e,updatedAt:new Date().toISOString()});const T=d(l(n,"project_datasets"),g("projectId","==",e),g("datasetId","==",t)),F=await P(T);if(F.empty){console.log("🔍 [CloudProjectIntegration] Creating new dataset assignment with collection data");const y=(w==null?void 0:w.collections)||((o=w==null?void 0:w.collectionAssignment)==null?void 0:o.selectedCollections)||[];console.log("🔍 [CloudProjectIntegration] Extracted collections for assignment:",y);const m={projectId:e,datasetId:t,addedByUserId:(w==null?void 0:w.ownerId)||"system",addedAt:new Date().toISOString(),createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),assignedCollections:y,collectionAssignment:{selectedCollections:y,assignmentMode:"EXCLUSIVE",priority:1,routingEnabled:!0},organizationId:f,tenantId:f,isActive:!0};await c(l(n,"project_datasets"),m),console.log("✅ [CloudProjectIntegration] Created new dataset assignment with collection data")}else{console.log("⚠️ [CloudProjectIntegration] Dataset already assigned to project, updating existing assignment");const y=F.docs[0],m=y.data(),D=(w==null?void 0:w.collections)||((r=w==null?void 0:w.collectionAssignment)==null?void 0:r.selectedCollections)||[];await a(y.ref,{assignedCollections:D,collectionAssignment:{selectedCollections:D,assignmentMode:"EXCLUSIVE",priority:1,routingEnabled:!0},organizationId:f,tenantId:f,isActive:!0,updatedAt:new Date().toISOString()}),console.log("✅ [CloudProjectIntegration] Updated existing dataset assignment with collection data")}await a(b,{updatedAt:new Date().toISOString(),lastAccessedAt:new Date().toISOString()}),console.log("✅ [CloudProjectIntegration] Dataset assigned to project successfully in Firestore")}catch(n){throw console.error("❌ [CloudProjectIntegration] Failed to assign dataset to project in Firestore:",n),n}}async getLicensedTeamMembers(e){return await this.serviceFactory.getTeamMemberService().getLicensedTeamMembers(e)}async getProjectTeamMembers(e){return await this.serviceFactory.getTeamMemberService().getProjectTeamMembers(e)}async addTeamMemberToProject(e,t,r=S.MEMBER){await this.serviceFactory.getTeamMemberService().addTeamMemberToProject(e,t,r)}async removeTeamMemberFromProject(e,t){await this.serviceFactory.getTeamMemberService().removeTeamMemberFromProject(e,t)}async updateTeamMemberRole(e,t,r){await this.serviceFactory.getTeamMemberService().updateTeamMemberRole(e,t,r)}async validateTeamMemberCredentials(e,t){return await this.serviceFactory.getTeamMemberService().validateTeamMemberCredentials(e,t)}setAuthTokenCallback(e){this.authTokenCallback=e}setAuthToken(e){console.log("Setting auth token:",e),typeof localStorage<"u"&&localStorage.setItem("auth_token",e),this.authTokenCallback&&this.authTokenCallback()}cleanDocumentData(e){const t={};for(const[r,o]of Object.entries(e))if(o!==void 0){if(o===null){t[r]=null;continue}if(typeof o=="object"&&!Array.isArray(o)&&!(o instanceof Date)){t[r]=this.cleanDocumentData(o);continue}t[r]=o}return t}async waitForFirebaseAuth(e=5e3){const{auth:t}=await p(async()=>{const{auth:o}=await import("./firebase-CF-Jp15v.js").then(n=>n.f);return{auth:o}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{onAuthStateChanged:r}=await p(async()=>{const{onAuthStateChanged:o}=await import("./index.esm-e-DuI42t.js");return{onAuthStateChanged:o}},__vite__mapDeps([8,6]));return t.currentUser?t.currentUser:(console.log("⏳ [CloudProjectIntegration] Waiting for Firebase Auth initialization..."),new Promise(o=>{const n=setTimeout(()=>{console.warn("⚠️ [CloudProjectIntegration] Firebase Auth timeout after waiting"),o(null)},e),i=r(t,a=>{clearTimeout(n),i(),a?console.log("✅ [CloudProjectIntegration] Firebase Auth ready, user authenticated:",a.email):console.log("ℹ️ [CloudProjectIntegration] Firebase Auth ready, but no user authenticated"),o(a)})}))}};I(O,"instance");let U=O;const W=U.getInstance();typeof window<"u"&&(window.cloudProjectIntegration=W);const K=Object.freeze(Object.defineProperty({__proto__:null,cloudProjectIntegration:W},Symbol.toStringTag,{value:"Module"}));export{K as C,S as T,L as a,W as c};
