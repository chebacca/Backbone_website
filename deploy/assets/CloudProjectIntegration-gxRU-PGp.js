const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-4l-ei2Ke.js","assets/index-CPsV862a.js","assets/mui-CbRkNlUa.js","assets/vendor-CjD1bmmO.js","assets/stripe-DmMyeq9m.js","assets/index-CBai7h7s.css","assets/index.esm-D7ujsXeY.js","assets/index.esm-DonjM_pP.js","assets/index.esm-D2YDx4vs.js"])))=>i.map(i=>d[i]);
var $=Object.defineProperty;var I=(m,e,r)=>e in m?$(m,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):m[e]=r;var h=(m,e,r)=>I(m,typeof e!="symbol"?e+"":e,r);import{_ as f}from"./index-CPsV862a.js";import"./mui-CbRkNlUa.js";import"./vendor-CjD1bmmO.js";import"./stripe-DmMyeq9m.js";const y=class y{constructor(){h(this,"db");h(this,"auth")}static arrayUnion(e){return{_method:"arrayUnion",value:e}}static arrayRemove(e){return{_method:"arrayRemove",value:e}}static getInstance(){return y.instance||(y.instance=new y),y.instance}async initialize(){const e=await f(()=>import("./firebase-4l-ei2Ke.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=e.db,this.auth=e.auth}getCurrentUser(){var e;return(e=this.auth)==null?void 0:e.currentUser}async getDocumentById(e,r){try{const{doc:t,getDoc:a}=await f(async()=>{const{doc:u,getDoc:l}=await import("./index.esm-DonjM_pP.js");return{doc:u,getDoc:l}},__vite__mapDeps([7,6])),n=t(this.db,e,r),o=await a(n);if(o.exists()){const u=o.data();return{id:o.id,...this.convertFirestoreDates(u)}}return null}catch(t){return console.error(`❌ [FirestoreAdapter] Error getting document ${r} from ${e}:`,t),null}}async queryDocuments(e,r=[]){try{const{collection:t,query:a,where:n,getDocs:o}=await f(async()=>{const{collection:c,query:d,where:T,getDocs:P}=await import("./index.esm-DonjM_pP.js");return{collection:c,query:d,where:T,getDocs:P}},__vite__mapDeps([7,6])),u=t(this.db,e);let l;if(r.length>0){let c=[];for(const d of r)c.push(n(d.field,d.operator,d.value));l=a(u,...c)}else l=a(u);const i=await o(l),s=[];return i.forEach(c=>{const d=c.data();s.push({id:c.id,...this.convertFirestoreDates(d)})}),s}catch(t){return console.error(`❌ [FirestoreAdapter] Error querying ${e}:`,t),[]}}async createDocument(e,r){try{const{collection:t,addDoc:a}=await f(async()=>{const{collection:u,addDoc:l}=await import("./index.esm-DonjM_pP.js");return{collection:u,addDoc:l}},__vite__mapDeps([7,6])),n=this.cleanDocumentData({...r,createdAt:new Date,updatedAt:new Date});return{id:(await a(t(this.db,e),n)).id,...n}}catch(t){return console.error(`❌ [FirestoreAdapter] Error creating document in ${e}:`,t),null}}async updateDocumentWithArrayOps(e,r,t){try{const{doc:a,updateDoc:n}=await f(async()=>{const{doc:s,updateDoc:c}=await import("./index.esm-DonjM_pP.js");return{doc:s,updateDoc:c}},__vite__mapDeps([7,6])),{arrayUnion:o,arrayRemove:u}=await f(async()=>{const{arrayUnion:s,arrayRemove:c}=await import("./index.esm-DonjM_pP.js");return{arrayUnion:s,arrayRemove:c}},__vite__mapDeps([7,6])),l={};for(const[s,c]of Object.entries(t))c&&typeof c=="object"&&c._method==="arrayUnion"?l[s]=o(c.value):c&&typeof c=="object"&&c._method==="arrayRemove"?l[s]=u(c.value):l[s]=c;const i=this.cleanDocumentData({...l,updatedAt:new Date});return await n(a(this.db,e,r),i),!0}catch(a){return console.error(`❌ [FirestoreAdapter] Error updating document ${r} in ${e} with array ops:`,a),!1}}async updateDocument(e,r,t){try{const{doc:a,updateDoc:n}=await f(async()=>{const{doc:u,updateDoc:l}=await import("./index.esm-DonjM_pP.js");return{doc:u,updateDoc:l}},__vite__mapDeps([7,6])),o=this.cleanDocumentData({...t,updatedAt:new Date});return await n(a(this.db,e,r),o),!0}catch(a){return console.error(`❌ [FirestoreAdapter] Error updating document ${r} in ${e}:`,a),!1}}async deleteDocument(e,r){try{const{doc:t,deleteDoc:a}=await f(async()=>{const{doc:n,deleteDoc:o}=await import("./index.esm-DonjM_pP.js");return{doc:n,deleteDoc:o}},__vite__mapDeps([7,6]));return await a(t(this.db,e,r)),!0}catch(t){return console.error(`❌ [FirestoreAdapter] Error deleting document ${r} from ${e}:`,t),!1}}cleanDocumentData(e){const r={};for(const[t,a]of Object.entries(e))if(a!==void 0){if(a===null){r[t]=null;continue}if(typeof a=="object"&&!Array.isArray(a)&&!(a instanceof Date)){r[t]=this.cleanDocumentData(a);continue}r[t]=a}return r}convertFirestoreDates(e){const r={};for(const[t,a]of Object.entries(e))a&&typeof a=="object"&&a.toDate&&typeof a.toDate=="function"?r[t]=a.toDate().toISOString():a&&typeof a=="object"&&!Array.isArray(a)?r[t]=this.convertFirestoreDates(a):r[t]=a;return r}};h(y,"instance");let A=y;class D{constructor(e){h(this,"config");h(this,"firestoreAdapter");this.config=e,this.firestoreAdapter=A.getInstance()}isWebOnlyMode(){return this.config.isWebOnlyMode}getConfig(){return this.config}async apiRequest(e,r="GET",t,a){try{const o=`${this.config.apiBaseUrl||"/api"}/${e.startsWith("/")?e.substring(1):e}`,u={"Content-Type":"application/json",...a},l={method:r,headers:u,credentials:"include"};t&&(r==="POST"||r==="PATCH")&&(l.body=JSON.stringify(t));const i=await fetch(o,l);if(!i.ok)throw new Error(`API request failed: ${i.status} ${i.statusText}`);const s=i.headers.get("content-type");return s&&s.includes("application/json")?await i.json():await i.text()}catch(n){throw console.error(`❌ [BaseService] API request failed for ${e}:`,n),n}}handleError(e,r){console.error(`❌ [${this.constructor.name}] Error in ${r}:`,e)}}var g=(m=>(m.ADMIN="ADMIN",m.MEMBER="MEMBER",m.VIEWER="VIEWER",m.OWNER="OWNER",m.DO_ER="DO_ER",m))(g||{}),F=(m=>(m.ACTIVE="active",m.ARCHIVED="archived",m.DELETED="deleted",m.DRAFT="draft",m))(F||{});const w=class w extends D{constructor(e){super(e)}static getInstance(e){return w.instance||(w.instance=new w(e)),w.instance}async getProjects(){try{if(console.log("🚀 [ProjectService] Getting all projects"),this.isWebOnlyMode())return await this.getProjectsFromFirestore();try{return await this.apiRequest("projects")}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.getProjectsFromFirestore()}}catch(e){return this.handleError(e,"getProjects"),[]}}async getProject(e){try{if(console.log(`🚀 [ProjectService] Getting project: ${e}`),this.isWebOnlyMode())return await this.getProjectFromFirestore(e);try{return await this.apiRequest(`projects/${e}`)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.getProjectFromFirestore(e)}}catch(r){return this.handleError(r,`getProject(${e})`),null}}async createProject(e){try{if(console.log("🚀 [ProjectService] Creating new project"),this.isWebOnlyMode())return await this.createProjectInFirestore(e);try{return await this.apiRequest("projects","POST",e)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.createProjectInFirestore(e)}}catch(r){return this.handleError(r,"createProject"),null}}async updateProject(e,r){try{if(console.log(`🚀 [ProjectService] Updating project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,r);try{return await this.apiRequest(`projects/${e}`,"PATCH",r)}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,r)}}catch(t){return this.handleError(t,`updateProject(${e})`),null}}async archiveProject(e){try{if(console.log(`🚀 [ProjectService] Archiving project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,{status:F.ARCHIVED})!==null;try{return await this.apiRequest(`projects/${e}/archive`,"POST"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,{status:F.ARCHIVED})!==null}}catch(r){return this.handleError(r,`archiveProject(${e})`),!1}}async restoreProject(e){try{if(console.log(`🚀 [ProjectService] Restoring project: ${e}`),this.isWebOnlyMode())return await this.updateProjectInFirestore(e,{status:F.ACTIVE})!==null;try{return await this.apiRequest(`projects/${e}/restore`,"POST"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.updateProjectInFirestore(e,{status:F.ACTIVE})!==null}}catch(r){return this.handleError(r,`restoreProject(${e})`),!1}}async deleteProject(e){try{if(console.log(`🗑️ [ProjectService] Deleting project: ${e}`),this.isWebOnlyMode())return await this.deleteProjectFromFirestore(e);try{return await this.apiRequest(`projects/${e}`,"DELETE"),!0}catch{return console.warn("⚠️ [ProjectService] API request failed, falling back to Firestore"),await this.deleteProjectFromFirestore(e)}}catch(r){return this.handleError(r,`deleteProject(${e})`),!1}}async getProjectsFromFirestore(){try{console.log("🔍 [ProjectService] Getting projects from Firestore"),await this.firestoreAdapter.initialize();const e=this.firestoreAdapter.getCurrentUser();if(!e)return console.log("❌ [ProjectService] No authenticated user found"),[];let r=null;try{const t=await this.firestoreAdapter.getDocumentById("users",e.uid);if(t&&t.organizationId)r=t.organizationId,console.log("✅ [ProjectService] Found organization ID from user document:",r);else{const a=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:e.email}]);a.length>0&&a[0].organizationId&&(r=a[0].organizationId,console.log("✅ [ProjectService] Found organization ID from user email query:",r))}}catch(t){console.warn("⚠️ [ProjectService] Error getting user organization:",t)}if(!r)return console.log("❌ [ProjectService] No organization ID found for user"),[];try{const t=await this.firestoreAdapter.queryDocuments("projects",[{field:"organizationId",operator:"==",value:r}]);console.log(`✅ [ProjectService] Found ${t.length} projects for organization: ${r}`),console.log("🔍 [ProjectService] Raw projects from Firestore:",t);const a=t.sort((n,o)=>{const u=n.lastAccessedAt?new Date(n.lastAccessedAt).getTime():0;return(o.lastAccessedAt?new Date(o.lastAccessedAt).getTime():0)-u});return console.log("🔍 [ProjectService] Sorted projects:",a),a}catch(t){if(t.message&&t.message.includes("requires an index"))return console.warn("⚠️ [ProjectService] Missing Firestore index detected. Projects query requires composite index."),console.warn("📋 Required index: organizationId (Ascending) + createdAt (Ascending) + __name__ (Ascending)"),console.warn("🔗 Create index at: https://console.firebase.google.com/v1/r/project/backbone-logic/firestore/indexes"),console.warn("📝 Note: Index creation can take several minutes. Returning empty array for now."),[];throw t}}catch(e){return this.handleError(e,"getProjectsFromFirestore"),[]}}async getProjectFromFirestore(e){try{return console.log(`🔍 [ProjectService] Getting project from Firestore: ${e}`),await this.firestoreAdapter.initialize(),await this.firestoreAdapter.getDocumentById("projects",e)}catch(r){return this.handleError(r,`getProjectFromFirestore(${e})`),null}}async createProjectInFirestore(e){try{console.log("🔍 [ProjectService] Creating project in Firestore"),await this.firestoreAdapter.initialize();const r=this.firestoreAdapter.getCurrentUser();if(!r)return console.warn("⚠️ [ProjectService] No authenticated user for project creation"),null;const t={...e,ownerId:e.ownerId||r.uid,status:e.status||F.ACTIVE,teamMembers:e.teamMembers||[]};return await this.firestoreAdapter.createDocument("projects",t)}catch(r){return this.handleError(r,"createProjectInFirestore"),null}}async updateProjectInFirestore(e,r){try{console.log(`🔍 [ProjectService] Updating project in Firestore: ${e}`),await this.firestoreAdapter.initialize();const t=await this.firestoreAdapter.getDocumentById("projects",e);return t?await this.firestoreAdapter.updateDocument("projects",e,r)?{...t,...r,id:e}:null:(console.warn(`⚠️ [ProjectService] Project not found: ${e}`),null)}catch(t){return this.handleError(t,`updateProjectInFirestore(${e})`),null}}async deleteProjectFromFirestore(e){try{return console.log(`🗑️ [ProjectService] Deleting project from Firestore: ${e}`),await this.firestoreAdapter.initialize(),await this.firestoreAdapter.getDocumentById("projects",e)?await this.firestoreAdapter.deleteDocument("projects",e)?(console.log(`✅ [ProjectService] Project successfully deleted from Firestore: ${e}`),!0):(console.warn(`⚠️ [ProjectService] Failed to delete project from Firestore: ${e}`),!1):(console.warn(`⚠️ [ProjectService] Project not found for deletion: ${e}`),!1)}catch(r){return this.handleError(r,`deleteProjectFromFirestore(${e})`),!1}}};h(w,"instance");let M=w;const b=class b extends D{constructor(e){super(e)}static getInstance(e){return b.instance||(b.instance=new b(e)),b.instance}async getLicensedTeamMembers(e){try{if(console.log("🚀 [TeamMemberService] Getting licensed team members with options:",e),this.isWebOnlyMode())return await this.getLicensedTeamMembersFromFirestore(e);const r=new URLSearchParams;e!=null&&e.search&&r.append("search",e.search),e!=null&&e.excludeProjectId&&r.append("excludeProjectId",e.excludeProjectId);const t=`team-members/licensed${r.toString()?`?${r.toString()}`:""}`;try{return await this.apiRequest(t)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.getLicensedTeamMembersFromFirestore(e)}}catch(r){return this.handleError(r,"getLicensedTeamMembers"),[]}}async getProjectTeamMembers(e){try{if(console.log("🚀 [TeamMemberService] Getting team members for project:",e),this.isWebOnlyMode())return await this.getProjectTeamMembersFromFirestore(e);try{return await this.apiRequest(`projects/${e}/team-members`)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.getProjectTeamMembersFromFirestore(e)}}catch(r){return this.handleError(r,`getProjectTeamMembers(${e})`),[]}}async addTeamMemberToProject(e,r,t=g.DO_ER){try{if(console.log("🚀 [TeamMemberService] Adding team member to project:",{projectId:e,teamMemberId:r,role:t}),this.isWebOnlyMode())return await this.addTeamMemberToProjectInFirestore(e,r,t);try{return await this.apiRequest(`projects/${e}/team-members`,"POST",{teamMemberId:r,role:t}),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.addTeamMemberToProjectInFirestore(e,r,t)}}catch(a){return this.handleError(a,`addTeamMemberToProject(${e}, ${r})`),!1}}async removeTeamMemberFromProject(e,r){try{if(console.log("🚀 [TeamMemberService] Removing team member from project:",{projectId:e,teamMemberId:r}),this.isWebOnlyMode())return await this.removeTeamMemberFromProjectInFirestore(e,r);try{return await this.apiRequest(`projects/${e}/team-members/${r}`,"DELETE"),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.removeTeamMemberFromProjectInFirestore(e,r)}}catch(t){return this.handleError(t,`removeTeamMemberFromProject(${e}, ${r})`),!1}}async updateTeamMemberRole(e,r,t){try{if(console.log("🚀 [TeamMemberService] Updating team member role:",{projectId:e,teamMemberId:r,role:t}),this.isWebOnlyMode())return await this.updateTeamMemberRoleInFirestore(e,r,t);try{return await this.apiRequest(`projects/${e}/team-members/${r}/role`,"PATCH",{role:t}),!0}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.updateTeamMemberRoleInFirestore(e,r,t)}}catch(a){return this.handleError(a,`updateTeamMemberRole(${e}, ${r})`),!1}}async validateTeamMemberCredentials(e,r){try{if(console.log("🚀 [TeamMemberService] Validating team member credentials for:",e),this.isWebOnlyMode())return await this.validateTeamMemberCredentialsFromFirestore(e,r);try{return await this.apiRequest("team-members/validate-credentials","POST",{email:e,password:r})}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.validateTeamMemberCredentialsFromFirestore(e,r)}}catch(t){return this.handleError(t,"validateTeamMemberCredentials"),{isValid:!1,error:"Authentication failed"}}}async refreshTeamMembers(){try{console.log("🔄 [TeamMemberService] Refreshing team member data..."),console.log("✅ [TeamMemberService] Team member data refresh initiated")}catch(e){console.error("❌ [TeamMemberService] Failed to refresh team member data:",e)}}async createTeamMemberWithFirebaseAuth(e){try{if(console.log("🚀 [TeamMemberService] Creating team member with Firebase Auth:",e),this.isWebOnlyMode())return await this.createTeamMemberWithFirebaseAuthInFirestore(e);try{return await this.apiRequest("team-members/create","POST",e)}catch{return console.warn("⚠️ [TeamMemberService] API request failed, falling back to Firestore"),await this.createTeamMemberWithFirebaseAuthInFirestore(e)}}catch(r){return this.handleError(r,"createTeamMemberWithFirebaseAuth"),{success:!1,error:"Failed to create team member with Firebase Auth"}}}async getLicensedTeamMembersFromFirestore(e){try{console.log("🔍 [TeamMemberService] Fetching licensed team members from Firestore with options:",e),await this.firestoreAdapter.initialize();const r=this.firestoreAdapter.getCurrentUser();if(!r)return console.log("❌ [TeamMemberService] No authenticated user found"),[];let t=null;try{const i=await this.firestoreAdapter.getDocumentById("users",r.uid);if(i&&i.organizationId)t=i.organizationId,console.log("✅ [TeamMemberService] Found organization ID from user document:",t);else{const s=await this.firestoreAdapter.queryDocuments("users",[{field:"email",operator:"==",value:r.email}]);s.length>0&&s[0].organizationId&&(t=s[0].organizationId,console.log("✅ [TeamMemberService] Found organization ID from user email query:",t))}}catch(i){console.warn("⚠️ [TeamMemberService] Error getting user organization:",i)}if(!t)return console.log("❌ [TeamMemberService] No organization ID found for user"),[];console.log("🏢 [TeamMemberService] Fetching team members for organization:",t);const a=await this.firestoreAdapter.queryDocuments("teamMembers",[{field:"organizationId",operator:"==",value:t}]);console.log(`🔍 [TeamMemberService] Raw team members found: ${a.length}`);const n=a.filter(i=>{var c,d;const s=((d=(c=i.status)==null?void 0:c.toUpperCase)==null?void 0:d.call(c))||i.status||"UNKNOWN";return s!=="ACTIVE"&&s!=="active"?(console.log(`⚠️ [TeamMemberService] Excluding team member ${i.email} with status: ${s}`),!1):i.isActive===!1?(console.log(`⚠️ [TeamMemberService] Excluding team member ${i.email} with isActive: false`),!1):i.revokedAt||i.removedAt||i.suspendedAt?(console.log(`⚠️ [TeamMemberService] Excluding team member ${i.email} with revocation/removal dates`),!1):!0});console.log(`✅ [TeamMemberService] Active team members after filtering: ${n.length}`);let o=[];if(e!=null&&e.excludeProjectId)try{o=(await this.getProjectTeamMembersFromFirestore(e.excludeProjectId)).map(s=>s.teamMemberId),console.log(`🔍 [TeamMemberService] Excluding ${o.length} already assigned team members`)}catch(i){console.warn("⚠️ [TeamMemberService] Failed to get assigned team members:",i)}const l=n.filter(i=>{if(o.includes(i.id))return!1;if(e!=null&&e.search){const s=e.search.toLowerCase(),c=(i.name||"").toLowerCase(),d=(i.firstName||"").toLowerCase(),T=(i.lastName||"").toLowerCase(),P=(i.email||"").toLowerCase();return c.includes(s)||d.includes(s)||T.includes(s)||P.includes(s)}return!0}).map(i=>{let s=i.name;s||(i.firstName&&i.lastName?s=`${i.firstName} ${i.lastName}`:i.firstName?s=i.firstName:i.lastName?s=i.lastName:i.email?s=i.email.split("@")[0].replace(/[._-]/g," ").split(" ").map(P=>P.charAt(0).toUpperCase()+P.slice(1).toLowerCase()).join(" "):s="Unknown User");let c=i.licenseType;return c||(c="professional"),{...i,name:s,licenseType:c,status:"active",isActive:!0}});return l.sort((i,s)=>{const c=(i.name||"").toLowerCase(),d=(s.name||"").toLowerCase();return c.localeCompare(d)}),console.log(`✅ [TeamMemberService] Final filtered and mapped team members: ${l.length}`),l}catch(r){return this.handleError(r,"getLicensedTeamMembersFromFirestore"),[]}}async getProjectTeamMembersFromFirestore(e){try{console.log("🔍 [TeamMemberService] Fetching team members from Firestore for project:",e),await this.firestoreAdapter.initialize();const r=[],t=await this.firestoreAdapter.getDocumentById("projects",e);if(t){const n=t.teamMembers||[];for(const o of n)r.push({id:o.userId||o.id,teamMemberId:o.userId||o.id,projectId:e,role:o.role||"member",permissions:o.permissions||["read"],assignedAt:o.assignedAt||new Date().toISOString(),isActive:o.isActive!==!1,email:o.email,name:o.name||o.email,status:o.status||"active"})}try{const n=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e}]);for(const o of n)r.find(u=>u.teamMemberId===o.teamMemberId)||r.push(o)}catch{console.log("ℹ️ [TeamMemberService] projectTeamMembers collection not found or accessible")}const a=[];for(const n of r)try{const o=await this.firestoreAdapter.getDocumentById("teamMembers",n.teamMemberId);o?a.push({...n,name:o.name||o.email||n.name||"Unnamed User",email:o.email||n.email||"No email",teamMember:o}):a.push(n)}catch(o){console.warn("⚠️ [TeamMemberService] Failed to get full profile for team member:",n.teamMemberId,o),a.push(n)}return console.log(`✅ [TeamMemberService] Found ${a.length} team members for project ${e}`),a}catch(r){return this.handleError(r,`getProjectTeamMembersFromFirestore(${e})`),[]}}async addTeamMemberToProjectInFirestore(e,r,t){try{console.log("🔍 [TeamMemberService] Adding team member to project in Firestore:",{projectId:e,teamMemberId:r,role:t}),await this.firestoreAdapter.initialize();const a=await this.firestoreAdapter.getDocumentById("teamMembers",r);if(!a)return console.warn("⚠️ [TeamMemberService] Team member not found:",r),!1;if(t===g.ADMIN&&(await this.getProjectTeamMembersFromFirestore(e)).some(i=>i.role===g.ADMIN))throw console.warn("⚠️ [TeamMemberService] Only one Admin is allowed per project"),new Error("Only one Admin is allowed per project. Please remove the existing Admin first.");const n={projectId:e,teamMemberId:r,role:t,assignedBy:"system",assignedAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isActive:!0,teamMemberName:a.name||"Unknown User",teamMemberEmail:a.email||"No email",teamMemberRole:a.role||"MEMBER",teamMemberLicenseType:a.licenseType||"BASIC"};return await this.firestoreAdapter.createDocument("projectTeamMembers",n)!==null}catch(a){return this.handleError(a,`addTeamMemberToProjectInFirestore(${e}, ${r})`),!1}}async removeTeamMemberFromProjectInFirestore(e,r){try{console.log("🔍 [TeamMemberService] Removing team member from project in Firestore:",{projectId:e,teamMemberId:r}),await this.firestoreAdapter.initialize();const t=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e},{field:"teamMemberId",operator:"==",value:r}]);return t.length===0?(console.warn("⚠️ [TeamMemberService] Team member not found in project"),!1):await this.firestoreAdapter.deleteDocument("projectTeamMembers",t[0].id)}catch(t){return this.handleError(t,`removeTeamMemberFromProjectInFirestore(${e}, ${r})`),!1}}async updateTeamMemberRoleInFirestore(e,r,t){try{console.log("🔍 [TeamMemberService] Updating team member role in Firestore:",{projectId:e,teamMemberId:r,role:t}),await this.firestoreAdapter.initialize();const a=await this.firestoreAdapter.queryDocuments("projectTeamMembers",[{field:"projectId",operator:"==",value:e},{field:"teamMemberId",operator:"==",value:r}]);if(a.length===0)return console.warn("⚠️ [TeamMemberService] Team member not found in project"),!1;if(t===g.ADMIN&&(await this.getProjectTeamMembersFromFirestore(e)).some(l=>l.role===g.ADMIN&&l.teamMemberId!==r))throw console.warn("⚠️ [TeamMemberService] Only one Admin is allowed per project"),new Error("Only one Admin is allowed per project. Please remove the existing Admin first.");return await this.firestoreAdapter.updateDocument("projectTeamMembers",a[0].id,{role:t,updatedAt:new Date().toISOString()})}catch(a){return this.handleError(a,`updateTeamMemberRoleInFirestore(${e}, ${r})`),!1}}async validateTeamMemberCredentialsFromFirestore(e,r){try{await this.firestoreAdapter.initialize();const t=await this.firestoreAdapter.queryDocuments("teamMembers",[{field:"email",operator:"==",value:e}]);if(t.length===0)return{isValid:!1,error:"Team member not found"};const a=t[0];return r.length<1?{isValid:!1,error:"Password is required"}:{isValid:!0,teamMember:a,projectAccess:[]}}catch(t){return this.handleError(t,"validateTeamMemberCredentialsFromFirestore"),{isValid:!1,error:"Authentication failed"}}}async createTeamMemberWithFirebaseAuthInFirestore(e){try{console.log("🔍 [TeamMemberService] Creating team member with Firebase Auth in Firestore:",e),await this.firestoreAdapter.initialize();const{auth:r}=await f(async()=>{const{auth:s}=await import("./firebase-4l-ei2Ke.js");return{auth:s}},__vite__mapDeps([0,1,2,3,4,5,6,7,8])),{createUserWithEmailAndPassword:t}=await f(async()=>{const{createUserWithEmailAndPassword:s}=await import("./index.esm-D2YDx4vs.js");return{createUserWithEmailAndPassword:s}},__vite__mapDeps([8,6])),a=e.temporaryPassword||this.generateSecurePassword();let n;try{n=(await t(r,e.email,a)).user,console.log("✅ [TeamMemberService] Firebase Auth user created successfully:",n.uid)}catch(s){if(s.code==="auth/email-already-in-use")return{success:!1,error:"User with this email already exists in Firebase Authentication"};throw s}const o={id:n.uid,email:e.email,firstName:e.firstName,lastName:e.lastName,name:`${e.firstName} ${e.lastName}`,licenseType:e.licenseType||"PROFESSIONAL",status:"ACTIVE",organizationId:e.organizationId,department:e.department,role:e.role||"MEMBER",firebaseUid:n.uid,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isActive:!0},u={id:n.uid,email:e.email,name:`${e.firstName} ${e.lastName}`,firstName:e.firstName,lastName:e.lastName,role:"TEAM_MEMBER",firebaseUid:n.uid,isEmailVerified:!1,twoFactorEnabled:!1,twoFactorBackupCodes:[],privacyConsent:[],marketingConsent:!1,dataProcessingConsent:!1,identityVerified:!1,kycStatus:"PENDING",isTeamMember:!0,organizationId:e.organizationId,memberRole:e.role||"MEMBER",memberStatus:"ACTIVE",department:e.department,licenseType:e.licenseType||"PROFESSIONAL",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};let l=null,i=null;if(l=await this.firestoreAdapter.createDocument("teamMembers",o),l&&(i=await this.firestoreAdapter.createDocument("users",u)),!l||!i){try{await n.delete(),console.log("🔄 [TeamMemberService] Rolled back Firebase Auth user after Firestore failure")}catch(s){console.error("❌ [TeamMemberService] Failed to rollback Firebase Auth user:",s)}return{success:!1,error:"Failed to create required documents in Firestore"}}return console.log("✅ [TeamMemberService] Team member created successfully in Firestore"),{success:!0,teamMember:o,firebaseUid:n.uid,temporaryPassword:a}}catch(r){return this.handleError(r,"createTeamMemberWithFirebaseAuthInFirestore"),{success:!1,error:(r==null?void 0:r.message)||"Failed to create team member with Firebase Auth"}}}generateSecurePassword(){const r="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";let t="";t+="ABCDEFGHIJKLMNOPQRSTUVWXYZ"[Math.floor(Math.random()*26)],t+="abcdefghijklmnopqrstuvwxyz"[Math.floor(Math.random()*26)],t+="0123456789"[Math.floor(Math.random()*10)],t+="!@#$%^&*"[Math.floor(Math.random()*8)];for(let a=4;a<12;a++)t+=r[Math.floor(Math.random()*r.length)];return t.split("").sort(()=>Math.random()-.5).join("")}};h(b,"instance");let j=b;const v=class v{constructor(){h(this,"config");h(this,"projectService",null);h(this,"teamMemberService",null);this.config={isWebOnlyMode:this.detectWebOnlyMode(),apiBaseUrl:"/api"},this.initializeFirestoreAdapter()}static getInstance(){return v.instance||(v.instance=new v),v.instance}initialize(e){this.config={...this.config,...e},console.log("🔧 [ServiceFactory] Initialized with config:",this.config),this.projectService=null,this.teamMemberService=null}getProjectService(){return this.projectService||(this.projectService=M.getInstance(this.config)),this.projectService}getTeamMemberService(){return this.teamMemberService||(this.teamMemberService=j.getInstance(this.config)),this.teamMemberService}detectWebOnlyMode(){if(typeof window<"u"){const e=new URLSearchParams(window.location.search);if(e.has("webonly"))return e.get("webonly")==="true";const r=localStorage.getItem("webonly_mode");if(r)return r==="true";if(window.ENV&&window.ENV.WEBONLY)return window.ENV.WEBONLY===!0}return!0}async initializeFirestoreAdapter(){try{await A.getInstance().initialize()}catch(e){console.error("❌ [ServiceFactory] Failed to initialize Firestore adapter:",e)}}};h(v,"instance");let S=v;const p=class p{constructor(){h(this,"serviceFactory");h(this,"authTokenCallback",null);this.serviceFactory=S.getInstance(),this.serviceFactory.initialize({isWebOnlyMode:this.isWebOnlyMode()})}static getInstance(){return p.instance||(p.instance=new p),p.instance}isWebOnlyMode(){if(typeof window<"u"){const e=new URLSearchParams(window.location.search);if(e.has("webonly"))return e.get("webonly")==="true";const r=localStorage.getItem("webonly_mode");if(r)return r==="true";if(window.ENV&&window.ENV.WEBONLY)return window.ENV.WEBONLY===!0}return!0}setConfig(e){this.serviceFactory.initialize(e)}async getProjects(){return await this.serviceFactory.getProjectService().getProjects()}async getUserProjects(){return await this.serviceFactory.getProjectService().getProjects()}async getProject(e){return await this.serviceFactory.getProjectService().getProject(e)}async createProject(e){return await this.serviceFactory.getProjectService().createProject(e)}async createCloudProject(e){return await this.serviceFactory.getProjectService().createProject(e)}async createCloudProjectInFirestore(e){return await this.serviceFactory.getProjectService().createProject(e)}async updateProject(e,r){return await this.serviceFactory.getProjectService().updateProject(e,r)}async updateProjectInFirestore(e,r){return await this.serviceFactory.getProjectService().updateProject(e,r)}async archiveProject(e){return await this.serviceFactory.getProjectService().archiveProject(e)}async archiveProjectInFirestore(e){return await this.serviceFactory.getProjectService().archiveProject(e)}async restoreProject(e){return await this.serviceFactory.getProjectService().restoreProject(e)}async deleteProject(e){return await this.serviceFactory.getProjectService().deleteProject(e)}async listDatasets(e){return[]}async createDataset(e){return null}async getProjectDatasets(e){return[]}async assignDatasetToProject(e,r){}async unassignDatasetFromProject(e,r){}async updateDataset(e,r){return null}async deleteDataset(e){return!1}async cleanupCorruptedDatasets(){return{cleaned:0,errors:[]}}async getLicensedTeamMembers(e){return await this.serviceFactory.getTeamMemberService().getLicensedTeamMembers(e)}async getProjectTeamMembers(e){return await this.serviceFactory.getTeamMemberService().getProjectTeamMembers(e)}async addTeamMemberToProject(e,r,t=g.DO_ER){await this.serviceFactory.getTeamMemberService().addTeamMemberToProject(e,r,t)}async removeTeamMemberFromProject(e,r){await this.serviceFactory.getTeamMemberService().removeTeamMemberFromProject(e,r)}async updateTeamMemberRole(e,r,t){await this.serviceFactory.getTeamMemberService().updateTeamMemberRole(e,r,t)}async validateTeamMemberCredentials(e,r){return await this.serviceFactory.getTeamMemberService().validateTeamMemberCredentials(e,r)}setAuthTokenCallback(e){this.authTokenCallback=e}setAuthToken(e){console.log("Setting auth token:",e),typeof localStorage<"u"&&localStorage.setItem("auth_token",e),this.authTokenCallback&&this.authTokenCallback()}cleanDocumentData(e){const r={};for(const[t,a]of Object.entries(e))if(a!==void 0){if(a===null){r[t]=null;continue}if(typeof a=="object"&&!Array.isArray(a)&&!(a instanceof Date)){r[t]=this.cleanDocumentData(a);continue}r[t]=a}return r}};h(p,"instance");let E=p;const R=E.getInstance();typeof window<"u"&&(window.cloudProjectIntegration=R);export{R as cloudProjectIntegration,E as default};
