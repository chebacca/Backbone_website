{"version":3,"mappings":"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","names":["LoginPage","navigate","useNavigate","login","useAuth","setLoading","useLoading","enqueueSnackbar","useSnackbar","showPassword","setShowPassword","useState","error","setError","interimToken","setInterimToken","twoFactorCode","setTwoFactorCode","control","handleSubmit","errors","isSubmitting","useForm","onSubmit","data","user","roleUpper","err","_a","_b","errorMessage","handleTogglePasswordVisibility","jsx","Box","Container","jsxs","motion","Button","ArrowBack","Paper","Typography","Alert","TextField","e","verify2FA","__vitePreload","authService","result","Stack","Controller","field","InputAdornment","Email","Lock","IconButton","VisibilityOff","Visibility","Link","RouterLink","Divider"],"ignoreList":[],"sources":["../../src/pages/auth/LoginPage.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Paper,\n  Typography,\n  TextField,\n  Button,\n  Link,\n  Alert,\n  InputAdornment,\n  IconButton,\n  Divider,\n  Stack,\n} from '@mui/material';\nimport {\n  Visibility,\n  VisibilityOff,\n  Email,\n  Lock,\n  ArrowBack,\n} from '@mui/icons-material';\nimport { useForm, Controller } from 'react-hook-form';\nimport { motion } from 'framer-motion';\nimport { useNavigate, Link as RouterLink } from 'react-router-dom';\nimport { useAuth } from '@/context/AuthContext';\nimport { useLoading } from '@/context/LoadingContext';\nimport { useSnackbar } from 'notistack';\n\ninterface LoginFormData {\n  email: string;\n  password: string;\n}\n\nconst LoginPage: React.FC = () => {\n  const navigate = useNavigate();\n  const { login } = useAuth();\n  const { setLoading } = useLoading();\n  const { enqueueSnackbar } = useSnackbar();\n  \n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [interimToken, setInterimToken] = useState<string | null>(null);\n  const [twoFactorCode, setTwoFactorCode] = useState<string>('');\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm<LoginFormData>({\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    try {\n      setError(null);\n      setLoading(true);\n      \n      const user = await login(data.email, data.password);\n      \n      enqueueSnackbar('Welcome back!', { variant: 'success' });\n      \n      // Redirect based on user role\n      const roleUpper = String(user?.role || '').toUpperCase();\n      if (roleUpper === 'SUPERADMIN') {\n        navigate('/admin');\n      } else {\n        navigate('/dashboard');\n      }\n    } catch (err: any) {\n      // If backend returned 2FA challenge, our auth context currently throws. Use authService directly for 2FA branch.\n      if (err?.details?.requires2FA || err?.requires2FA) {\n        setInterimToken(err?.details?.interimToken || err?.interimToken || null);\n      } else {\n        const errorMessage = err.message || 'Login failed. Please try again.';\n        setError(errorMessage);\n        enqueueSnackbar(errorMessage, { variant: 'error' });\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTogglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  return (\n    <Box\n      sx={{\n        minHeight: '100vh',\n        background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%)',\n        display: 'flex',\n        alignItems: 'center',\n        py: { xs: 4, md: 0 },\n      }}\n    >\n      <Container maxWidth=\"sm\">\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          {/* Back Button */}\n          <Box sx={{ mb: 3 }}>\n            <Button\n              startIcon={<ArrowBack />}\n              onClick={() => navigate('/')}\n              sx={{\n                color: 'rgba(255, 255, 255, 0.7)',\n                '&:hover': {\n                  color: 'primary.main',\n                  backgroundColor: 'rgba(0, 212, 255, 0.1)',\n                },\n              }}\n            >\n              Back to Home\n            </Button>\n          </Box>\n\n          <Paper\n            elevation={10}\n            sx={{\n              p: { xs: 4, md: 6 },\n              backgroundColor: 'background.paper',\n              borderRadius: 3,\n              border: '1px solid rgba(255, 255, 255, 0.1)',\n            }}\n          >\n            {/* Header */}\n            <Box sx={{ textAlign: 'center', mb: 4 }}>\n              <Box\n                sx={{\n                  width: 60,\n                  height: 60,\n                  borderRadius: 2,\n                  background: 'linear-gradient(135deg, #00d4ff 0%, #667eea 100%)',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  mx: 'auto',\n                  mb: 3,\n                }}\n              >\n                <Typography\n                  variant=\"h4\"\n                  sx={{\n                    fontWeight: 700,\n                    color: '#000',\n                  }}\n                >\n                  D\n                </Typography>\n              </Box>\n\n              <Typography\n                variant=\"h4\"\n                sx={{\n                  fontWeight: 600,\n                  mb: 2,\n                  textAlign: 'center',\n                }}\n              >\n                Sign in to your BackboneLogic, Inc. account\n              </Typography>\n              \n              <Typography variant=\"body1\" color=\"text.secondary\">\n                Welcome back! Please sign in to continue.\n              </Typography>\n            </Box>\n\n            {/* Error Alert */}\n            {error && (\n              <Alert severity=\"error\" sx={{ mb: 3 }}>\n                {error}\n              </Alert>\n            )}\n\n            {/* Login Form or 2FA prompt */}\n            {!interimToken ? (\n            <Box component=\"form\" onSubmit={handleSubmit(onSubmit)}>\n              <Stack spacing={3}>\n                <Controller\n                  name=\"email\"\n                  control={control}\n                  rules={{\n                    required: 'Email is required',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                      message: 'Please enter a valid email address',\n                    },\n                  }}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      fullWidth\n                      label=\"Email Address\"\n                      type=\"email\"\n                      error={!!errors.email}\n                      helperText={errors.email?.message}\n                      InputProps={{\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <Email sx={{ color: 'text.secondary' }} />\n                          </InputAdornment>\n                        ),\n                      }}\n                      sx={{\n                        '& .MuiOutlinedInput-root': {\n                          backgroundColor: 'rgba(255, 255, 255, 0.05)',\n                        },\n                      }}\n                    />\n                  )}\n                />\n\n                <Controller\n                  name=\"password\"\n                  control={control}\n                  rules={{\n                    required: 'Password is required',\n                    minLength: {\n                      value: 8,\n                      message: 'Password must be at least 8 characters',\n                    },\n                  }}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      fullWidth\n                      label=\"Password\"\n                      type={showPassword ? 'text' : 'password'}\n                      error={!!errors.password}\n                      helperText={errors.password?.message}\n                      InputProps={{\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <Lock sx={{ color: 'text.secondary' }} />\n                          </InputAdornment>\n                        ),\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              onClick={handleTogglePasswordVisibility}\n                              edge=\"end\"\n                              sx={{ color: 'text.secondary' }}\n                            >\n                              {showPassword ? <VisibilityOff /> : <Visibility />}\n                            </IconButton>\n                          </InputAdornment>\n                        ),\n                      }}\n                      sx={{\n                        '& .MuiOutlinedInput-root': {\n                          backgroundColor: 'rgba(255, 255, 255, 0.05)',\n                        },\n                      }}\n                    />\n                  )}\n                />\n\n                <Box sx={{ textAlign: 'right' }}>\n                  <Link\n                    component={RouterLink}\n                    to=\"/forgot-password\"\n                    variant=\"body2\"\n                    sx={{\n                      color: 'primary.main',\n                      textDecoration: 'none',\n                      '&:hover': {\n                        textDecoration: 'underline',\n                      },\n                    }}\n                  >\n                    Forgot your password?\n                  </Link>\n                </Box>\n\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  size=\"large\"\n                  disabled={isSubmitting}\n                  sx={{\n                    py: 1.5,\n                    fontSize: '1.1rem',\n                    fontWeight: 600,\n                    background: 'linear-gradient(135deg, #00d4ff 0%, #667eea 100%)',\n                    color: '#000',\n                    '&:hover': {\n                      background: 'linear-gradient(135deg, #33ddff 0%, #7b8eed 100%)',\n                    },\n                    '&:disabled': {\n                      background: 'rgba(255, 255, 255, 0.1)',\n                      color: 'rgba(255, 255, 255, 0.5)',\n                    },\n                  }}\n                >\n                  {isSubmitting ? 'Signing In...' : 'Sign In'}\n                </Button>\n              </Stack>\n            </Box>\n            ) : (\n              <Box>\n                <Alert severity=\"info\" sx={{ mb: 3 }}>\n                  Enter the 6-digit code from your authenticator app. You can also use a backup code.\n                </Alert>\n                <TextField\n                  fullWidth\n                  label=\"Authentication code\"\n                  value={twoFactorCode}\n                  onChange={(e) => setTwoFactorCode(e.target.value)}\n                  sx={{ mb: 2 }}\n                />\n                <Button\n                  variant=\"contained\"\n                  onClick={async () => {\n                    try {\n                      setLoading(true);\n                      const { verify2FA } = (await import('@/services/authService')).authService;\n                      if (!interimToken) return;\n                      const result = await verify2FA(interimToken, twoFactorCode.trim());\n                      // Store auth data\n                      localStorage.setItem('auth_token', result.token);\n                      localStorage.setItem('auth_user', JSON.stringify(result.user));\n                      enqueueSnackbar('2FA verified. Welcome back!', { variant: 'success' });\n                      \n                      // Redirect based on user role\n                      const roleUpper = String(result.user?.role || '').toUpperCase();\n                      if (roleUpper === 'SUPERADMIN') {\n                        navigate('/admin');\n                      } else {\n                        navigate('/dashboard');\n                      }\n                    } catch (e: any) {\n                      enqueueSnackbar(e.message || 'Invalid code', { variant: 'error' });\n                    } finally {\n                      setLoading(false);\n                    }\n                  }}\n                  sx={{\n                    background: 'linear-gradient(135deg, #00d4ff 0%, #667eea 100%)',\n                    color: '#000',\n                  }}\n                >\n                  Verify Code\n                </Button>\n              </Box>\n            )}\n\n            <Divider sx={{ my: 4 }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                OR\n              </Typography>\n            </Divider>\n\n            {/* Register Link */}\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Don't have an account?{' '}\n                <Link\n                  component={RouterLink}\n                  to=\"/register\"\n                  sx={{\n                    color: 'primary.main',\n                    textDecoration: 'none',\n                    fontWeight: 600,\n                    '&:hover': {\n                      textDecoration: 'underline',\n                    },\n                  }}\n                >\n                  Create one now\n                </Link>\n              </Typography>\n              \n              <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 2, display: 'block' }}>\n                🔒 Your data is secure and protected by industry-leading encryption\n              </Typography>\n            </Box>\n          </Paper>\n        </motion.div>\n      </Container>\n    </Box>\n  );\n};\n\nexport default LoginPage;\n"],"file":"assets/LoginPage-JvWYQTpZ.js"}