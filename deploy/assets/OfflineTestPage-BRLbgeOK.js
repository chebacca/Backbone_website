var J=Object.defineProperty;var A=(n,e,t)=>e in n?J(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var g=(n,e,t)=>A(n,typeof e!="symbol"?e+"":e,t);import{j as i,B as v,T as h,c as b,r as E,a as C,w as L,x as I,z as q,D as Q}from"./mui-Bfdt1nAh.js";import{r as m,b as U}from"./vendor-CjD1bmmO.js";import{cloudProjectIntegration as x}from"./CloudProjectIntegration-CXa6mLvC.js";import"./index-DCOUUOPk.js";import"./stripe-DHYO8zYT.js";let N;const z=new Uint8Array(16);function B(){if(!N&&(N=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!N))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return N(z)}const u=[];for(let n=0;n<256;++n)u.push((n+256).toString(16).slice(1));function _(n,e=0){return u[n[e+0]]+u[n[e+1]]+u[n[e+2]]+u[n[e+3]]+"-"+u[n[e+4]]+u[n[e+5]]+"-"+u[n[e+6]]+u[n[e+7]]+"-"+u[n[e+8]]+u[n[e+9]]+"-"+u[n[e+10]]+u[n[e+11]]+u[n[e+12]]+u[n[e+13]]+u[n[e+14]]+u[n[e+15]]}const Y=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),$={randomUUID:Y};function V(n,e,t){if($.randomUUID&&!n)return $.randomUUID();n=n||{};const r=n.random||(n.rng||B)();return r[6]=r[6]&15|64,r[8]=r[8]&63|128,_(r)}const f={PENDING_PROJECTS:"offline_pending_projects",SYNC_QUEUE:"offline_sync_queue"},w=class w{constructor(){g(this,"dbName","backbone_offline_storage");g(this,"dbVersion",1);g(this,"db",null);g(this,"initPromise",null);this.initPromise=this.initDatabase()}static getInstance(){return w.instance||(w.instance=new w),w.instance}async initDatabase(){return new Promise((e,t)=>{try{if(!window.indexedDB){console.warn("IndexedDB not supported - offline storage will be limited"),e(!1);return}const r=window.indexedDB.open(this.dbName,this.dbVersion);r.onupgradeneeded=o=>{const s=o.target.result;if(!s.objectStoreNames.contains("projects")){const a=s.createObjectStore("projects",{keyPath:"id"});a.createIndex("pendingSync","pendingSync",{unique:!1}),a.createIndex("createdAt","createdAt",{unique:!1})}if(!s.objectStoreNames.contains("syncQueue")){const a=s.createObjectStore("syncQueue",{keyPath:"id"});a.createIndex("type","type",{unique:!1}),a.createIndex("createdAt","createdAt",{unique:!1})}},r.onsuccess=o=>{this.db=o.target.result,console.log("‚úÖ IndexedDB initialized for offline storage"),e(!0)},r.onerror=o=>{console.error("‚ùå Failed to initialize IndexedDB:",o),e(!1)}}catch(r){console.error("‚ùå Error initializing IndexedDB:",r),e(!1)}})}async ensureInitialized(){return this.db?!0:this.initPromise?this.initPromise:this.initDatabase()}async storeOfflineProject(e){if(await this.ensureInitialized(),!this.db)try{const t=this.getLocalStorageProjects();return t.push(e),localStorage.setItem(f.PENDING_PROJECTS,JSON.stringify(t)),e.id}catch(t){throw console.error("‚ùå Failed to store project in localStorage:",t),t}return new Promise((t,r)=>{try{const a=this.db.transaction(["projects"],"readwrite").objectStore("projects").put(e);a.onsuccess=()=>{console.log("‚úÖ Project stored offline:",e.id),t(e.id)},a.onerror=l=>{console.error("‚ùå Failed to store project offline:",l),r(new Error("Failed to store project offline"))}}catch(o){console.error("‚ùå Error storing project offline:",o),r(o)}})}async getOfflineProjects(){return await this.ensureInitialized(),this.db?new Promise((e,t)=>{try{const s=this.db.transaction(["projects"],"readonly").objectStore("projects").getAll();s.onsuccess=a=>{const l=a.target.result;e(l)},s.onerror=a=>{console.error("‚ùå Failed to get offline projects:",a),t(new Error("Failed to get offline projects"))}}catch(r){console.error("‚ùå Error getting offline projects:",r),t(r)}}):this.getLocalStorageProjects()}getLocalStorageProjects(){try{const e=localStorage.getItem(f.PENDING_PROJECTS);return e?JSON.parse(e):[]}catch(e){return console.error("‚ùå Failed to get projects from localStorage:",e),[]}}async getPendingSyncProjects(){return await this.ensureInitialized(),this.db?new Promise((e,t)=>{try{const a=this.db.transaction(["projects"],"readonly").objectStore("projects").index("pendingSync").getAll(IDBKeyRange.only(!0));a.onsuccess=l=>{const d=l.target.result;e(d)},a.onerror=l=>{console.error("‚ùå Failed to get pending sync projects:",l),t(new Error("Failed to get pending sync projects"))}}catch(r){console.error("‚ùå Error getting pending sync projects:",r),t(r)}}):this.getLocalStorageProjects().filter(t=>t.pendingSync)}async markProjectSynced(e,t){if(await this.ensureInitialized(),!this.db){try{const o=this.getLocalStorageProjects().map(s=>s.id===e?{...s,pendingSync:!1,onlineId:t}:s);localStorage.setItem(f.PENDING_PROJECTS,JSON.stringify(o))}catch(r){throw console.error("‚ùå Failed to mark project as synced in localStorage:",r),r}return}return new Promise((r,o)=>{try{const a=this.db.transaction(["projects"],"readwrite").objectStore("projects"),l=a.get(e);l.onsuccess=d=>{const y=d.target.result;if(!y){o(new Error(`Project not found: ${e}`));return}y.pendingSync=!1,t&&(y.id=t);const p=a.put(y);p.onsuccess=()=>{console.log("‚úÖ Project marked as synced:",e),r()},p.onerror=F=>{console.error("‚ùå Failed to mark project as synced:",F),o(new Error("Failed to mark project as synced"))}},l.onerror=d=>{console.error("‚ùå Failed to get project for sync update:",d),o(new Error("Failed to get project for sync update"))}}catch(s){console.error("‚ùå Error marking project as synced:",s),o(s)}})}async addToSyncQueue(e){await this.ensureInitialized();const t={id:V(),...e,createdAt:new Date().toISOString(),attempts:0};if(!this.db)try{const r=localStorage.getItem(f.SYNC_QUEUE),o=r?JSON.parse(r):[];return o.push(t),localStorage.setItem(f.SYNC_QUEUE,JSON.stringify(o)),t.id}catch(r){throw console.error("‚ùå Failed to add to sync queue in localStorage:",r),r}return new Promise((r,o)=>{try{const l=this.db.transaction(["syncQueue"],"readwrite").objectStore("syncQueue").add(t);l.onsuccess=()=>{console.log("‚úÖ Item added to sync queue:",t.id),r(t.id)},l.onerror=d=>{console.error("‚ùå Failed to add item to sync queue:",d),o(new Error("Failed to add item to sync queue"))}}catch(s){console.error("‚ùå Error adding item to sync queue:",s),o(s)}})}async getSyncQueue(){if(await this.ensureInitialized(),!this.db)try{const e=localStorage.getItem(f.SYNC_QUEUE);return e?JSON.parse(e):[]}catch(e){return console.error("‚ùå Failed to get sync queue from localStorage:",e),[]}return new Promise((e,t)=>{try{const s=this.db.transaction(["syncQueue"],"readonly").objectStore("syncQueue").getAll();s.onsuccess=a=>{const l=a.target.result;e(l)},s.onerror=a=>{console.error("‚ùå Failed to get sync queue:",a),t(new Error("Failed to get sync queue"))}}catch(r){console.error("‚ùå Error getting sync queue:",r),t(r)}})}async removeFromSyncQueue(e){if(await this.ensureInitialized(),!this.db){try{const t=localStorage.getItem(f.SYNC_QUEUE),o=(t?JSON.parse(t):[]).filter(s=>s.id!==e);localStorage.setItem(f.SYNC_QUEUE,JSON.stringify(o))}catch(t){throw console.error("‚ùå Failed to remove from sync queue in localStorage:",t),t}return}return new Promise((t,r)=>{try{const a=this.db.transaction(["syncQueue"],"readwrite").objectStore("syncQueue").delete(e);a.onsuccess=()=>{console.log("‚úÖ Item removed from sync queue:",e),t()},a.onerror=l=>{console.error("‚ùå Failed to remove item from sync queue:",l),r(new Error("Failed to remove item from sync queue"))}}catch(o){console.error("‚ùå Error removing item from sync queue:",o),r(o)}})}async updateSyncAttempt(e){if(await this.ensureInitialized(),!this.db){try{const t=localStorage.getItem(f.SYNC_QUEUE),o=(t?JSON.parse(t):[]).map(s=>s.id===e?{...s,attempts:(s.attempts||0)+1,lastAttempt:new Date().toISOString()}:s);localStorage.setItem(f.SYNC_QUEUE,JSON.stringify(o))}catch(t){throw console.error("‚ùå Failed to update sync attempt in localStorage:",t),t}return}return new Promise((t,r)=>{try{const s=this.db.transaction(["syncQueue"],"readwrite").objectStore("syncQueue"),a=s.get(e);a.onsuccess=l=>{const d=l.target.result;if(!d){r(new Error(`Sync queue item not found: ${e}`));return}d.attempts=(d.attempts||0)+1,d.lastAttempt=new Date().toISOString();const y=s.put(d);y.onsuccess=()=>{console.log("‚úÖ Sync attempt updated for item:",e),t()},y.onerror=p=>{console.error("‚ùå Failed to update sync attempt:",p),r(new Error("Failed to update sync attempt"))}},a.onerror=l=>{console.error("‚ùå Failed to get sync queue item:",l),r(new Error("Failed to get sync queue item"))}}catch(o){console.error("‚ùå Error updating sync attempt:",o),r(o)}})}};g(w,"instance");let D=w;const P=D.getInstance(),k=()=>typeof navigator<"u"&&"onLine"in navigator?navigator.onLine:!0,G=(n,e)=>typeof window>"u"?()=>{}:(window.addEventListener("online",n),window.addEventListener("offline",e),()=>{window.removeEventListener("online",n),window.removeEventListener("offline",e)}),H=async()=>{try{const n=`https://backbone-logic.web.app/ping?_=${Date.now()}`,e=await fetch(n,{method:"HEAD",mode:"no-cors",cache:"no-cache",headers:{"Cache-Control":"no-cache"},redirect:"error"});return!0}catch{return!1}},j=class j{constructor(){g(this,"syncInProgress",!1);g(this,"networkListenerCleanup",null);g(this,"syncInterval",null);this.setupNetworkListeners()}static getInstance(){return j.instance||(j.instance=new j),j.instance}setupNetworkListeners(){this.networkListenerCleanup&&this.networkListenerCleanup(),this.networkListenerCleanup=G(()=>{console.log("üåê Network connection restored - starting sync"),this.startSync()},()=>{console.log("üì¥ Network connection lost - pausing sync"),this.pauseSync()})}startSync(e=!0){this.pauseSync(),e&&this.syncOfflineData(),this.syncInterval=window.setInterval(()=>{this.syncOfflineData()},5*60*1e3)}pauseSync(){this.syncInterval&&(window.clearInterval(this.syncInterval),this.syncInterval=null)}async syncOfflineData(){if(this.syncInProgress){console.log("‚è≥ Sync already in progress, skipping");return}if(!k()){console.log("üì¥ Device is offline, skipping sync");return}try{if(this.syncInProgress=!0,!await H()){console.log("üì¥ Network connectivity test failed, skipping sync");return}console.log("üîÑ Starting offline data sync"),await this.syncPendingProjects(),await this.processSyncQueue(),console.log("‚úÖ Offline data sync completed")}catch(e){console.error("‚ùå Error during offline data sync:",e)}finally{this.syncInProgress=!1}}async syncPendingProjects(){try{const e=await P.getPendingSyncProjects();if(e.length===0){console.log("‚úÖ No pending projects to sync");return}console.log(`üîÑ Syncing ${e.length} pending projects`);for(const t of e)try{const r=await x.createCloudProjectInFirestore(t.originalOptions);r&&r.id?(await P.markProjectSynced(t.id,r.id),console.log(`‚úÖ Project synced: ${t.id} -> ${r.id}`)):console.warn(`‚ö†Ô∏è Project sync failed: ${t.id} - no valid cloud project ID returned`)}catch(r){console.error(`‚ùå Failed to sync project ${t.id}:`,r)}}catch(e){console.error("‚ùå Error syncing pending projects:",e)}}async processSyncQueue(){try{const e=await P.getSyncQueue();if(e.length===0){console.log("‚úÖ No items in sync queue");return}console.log(`üîÑ Processing ${e.length} items in sync queue`);for(const t of e)try{await this.processSyncQueueItem(t),await P.removeFromSyncQueue(t.id)}catch(r){console.error(`‚ùå Failed to process sync queue item ${t.id}:`,r),await P.updateSyncAttempt(t.id)}}catch(e){console.error("‚ùå Error processing sync queue:",e)}}async processSyncQueueItem(e){switch(e.type){case"project_create":await x.createCloudProjectInFirestore(e.data);break;case"project_update":await x.updateProjectInFirestore(e.data.id,e.data.updates);break;case"project_delete":await x.archiveProjectInFirestore(e.data.id);break;default:throw new Error(`Unknown sync queue item type: ${e.type}`)}}async forceSyncNow(){if(!k())return console.log("üì¥ Device is offline, cannot force sync"),!1;try{return await this.syncOfflineData(),!0}catch(e){return console.error("‚ùå Error during forced sync:",e),!1}}cleanup(){this.pauseSync(),this.networkListenerCleanup&&(this.networkListenerCleanup(),this.networkListenerCleanup=null)}};g(j,"instance");let O=j;const R=O.getInstance();R.startSync(!1);const te=()=>{const[n,e]=m.useState(k()),[t,r]=m.useState([]),[o,s]=m.useState([]),[a,l]=m.useState(!1),[d,y]=m.useState("");m.useEffect(()=>{const c=()=>e(!0),S=()=>e(!1);return window.addEventListener("online",c),window.addEventListener("offline",S),()=>{window.removeEventListener("online",c),window.removeEventListener("offline",S)}},[]);const p=async()=>{l(!0);try{const c=await x.getUserProjects();r(c);const S=await P.getOfflineProjects();s(S)}catch(c){console.error("Failed to load projects:",c),y(`Error: ${c instanceof Error?c.message:String(c)}`)}finally{l(!1)}},F=async()=>{l(!0);try{const c=`Test Project ${new Date().toLocaleTimeString()}`;y(`Creating project: ${c}...`);const S=await x.createCloudProject({name:c,description:"Test project for offline creation",storageMode:"cloud",cloudConfig:{provider:"firestore"},collaborationSettings:{maxCollaborators:5,enableRealTime:!0,enableComments:!0,enableFileSharing:!0}});y(`Project created with ID: ${S}`),await p()}catch(c){console.error("Failed to create project:",c),y(`Error: ${c instanceof Error?c.message:String(c)}`)}finally{l(!1)}},T=async()=>{l(!0);try{y("Syncing...");const c=await R.forceSyncNow();y(`Sync ${c?"succeeded":"failed"}`),await p()}catch(c){console.error("Failed to sync:",c),y(`Error: ${c instanceof Error?c.message:String(c)}`)}finally{l(!1)}};return m.useEffect(()=>{p()},[]),i.jsxs(v,{sx:{p:3,maxWidth:800,mx:"auto"},children:[i.jsx(h,{variant:"h4",gutterBottom:!0,children:"Offline Project Creation Test"}),i.jsxs(b,{sx:{p:2,mb:3},children:[i.jsx(h,{variant:"h6",gutterBottom:!0,children:"Network Status"}),i.jsxs(v,{display:"flex",alignItems:"center",mb:2,children:[i.jsx(E,{label:n?"Online":"Offline",color:n?"success":"error",sx:{mr:2}}),i.jsx(h,{children:n?"You are online. Projects will be created in Firestore.":"You are offline. Projects will be created locally."})]}),i.jsxs(v,{display:"flex",gap:2,children:[i.jsx(C,{variant:"contained",onClick:F,disabled:a,children:"Create Test Project"}),i.jsx(C,{variant:"outlined",onClick:T,disabled:a||!n,children:"Force Sync"}),i.jsx(C,{variant:"outlined",onClick:p,disabled:a,children:"Refresh"})]})]}),d&&i.jsx(b,{sx:{p:2,mb:3,bgcolor:"info.light",color:"info.contrastText"},children:i.jsx(h,{children:d})}),i.jsxs(b,{sx:{p:2,mb:3},children:[i.jsxs(h,{variant:"h6",gutterBottom:!0,children:["All Projects (",t.length,")"]}),a?i.jsx(h,{children:"Loading..."}):i.jsx(L,{children:t.length===0?i.jsx(I,{children:i.jsx(q,{primary:"No projects found"})}):t.map(c=>i.jsxs(U.Fragment,{children:[i.jsxs(I,{children:[i.jsx(q,{primary:c.name,secondary:`ID: ${c.id} | Created: ${new Date(c.createdAt).toLocaleString()}`}),c.id.startsWith("offline_")&&i.jsx(E,{label:"Offline",color:"warning",size:"small",sx:{mr:1}}),c.pendingSync&&i.jsx(E,{label:"Pending Sync",color:"info",size:"small"})]}),i.jsx(Q,{})]},c.id))})]}),i.jsxs(b,{sx:{p:2},children:[i.jsxs(h,{variant:"h6",gutterBottom:!0,children:["Offline Projects (",o.length,")"]}),a?i.jsx(h,{children:"Loading..."}):i.jsx(L,{children:o.length===0?i.jsx(I,{children:i.jsx(q,{primary:"No offline projects found"})}):o.map(c=>i.jsxs(U.Fragment,{children:[i.jsxs(I,{children:[i.jsx(q,{primary:c.name,secondary:`ID: ${c.id} | Created: ${new Date(c.createdAt).toLocaleString()}`}),c.pendingSync&&i.jsx(E,{label:"Pending Sync",color:"info",size:"small"})]}),i.jsx(Q,{})]},c.id))})]})]})};export{te as default};
