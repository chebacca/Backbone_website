const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-B1jbC0Hb.js","assets/index-CodkiLeK.js","assets/mui-B5ShOvbI.js","assets/vendor-CjD1bmmO.js","assets/stripe-BiSq53Oi.js","assets/index-CBai7h7s.css","assets/index.esm--uL3Qa3r.js","assets/index.esm-C6E5jVjx.js","assets/index.esm-K73FumZQ.js"])))=>i.map(i=>d[i]);
var $=Object.defineProperty;var k=(M,e,t)=>e in M?$(M,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):M[e]=t;var T=(M,e,t)=>k(M,typeof e!="symbol"?e+"":e,t);import{_ as O}from"./index-CodkiLeK.js";import{getDoc as z,doc as h,query as A,collection as D,where as b,getDocs as v,updateDoc as U,addDoc as N,arrayUnion as j,arrayRemove as R,limit as E,orderBy as F}from"./index.esm-C6E5jVjx.js";import{COLLECTIONS as C,firestoreCollectionManager as B}from"./FirestoreCollectionManager-Df2Uk8Uq.js";import"./mui-B5ShOvbI.js";import"./vendor-CjD1bmmO.js";import"./stripe-BiSq53Oi.js";import"./index.esm--uL3Qa3r.js";import"./firebase-B1jbC0Hb.js";import"./index.esm-K73FumZQ.js";const P=class P{constructor(){T(this,"cache",new Map);T(this,"CACHE_TTL",5*60*1e3);T(this,"db",null);T(this,"auth",null);this.initializeFirebase()}getApiBaseUrl(){return console.log("[UnifiedDataService] PRODUCTION MODE: Using Cloud Run API endpoint"),"https://api-oup5qxogca-uc.a.run.app/api"}async initializeFirebase(){try{console.log("🔧 [UnifiedDataService] Initializing Firebase...");const{db:e,auth:t}=await O(async()=>{const{db:n,auth:a}=await import("./firebase-B1jbC0Hb.js");return{db:n,auth:a}},__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=e,this.auth=t,console.log("✅ [UnifiedDataService] Firebase initialized successfully")}catch(e){throw console.error("❌ [UnifiedDataService] Failed to initialize Firebase:",e),e}}async waitForAuthReady(){var e;return this.auth||await this.initializeFirebase(),(e=this.auth)!=null&&e.currentUser?!0:new Promise(t=>{const n=setTimeout(()=>{t(!1)},5e3),a=this.auth.onAuthStateChanged(c=>{clearTimeout(n),a(),t(!!c)})})}async getAuthToken(){var e;if(!((e=this.auth)!=null&&e.currentUser))throw new Error("No authenticated user found");try{const t=await this.auth.currentUser.getIdToken();if(!t)throw new Error("Failed to get ID token from Firebase Auth");return t}catch(t){throw console.error("❌ [UnifiedDataService] Error getting auth token:",t),new Error("Failed to get authentication token")}}mapUserDocument(e){var n,a,c;const t=e.data();return{id:e.id,email:t.email||"",name:t.name||t.firstName+" "+t.lastName||"Unknown User",userType:t.userType||"TEAM_MEMBER",role:t.role||"member",organization:{id:t.organizationId||t.orgId||"default-org",name:t.organizationName||"Unknown Organization",tier:t.tier||"BASIC",isOwner:t.isOwner||t.role==="OWNER"||!1},license:{type:t.licenseType||t.tier||"BASIC",status:t.status||"ACTIVE",permissions:t.permissions||[],canCreateProjects:t.tier==="ENTERPRISE"||t.tier==="PROFESSIONAL",canManageTeam:t.role==="admin"||t.role==="owner"||t.role==="OWNER"},teamMemberData:t.userType==="TEAM_MEMBER"?{managedBy:t.managedBy||"",department:t.department||"",assignedProjects:t.assignedProjects||[]}:void 0,status:t.status||"ACTIVE",createdAt:((n=t.createdAt)==null?void 0:n.toDate())||new Date,updatedAt:((a=t.updatedAt)==null?void 0:a.toDate())||new Date,lastLoginAt:(c=t.lastLoginAt)==null?void 0:c.toDate()}}async getCurrentUser(){var a;const e="current-user",t=this.getFromCache(e);if(t)return t;if(!await this.waitForAuthReady())return console.log("🔍 [UnifiedDataService] Firebase Auth not ready after waiting"),null;if(!((a=this.auth)!=null&&a.currentUser))return console.log("🔍 [UnifiedDataService] No Firebase Auth user found after auth ready"),null;try{const c=this.auth.currentUser.email,s=this.auth.currentUser.uid;console.log("🔍 [UnifiedDataService] Looking for user:",c,"UID:",s);let o=await z(h(this.db,"users",s));if(o.exists()){console.log("✅ [UnifiedDataService] Found user in users collection");const i=this.mapUserDocument(o);return this.setCache(e,i),i}try{const i=A(D(this.db,"users"),b("email","==",c)),d=await v(i);if(!d.empty){console.log("✅ [UnifiedDataService] Found user by email in users collection");const u=this.mapUserDocument(d.docs[0]);return this.setCache(e,u),u}}catch(i){console.warn("⚠️ [UnifiedDataService] Error querying users by email:",i)}try{const i=A(D(this.db,"orgMembers"),b("email","==",c)),d=await v(i);if(!d.empty){console.log("✅ [UnifiedDataService] Found user in orgMembers collection");const u=this.mapUserDocument(d.docs[0]);return this.setCache(e,u),u}}catch(i){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers:",i)}return console.log("❌ [UnifiedDataService] User not found in any collection"),null}catch(c){return console.error("❌ [UnifiedDataService] Error fetching current user:",c),null}}async getUsersByOrganization(e){const t=`org-users-${e}`,n=this.getFromCache(t);if(n)return n;try{console.log("🔍 [UnifiedDataService] Fetching users for organization:",e),this.db||await this.initializeFirebase();let a=[];try{console.log("🔍 [UnifiedDataService] Trying users collection...");const s=A(D(this.db,"users"),b("organizationId","==",e)),o=await v(s);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in users collection"),a=a.concat(o.docs.map(i=>this.mapUserDocument(i)))}catch(s){console.warn("⚠️ [UnifiedDataService] Error querying users collection:",s)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers collection...");const s=A(D(this.db,"orgMembers"),b("organizationId","==",e)),o=await v(s);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in orgMembers collection"),a=a.concat(o.docs.map(i=>this.mapUserDocument(i)))}catch(s){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers collection:",s)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers with orgId field...");const s=A(D(this.db,"orgMembers"),b("orgId","==",e)),o=await v(s);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in orgMembers with orgId"),a=a.concat(o.docs.map(i=>this.mapUserDocument(i)))}catch(s){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers with orgId:",s)}const c=a.filter((s,o,i)=>o===i.findIndex(d=>d.email===s.email));return this.setCache(t,c),console.log("✅ [UnifiedDataService] Successfully fetched",c.length,"unique users for organization:",e),c}catch(a){return console.error("❌ [UnifiedDataService] Error fetching organization users:",a),a instanceof Error&&(console.error("Error details:",a.message),console.error("Error stack:",a.stack)),[]}}async updateUser(e,t){try{const n={...t,updatedAt:new Date};await U(h(this.db,"users",e),n),this.clearCacheByPattern("current-user"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-context-")}catch(n){throw console.error("Error updating user:",n),n}}safeToDate(e){return e?e instanceof Date?e:typeof e.toDate=="function"?e.toDate():typeof e=="string"?new Date(e):typeof e=="number"?new Date(e):new Date:new Date}async getProjectsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-projects-${e.id}`,n=this.getFromCache(t);if(n)return n;try{const a=A(D(this.db,"projects"),b("organizationId","==",e.organization.id)),s=(await v(a)).docs.map(o=>{const i=o.data();return console.log("🔍 [UnifiedDataService] Processing project data:",{id:o.id,data:i}),{...i,id:o.id,createdAt:this.safeToDate(i.createdAt),updatedAt:this.safeToDate(i.updatedAt),lastAccessedAt:this.safeToDate(i.lastAccessedAt)}});return this.setCache(t,s),s}catch(a){return console.error("Error fetching user projects:",a),[]}}async createProject(e){try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const n={...e,createdAt:new Date,updatedAt:new Date,lastAccessedAt:new Date},a=await N(D(this.db,"projects"),n);return this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("org-projects-"),this.clearCacheByPattern("org-context-"),a.id}catch(t){throw console.error("Error creating project:",t),t}}async updateProject(e,t){try{const n={...t,updatedAt:new Date};await U(h(this.db,"projects",e),n),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(n){throw console.error("Error updating project:",n),n}}async addTeamMemberToProject(e,t,n){try{const a=await z(h(this.db,"users",t));if(!a.exists())throw new Error("User not found");const c=a.data(),s=await this.getCurrentUser(),o={userId:c.id,email:c.email,name:c.name,role:n,assignedAt:new Date,assignedBy:(s==null?void 0:s.email)||"system"};await U(h(this.db,"projects",e),{teamAssignments:j(o),updatedAt:new Date}),await U(h(this.db,"users",t),{"teamMemberData.assignedProjects":j(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(a){throw console.error("Error adding team member to project:",a),a}}async removeTeamMemberFromProject(e,t){try{const n=await z(h(this.db,"projects",e));if(!n.exists())throw new Error("Project not found");const c=n.data().teamAssignments.find(s=>s.userId===t);c&&(await U(h(this.db,"projects",e),{teamAssignments:R(c),updatedAt:new Date}),await U(h(this.db,"users",t),{"teamMemberData.assignedProjects":R(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-"))}catch(n){throw console.error("Error removing team member from project:",n),n}}async getOrganizationContext(){var a,c,s,o,i,d;(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)throw new Error("No authenticated user");const t=`org-context-${e.organization.id}`,n=this.getFromCache(t);if(n)return n;try{const u=await z(h(this.db,"organizations",e.organization.id));if(!u.exists())throw new Error(`Organization ${e.organization.id} not found`);const f=u.data(),p={...f,id:e.organization.id,createdAt:((a=f.createdAt)==null?void 0:a.toDate())||new Date,updatedAt:((c=f.updatedAt)==null?void 0:c.toDate())||new Date},g=A(D(this.db,"subscriptions"),b("organizationId","==",e.organization.id),b("status","==","ACTIVE"),E(1)),y=await v(g);let m=null;if(!y.empty){const l=y.docs[0].data();m={...l,id:y.docs[0].id,createdAt:((s=l.createdAt)==null?void 0:s.toDate())||new Date,updatedAt:((o=l.updatedAt)==null?void 0:o.toDate())||new Date,currentPeriodStart:((i=l.currentPeriodStart)==null?void 0:i.toDate())||new Date,currentPeriodEnd:((d=l.currentPeriodEnd)==null?void 0:d.toDate())||new Date}}let w=[];try{w=await this.getUsersByOrganization(e.organization.id)}catch(l){throw console.error("Failed to get organization members:",l),l}const r={organization:p,subscription:m,members:w};return this.setCache(t,r,10*60*1e3),r}catch(u){throw console.error("Error fetching organization context:",u),u}}async getLicensesForOrganization(){(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)return console.log("🔍 [UnifiedDataService] No user found for license query"),[];console.log("🔍 [UnifiedDataService] Fetching licenses for organization:",e.organization.id);const t=`org-licenses-${e.organization.id}`,n=this.getFromCache(t);if(n)return console.log("📋 [UnifiedDataService] Returning cached licenses:",n.length),n;try{const a=A(D(this.db,"licenses"),b("organizationId","==",e.organization.id),F("createdAt","desc")),c=await v(a);console.log("📊 [UnifiedDataService] Found",c.docs.length,"license documents");const s=c.docs.map(o=>{var d,u,f,p,g,y,m,w;const i=o.data();return{id:o.id,key:i.key||"",name:i.name||`License ${o.id}`,tier:i.tier||"BASIC",status:i.status||"PENDING",organization:i.organization?{id:i.organization.id,name:i.organization.name,tier:i.organization.tier}:{id:i.organizationId||"",name:i.organizationName||"Unknown Organization",tier:i.tier||"BASIC"},assignedTo:i.assignedTo?{userId:i.assignedTo.userId,name:i.assignedTo.name||i.assignedToName||"Unknown User",email:i.assignedTo.email||i.assignedToEmail||"",assignedAt:((d=i.assignedTo.assignedAt)==null?void 0:d.toDate())||((u=i.activatedAt)==null?void 0:u.toDate())||new Date}:i.assignedToUserId?{userId:i.assignedToUserId,name:i.assignedToName||i.assignedToEmail||"Unknown User",email:i.assignedToEmail||"",assignedAt:((f=i.activatedAt)==null?void 0:f.toDate())||new Date}:void 0,usage:i.usage?{apiCalls:i.usage.apiCalls||0,dataTransfer:i.usage.dataTransfer||0,deviceCount:i.usage.deviceCount||1,maxDevices:i.usage.maxDevices||(i.tier==="ENTERPRISE"?10:i.tier==="PROFESSIONAL"?5:2)}:{apiCalls:i.usageCount||0,dataTransfer:0,deviceCount:1,maxDevices:i.tier==="ENTERPRISE"?10:i.tier==="PROFESSIONAL"?5:2},activatedAt:(p=i.activatedAt)==null?void 0:p.toDate(),expiresAt:((g=i.expiresAt)==null?void 0:g.toDate())||new Date,lastUsed:(y=i.lastUsed)==null?void 0:y.toDate(),createdAt:((m=i.createdAt)==null?void 0:m.toDate())||new Date,updatedAt:((w=i.updatedAt)==null?void 0:w.toDate())||new Date}});return console.log("✅ [UnifiedDataService] Processed",s.length,"licenses for organization"),this.setCache(t,s),s}catch(a){return console.error("Error fetching organization licenses:",a),[]}}async createLicense(e){var t,n,a,c,s;try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const i={key:e.key,name:e.name,tier:e.tier,status:e.status,organizationId:e.organization.id,organizationName:e.organization.name,usageCount:((t=e.usage)==null?void 0:t.apiCalls)||0,userId:((n=e.assignedTo)==null?void 0:n.userId)||null,userName:((a=e.assignedTo)==null?void 0:a.name)||null,userEmail:((c=e.assignedTo)==null?void 0:c.email)||null,activatedAt:((s=e.assignedTo)==null?void 0:s.assignedAt)||null,expiresAt:e.expiresAt,lastUsed:null,createdAt:new Date,updatedAt:new Date,organization:e.organization,usage:e.usage};console.log("🎫 [UnifiedDataService] Creating license with Firestore data:",i);const d=await N(D(this.db,"licenses"),i);return this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),console.log("🧹 [UnifiedDataService] Cleared license-related caches"),console.log("✅ [UnifiedDataService] License created with ID:",d.id),setTimeout(()=>{this.forceRefreshLicenses().catch(console.error)},100),d.id}catch(o){throw console.error("❌ [UnifiedDataService] Error creating license:",o),o}}async updateLicense(e,t){try{const n={...t,updatedAt:new Date};await U(h(this.db,"licenses",e),n),this.clearCacheByPattern("org-licenses-")}catch(n){throw console.error("Error updating license:",n),n}}async assignLicense(e,t){try{console.log("🎫 [UnifiedDataService] Assigning license",e,"to user",t);const n=await z(h(this.db,"users",t));if(!n.exists())throw new Error("User not found");const a=n.data(),c=await z(h(this.db,"licenses",e));if(!c.exists())throw new Error("License not found");const s=c.data();console.log("🔍 [UnifiedDataService] User data:",{id:t,email:a.email,name:a.name}),console.log("🔍 [UnifiedDataService] License data:",{id:e,key:s.key,tier:s.tier}),await U(h(this.db,"licenses",e),{assignedTo:{userId:t,name:a.name||a.firstName+" "+a.lastName||a.email,email:a.email,assignedAt:new Date},status:"ACTIVE",updatedAt:new Date}),await U(h(this.db,"users",t),{licenseAssignment:{licenseId:e,licenseKey:s.key,licenseType:s.tier,assignedAt:new Date},updatedAt:new Date});try{const o=A(D(this.db,C.TEAM_MEMBERS),b("userId","==",t),E(1)),i=await v(o);if(!i.empty){const d=i.docs[0];await U(d.ref,{licenseAssignment:{licenseId:e,licenseKey:s.key,licenseType:s.tier,assignedAt:new Date},updatedAt:new Date}),console.log("✅ [UnifiedDataService] Updated teamMembers collection with license assignment")}}catch(o){console.warn("⚠️ [UnifiedDataService] Failed to update teamMembers collection:",o)}try{const o=A(D(this.db,C.ORG_MEMBERS),b("userId","==",t),E(1)),i=await v(o);if(!i.empty){const d=i.docs[0];await U(d.ref,{licenseAssignment:{licenseId:e,licenseKey:s.key,licenseType:s.tier,assignedAt:new Date},updatedAt:new Date}),console.log("✅ [UnifiedDataService] Updated orgMembers collection with license assignment")}}catch(o){console.warn("⚠️ [UnifiedDataService] Failed to update orgMembers collection:",o)}console.log("✅ [UnifiedDataService] License assignment completed - all collections updated"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(n){throw console.error("❌ [UnifiedDataService] Error assigning license:",n),n}}async unassignLicense(e){var t;try{console.log("🎫 [UnifiedDataService] Unassigning license",e);const n=await z(h(this.db,"licenses",e));if(!n.exists())throw new Error("License not found");const c=(t=n.data().assignedTo)==null?void 0:t.userId;if(await U(h(this.db,"licenses",e),{assignedTo:null,status:"PENDING",updatedAt:new Date}),c&&(await U(h(this.db,"users",c),{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from user record",c)),c)try{const s=A(D(this.db,C.TEAM_MEMBERS),b("userId","==",c),E(1)),o=await v(s);if(!o.empty){const i=o.docs[0];await U(i.ref,{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from teamMembers collection")}}catch(s){console.warn("⚠️ [UnifiedDataService] Failed to update teamMembers collection:",s)}if(c)try{const s=A(D(this.db,C.ORG_MEMBERS),b("userId","==",c),E(1)),o=await v(s);if(!o.empty){const i=o.docs[0];await U(i.ref,{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from orgMembers collection")}}catch(s){console.warn("⚠️ [UnifiedDataService] Failed to update orgMembers collection:",s)}console.log("✅ [UnifiedDataService] License unassignment completed - license returned to org pool"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(n){throw console.error("❌ [UnifiedDataService] Error unassigning license:",n),n}}async getTeamMembersForOrganization(){var a,c,s,o,i,d,u,f,p;const e=await this.getCurrentUser();if(!e)return[];const t=`org-team-members-${e.organization.id}`,n=this.getFromCache(t);if(n)return n;try{console.log("🔍 [UnifiedDataService] Fetching team members for organization:",e.organization.id);const g=new Map;console.log("🔍 [UnifiedDataService] Trying users collection...");try{const m=await B.queryDocumentsWithFallback("users",[{field:"organizationId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${m.documents.length} users in users collection`);for(const w of m.documents){const r=w;if(r.id===e.id)continue;const l={id:r.id,firstName:r.firstName||((a=r.name)==null?void 0:a.split(" ")[0])||r.email.split("@")[0],lastName:r.lastName||((c=r.name)==null?void 0:c.split(" ")[1])||"",email:r.email,role:r.role||"member",status:r.status==="active"?"active":"pending",organization:{id:r.organizationId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:r.licenseAssignment?{licenseId:r.licenseAssignment.licenseId,licenseKey:r.licenseAssignment.licenseKey,licenseType:r.licenseAssignment.licenseType,assignedAt:r.licenseAssignment.assignedAt}:void 0,department:r.department||"General",assignedProjects:r.assignedProjects||[],avatar:r.avatar,joinedAt:r.createdAt||new Date,lastActive:r.lastActive,invitedBy:r.invitedBy||e.id,createdAt:r.createdAt||new Date,updatedAt:r.updatedAt||new Date};g.set(r.email,l)}}catch(m){console.warn("⚠️ [UnifiedDataService] Users collection query failed:",m)}console.log("🔍 [UnifiedDataService] Trying teamMembers collection...");try{const m=await B.queryDocumentsWithFallback("teamMembers",[{field:"organizationId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${m.documents.length} team members in teamMembers collection`);for(const w of m.documents){const r=w;if(r.status==="removed"||r.status==="suspended")continue;const l={id:r.id,firstName:r.firstName||((s=r.name)==null?void 0:s.split(" ")[0])||r.email.split("@")[0],lastName:r.lastName||((o=r.name)==null?void 0:o.split(" ")[1])||"",email:r.email,role:r.role||"member",status:r.status||"active",organization:{id:r.organizationId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:r.licenseAssignment?{licenseId:r.licenseAssignment.licenseId,licenseKey:r.licenseAssignment.licenseKey,licenseType:r.licenseAssignment.licenseType,assignedAt:r.licenseAssignment.assignedAt}:void 0,department:r.department||"General",assignedProjects:r.assignedProjects||[],avatar:r.avatar,joinedAt:r.joinedAt||r.createdAt||new Date,lastActive:r.lastActive,invitedBy:r.invitedBy||e.id,createdAt:r.createdAt||new Date,updatedAt:r.updatedAt||new Date},S=g.get(r.email);S?(S.role=r.role||S.role,S.status=r.status||S.status,S.department=r.department||S.department,S.licenseAssignment=r.licenseAssignment||S.licenseAssignment,g.set(r.email,S)):g.set(r.email,l)}}catch(m){console.warn("⚠️ [UnifiedDataService] TeamMembers collection query failed:",m)}console.log("🔍 [UnifiedDataService] Trying orgMembers collection...");try{const m=await B.queryDocumentsWithFallback("orgMembers",[{field:"orgId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${m.documents.length} org members in orgMembers collection`);for(const w of m.documents){const r=w;if(r.status==="removed"||r.status==="suspended")continue;const l=g.get(r.email);if(l)l.role=r.role||l.role,l.status=r.status||l.status,l.department=r.department||l.department,l.joinedAt=r.joinedAt||l.joinedAt,g.set(r.email,l);else{const S={id:r.userId,firstName:r.firstName||((i=r.name)==null?void 0:i.split(" ")[0])||((d=r.email)==null?void 0:d.split("@")[0])||"Unknown",lastName:r.lastName||((u=r.name)==null?void 0:u.split(" ")[1])||"",email:r.email||r.userEmail||"",role:r.role||"member",status:r.status||"active",organization:{id:r.orgId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:void 0,department:r.department||"General",assignedProjects:[],avatar:r.avatar,joinedAt:r.joinedAt||r.createdAt||new Date,lastActive:r.lastActive,invitedBy:r.invitedBy||e.id,createdAt:r.createdAt||new Date,updatedAt:r.updatedAt||new Date};g.set(r.email||r.userEmail||"",S)}}}catch(m){console.warn("⚠️ [UnifiedDataService] OrgMembers collection query failed:",m)}console.log("🔍 [UnifiedDataService] Trying org_members collection...");try{const m=await B.queryDocumentsWithFallback("org_members",[{field:"orgId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${m.documents.length} org members in org_members collection`);for(const w of m.documents){const r=w;if(r.status==="removed"||r.status==="suspended")continue;const l=r.email||r.userEmail||"";if(l&&!g.has(l)){const S={id:r.userId,firstName:r.firstName||((f=r.name)==null?void 0:f.split(" ")[0])||l.split("@")[0]||"Unknown",lastName:r.lastName||((p=r.name)==null?void 0:p.split(" ")[1])||"",email:l,role:r.role||"member",status:r.status||"active",organization:{id:r.orgId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:void 0,department:r.department||"General",assignedProjects:[],avatar:r.avatar,joinedAt:r.joinedAt||r.createdAt||new Date,lastActive:r.lastActive,invitedBy:r.invitedBy||e.id,createdAt:r.createdAt||new Date,updatedAt:r.updatedAt||new Date};g.set(l,S)}}}catch(m){console.warn("⚠️ [UnifiedDataService] org_members collection query failed:",m)}const y=Array.from(g.values());return console.log(`✅ [UnifiedDataService] Successfully fetched ${y.length} unique team members for organization: ${e.organization.id}`),this.setCache(t,y),y}catch(g){return console.error("❌ [UnifiedDataService] Failed to fetch team members:",g),[]}}async inviteTeamMember(e){var t;console.log("🚀 [UnifiedDataService] Creating team member via backend API:",e.email);try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const a={email:e.email,firstName:e.firstName,lastName:e.lastName,department:e.department||"",licenseType:"PROFESSIONAL",organizationId:e.organization.id,sendWelcomeEmail:!0,temporaryPassword:e.temporaryPassword||this.generateSecurePassword()};console.log("📤 [UnifiedDataService] Sending team member creation request to backend API...");const c=await((t=this.auth.currentUser)==null?void 0:t.getIdToken()),o=await(await fetch(`${this.getApiBaseUrl()}/team-members/create`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${c}`},body:JSON.stringify(a)})).json();if(!o.success)throw new Error(o.error||"Failed to create team member");const i=o.data.teamMember;return console.log("✅ [UnifiedDataService] Team member created successfully via backend API:",i.id),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-members-"),this.clearCacheByPattern("user-profiles-"),i.id}catch(n){throw console.error("❌ [UnifiedDataService] Error creating team member via backend API:",n),n}}async ensureTeamMemberProjectReadiness(e){const t={success:!0,collectionsCreated:[],collectionsFound:[],errors:[]};try{console.log("🔍 [UnifiedDataService] Checking team member project readiness for userId:",e);const n=await z(h(this.db,C.USERS,e));if(!n.exists())return t.errors.push("User record not found"),t.success=!1,t;const a=n.data();console.log("📋 [UnifiedDataService] Found user data:",a);const c=[{name:"teamMembers",collection:C.TEAM_MEMBERS,createData:()=>({userId:e,email:a.email,firstName:a.firstName,lastName:a.lastName,name:`${a.firstName} ${a.lastName}`,role:a.role||"member",status:a.status||"active",organizationId:a.organizationId,orgId:a.organizationId,department:a.department||"",isActive:!0,firebaseUid:a.firebaseUid||"",createdAt:new Date,updatedAt:new Date})},{name:"orgMembers",collection:C.ORG_MEMBERS,createData:()=>({organizationId:a.organizationId,orgId:a.organizationId,userId:e,email:a.email,name:`${a.firstName} ${a.lastName}`,firstName:a.firstName,lastName:a.lastName,role:a.role||"member",status:a.status||"active",seatReserved:!0,department:a.department||"",invitedByUserId:"system",invitedAt:new Date,joinedAt:new Date,createdAt:new Date,updatedAt:new Date})},{name:"userProfiles",collection:C.USER_PROFILES,createData:()=>({userId:e,email:a.email,firstName:a.firstName,lastName:a.lastName,displayName:`${a.firstName} ${a.lastName}`,avatar:a.avatar||`https://ui-avatars.com/api/?name=${encodeURIComponent(a.firstName+" "+a.lastName)}&background=667eea&color=fff`,department:a.department||"",position:"",phone:"",organizationId:a.organizationId,role:a.role||"member",status:a.status||"active",bio:"",preferences:{},createdAt:new Date,updatedAt:new Date})}];for(const s of c)try{const o=A(D(this.db,s.collection),b("userId","==",e),E(1));if((await v(o)).empty){console.log(`📝 [UnifiedDataService] Creating missing ${s.name} record for user ${e}`);const d=await N(D(this.db,s.collection),s.createData());t.collectionsCreated.push(`${s.name} (${d.id})`),console.log(`✅ [UnifiedDataService] Created ${s.name} record: ${d.id}`)}else t.collectionsFound.push(s.name),console.log(`✅ [UnifiedDataService] Found existing ${s.name} record`)}catch(o){const i=`Failed to check/create ${s.name}: ${o.message}`;t.errors.push(i),console.error(`❌ [UnifiedDataService] ${i}`,o)}return console.log("📊 [UnifiedDataService] Team member project readiness check complete:",t),t}catch(n){return console.error("❌ [UnifiedDataService] Failed to ensure team member project readiness:",n),t.errors.push(`General error: ${n.message}`),t.success=!1,t}}generateSecurePassword(){const t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";let n="";for(let a=0;a<12;a++)n+=t.charAt(Math.floor(Math.random()*t.length));return n}async updateTeamMember(e,t){try{const n={...t,updatedAt:new Date};await U(h(this.db,"users",e),n),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(n){throw console.error("Error updating team member:",n),n}}async changeTeamMemberPassword(e,t){try{console.log("🔐 [UnifiedDataService] Changing password for member:",e);const n=await fetch(`/api/team-members/${e}/reset-password`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${await this.getAuthToken()}`},body:JSON.stringify({newPassword:t})});if(!n.ok){const a=await n.json().catch(()=>({}));throw new Error(a.message||`Failed to change password: ${n.status}`)}console.log("✅ [UnifiedDataService] Password changed successfully")}catch(n){throw console.error("❌ [UnifiedDataService] Error changing password:",n),n}}async removeTeamMember(e,t){try{console.log("👤 [UnifiedDataService] Starting comprehensive team member removal:",e);const n=await z(h(this.db,"users",e));if(!n.exists()&&!(await z(h(this.db,"teamMembers",e))).exists())throw new Error("Team member not found");const a=n.exists()?n.data():null,c=t||(a==null?void 0:a.organizationId);if(!c)throw new Error("Organization ID is required for team member removal");console.log("🔍 [UnifiedDataService] Team member organization:",c);const s=await this.getAuthToken(),o=await fetch(`${window.location.origin}/api/team-members/remove-completely`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${s}`},body:JSON.stringify({teamMemberId:e,organizationId:c})});if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);const i=await o.json();console.log("✅ [UnifiedDataService] Team member removal completed:",{cleanedCollections:i.cleanedCollections,licenseRestored:i.licenseRestored,firebaseUserDeleted:i.firebaseUserDeleted}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-members-"),this.clearCacheByPattern("project-team-members-"),console.log("✅ [UnifiedDataService] Team member completely removed with full cleanup")}catch(n){throw console.error("❌ [UnifiedDataService] Error removing team member:",n),n}}async assignLicenseToTeamMember(e,t,n,a){try{await U(h(this.db,"users",e),{licenseAssignment:{licenseId:t,licenseKey:n,licenseType:a,assignedAt:new Date},updatedAt:new Date}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-licenses-")}catch(c){throw console.error("Error assigning license to team member:",c),c}}async getDatasetsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-datasets-${e.id}`,n=this.getFromCache(t);if(n)return n;try{const a=A(D(this.db,"datasets"),b("owner.organizationId","==",e.organization.id),b("status","==","ACTIVE"),F("updatedAt","desc")),s=(await v(a)).docs.map(o=>{var d,u;const i=o.data();return{...i,id:o.id,createdAt:((d=i.createdAt)==null?void 0:d.toDate())||new Date,updatedAt:((u=i.updatedAt)==null?void 0:u.toDate())||new Date}});return this.setCache(t,s),s}catch(a){return console.error("Error fetching user datasets:",a),[]}}getFromCache(e){const t=this.cache.get(e);return t?Date.now()>t.timestamp+t.ttl?(this.cache.delete(e),null):t.data:null}setCache(e,t,n=this.CACHE_TTL){this.cache.set(e,{data:t,timestamp:Date.now(),ttl:n})}clearCacheByPattern(e){for(const t of this.cache.keys())t.includes(e)&&this.cache.delete(t)}clearAllCache(){this.cache.clear(),console.log("🧹 [UnifiedDataService] All cache cleared")}async forceRefreshLicenses(){console.log("🔄 [UnifiedDataService] Force refreshing license data..."),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),await this.getLicensesForOrganization(),console.log("✅ [UnifiedDataService] License data force refreshed")}clearUserCache(e){e?(this.clearCacheByPattern("current-user"),this.clearCacheByPattern(`org-users-${e}`),this.clearCacheByPattern("org-context"),this.clearCacheByPattern("org-licenses")):this.clearAllCache()}async getCollectionName(e){const t=C[e];try{const n=A(D(this.db,t),E(1));return await v(n),console.log(`✅ [UnifiedDataService] Using primary collection: ${t}`),t}catch{const a=`${e}_LEGACY`;if(C[a]){const c=C[a];try{const s=A(D(this.db,c),E(1));return await v(s),console.log(`⚠️ [UnifiedDataService] Falling back to legacy collection: ${c}`),c}catch{console.warn(`⚠️ [UnifiedDataService] Both primary and legacy collections failed for ${e}`)}}return console.warn(`⚠️ [UnifiedDataService] Using primary collection name despite access issues: ${t}`),t}}async purchaseLicenses(e){try{if(!await this.getCurrentUser())throw new Error("No authenticated user");console.log("🛒 [UnifiedDataService] Starting license purchase:",e);const n=await this.getAuthToken(),a=await fetch(`${this.getApiBaseUrl()}/licenses/purchase`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n}`},body:JSON.stringify(e)});if(!a.ok){const s=await a.json();throw new Error(s.error||"Purchase failed")}const c=await a.json();if(!c.success)throw new Error(c.error||"Purchase failed");return console.log("✅ [UnifiedDataService] License purchase completed:",c.data),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),this.clearCacheByPattern("subscription-"),this.clearCacheByPattern("invoice-"),setTimeout(()=>{this.forceRefreshLicenses()},1e3),c.data}catch(t){throw console.error("❌ [UnifiedDataService] Error purchasing licenses:",t),new Error(`Failed to purchase licenses: ${t.message}`)}}async getInvoicesForOrganization(){var e;try{const t=await this.getCurrentUser();if(!((e=t==null?void 0:t.organization)!=null&&e.id))return console.log("🔍 [UnifiedDataService] No organization context for invoices"),[];const n=`org-invoices-${t.organization.id}`,a=this.getFromCache(n);if(a&&Array.isArray(a))return console.log("📋 [UnifiedDataService] Returning cached invoices"),a;console.log("📋 [UnifiedDataService] Fetching invoices for organization:",t.organization.id);const c=A(D(this.db,"invoices"),b("organizationId","==",t.organization.id),F("createdAt","desc")),o=(await v(c)).docs.map(i=>{var d,u,f,p,g,y,m,w;return{id:i.id,...i.data(),createdAt:((u=(d=i.data().createdAt)==null?void 0:d.toDate)==null?void 0:u.call(d))||new Date(i.data().createdAt),updatedAt:((p=(f=i.data().updatedAt)==null?void 0:f.toDate)==null?void 0:p.call(f))||new Date(i.data().updatedAt),paidAt:((y=(g=i.data().paidAt)==null?void 0:g.toDate)==null?void 0:y.call(g))||(i.data().paidAt?new Date(i.data().paidAt):null),dueDate:((w=(m=i.data().dueDate)==null?void 0:m.toDate)==null?void 0:w.call(m))||new Date(i.data().dueDate)}});return this.setCache(n,o),console.log(`✅ [UnifiedDataService] Found ${o.length} invoices`),o}catch(t){return console.error("❌ [UnifiedDataService] Error fetching invoices:",t),[]}}async getPaymentsForOrganization(){var e;try{const t=await this.getCurrentUser();if(!((e=t==null?void 0:t.organization)!=null&&e.id))return console.log("🔍 [UnifiedDataService] No organization context for payments"),[];const n=`org-payments-${t.organization.id}`,a=this.getFromCache(n);if(a&&Array.isArray(a))return console.log("💰 [UnifiedDataService] Returning cached payments"),a;console.log("💰 [UnifiedDataService] Fetching payments for organization:",t.organization.id);const c=A(D(this.db,"payments"),b("organizationId","==",t.organization.id),F("createdAt","desc")),o=(await v(c)).docs.map(i=>{var d,u,f,p,g,y;return{id:i.id,...i.data(),createdAt:((u=(d=i.data().createdAt)==null?void 0:d.toDate)==null?void 0:u.call(d))||new Date(i.data().createdAt),updatedAt:((p=(f=i.data().updatedAt)==null?void 0:f.toDate)==null?void 0:p.call(f))||new Date(i.data().updatedAt),processedAt:((y=(g=i.data().processedAt)==null?void 0:g.toDate)==null?void 0:y.call(g))||(i.data().processedAt?new Date(i.data().processedAt):null)}});return this.setCache(n,o),console.log(`✅ [UnifiedDataService] Found ${o.length} payments`),o}catch(t){return console.error("❌ [UnifiedDataService] Error fetching payments:",t),[]}}async getSubscriptionForOrganization(){var e,t,n,a,c,s,o,i,d,u,f;try{const p=await this.getCurrentUser();if(!((e=p==null?void 0:p.organization)!=null&&e.id))return console.log("🔍 [UnifiedDataService] No organization context for subscription"),null;const g=`org-subscription-${p.organization.id}`,y=this.getFromCache(g);if(y)return console.log("📋 [UnifiedDataService] Returning cached subscription"),y;console.log("📋 [UnifiedDataService] Fetching subscription for organization:",p.organization.id);const m=A(D(this.db,"subscriptions"),b("organizationId","==",p.organization.id),F("createdAt","desc"),E(1)),w=await v(m);if(w.empty)return console.log("📋 [UnifiedDataService] No subscription found"),null;const r=w.docs[0],l={id:r.id,...r.data(),createdAt:((n=(t=r.data().createdAt)==null?void 0:t.toDate)==null?void 0:n.call(t))||new Date(r.data().createdAt),updatedAt:((c=(a=r.data().updatedAt)==null?void 0:a.toDate)==null?void 0:c.call(a))||new Date(r.data().updatedAt),currentPeriodStart:((o=(s=r.data().currentPeriodStart)==null?void 0:s.toDate)==null?void 0:o.call(s))||new Date(r.data().currentPeriodStart),currentPeriodEnd:((d=(i=r.data().currentPeriodEnd)==null?void 0:i.toDate)==null?void 0:d.call(i))||new Date(r.data().currentPeriodEnd),activatedAt:((f=(u=r.data().activatedAt)==null?void 0:u.toDate)==null?void 0:f.call(u))||(r.data().activatedAt?new Date(r.data().activatedAt):null)};return this.setCache(g,l),console.log("✅ [UnifiedDataService] Found subscription:",l.id),l}catch(p){return console.error("❌ [UnifiedDataService] Error fetching subscription:",p),null}}static getInstance(){return P.instance||(P.instance=new P),P.instance}};T(P,"instance");let I=P;const H=I.getInstance();export{H as default,H as unifiedDataService};
