const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-CIm7W0QR.js","assets/index-BSUJTHcG.js","assets/mui-Cr9U6iW2.js","assets/vendor-CjD1bmmO.js","assets/stripe-ggaMUove.js","assets/index-CBai7h7s.css","assets/index.esm-DmQE6AXN.js","assets/index.esm-B4qVkIPL.js","assets/index.esm-DeaBpi77.js"])))=>i.map(i=>d[i]);
var O=Object.defineProperty;var x=(N,e,t)=>e in N?O(N,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):N[e]=t;var P=(N,e,t)=>x(N,typeof e!="symbol"?e+"":e,t);import{_ as F}from"./index-BSUJTHcG.js";import{getDoc as U,doc as u,query as w,collection as g,where as y,getDocs as D,updateDoc as f,addDoc as z,arrayUnion as R,arrayRemove as j,limit as M,orderBy as $}from"./index.esm-B4qVkIPL.js";import{COLLECTIONS as v,firestoreCollectionManager as B}from"./FirestoreCollectionManager-BbcLKwR3.js";import"./mui-Cr9U6iW2.js";import"./vendor-CjD1bmmO.js";import"./stripe-ggaMUove.js";import"./index.esm-DmQE6AXN.js";import"./firebase-CIm7W0QR.js";import"./index.esm-DeaBpi77.js";const T=class T{constructor(){P(this,"cache",new Map);P(this,"CACHE_TTL",5*60*1e3);P(this,"db",null);P(this,"auth",null);this.initializeFirebase()}async initializeFirebase(){try{console.log("🔧 [UnifiedDataService] Initializing Firebase...");const{db:e,auth:t}=await F(async()=>{const{db:i,auth:a}=await import("./firebase-CIm7W0QR.js");return{db:i,auth:a}},__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=e,this.auth=t,console.log("✅ [UnifiedDataService] Firebase initialized successfully")}catch(e){throw console.error("❌ [UnifiedDataService] Failed to initialize Firebase:",e),e}}async waitForAuthReady(){var e;return this.auth||await this.initializeFirebase(),(e=this.auth)!=null&&e.currentUser?!0:new Promise(t=>{const i=setTimeout(()=>{t(!1)},5e3),a=this.auth.onAuthStateChanged(o=>{clearTimeout(i),a(),t(!!o)})})}async getAuthToken(){var e;if(!((e=this.auth)!=null&&e.currentUser))throw new Error("No authenticated user found");try{const t=await this.auth.currentUser.getIdToken();if(!t)throw new Error("Failed to get ID token from Firebase Auth");return t}catch(t){throw console.error("❌ [UnifiedDataService] Error getting auth token:",t),new Error("Failed to get authentication token")}}mapUserDocument(e){var i,a,o;const t=e.data();return{id:e.id,email:t.email||"",name:t.name||t.firstName+" "+t.lastName||"Unknown User",userType:t.userType||"TEAM_MEMBER",role:t.role||"member",organization:{id:t.organizationId||t.orgId||"default-org",name:t.organizationName||"Unknown Organization",tier:t.tier||"BASIC",isOwner:t.isOwner||t.role==="OWNER"||!1},license:{type:t.licenseType||t.tier||"BASIC",status:t.status||"ACTIVE",permissions:t.permissions||[],canCreateProjects:t.tier==="ENTERPRISE"||t.tier==="PROFESSIONAL",canManageTeam:t.role==="admin"||t.role==="owner"||t.role==="OWNER"},teamMemberData:t.userType==="TEAM_MEMBER"?{managedBy:t.managedBy||"",department:t.department||"",assignedProjects:t.assignedProjects||[]}:void 0,status:t.status||"ACTIVE",createdAt:((i=t.createdAt)==null?void 0:i.toDate())||new Date,updatedAt:((a=t.updatedAt)==null?void 0:a.toDate())||new Date,lastLoginAt:(o=t.lastLoginAt)==null?void 0:o.toDate()}}async getCurrentUser(){var a;const e="current-user",t=this.getFromCache(e);if(t)return t;if(!await this.waitForAuthReady())return console.log("🔍 [UnifiedDataService] Firebase Auth not ready after waiting"),null;if(!((a=this.auth)!=null&&a.currentUser))return console.log("🔍 [UnifiedDataService] No Firebase Auth user found after auth ready"),null;try{const o=this.auth.currentUser.email,s=this.auth.currentUser.uid;console.log("🔍 [UnifiedDataService] Looking for user:",o,"UID:",s);let c=await U(u(this.db,"users",s));if(c.exists()){console.log("✅ [UnifiedDataService] Found user in users collection");const n=this.mapUserDocument(c);return this.setCache(e,n),n}try{const n=w(g(this.db,"users"),y("email","==",o)),d=await D(n);if(!d.empty){console.log("✅ [UnifiedDataService] Found user by email in users collection");const l=this.mapUserDocument(d.docs[0]);return this.setCache(e,l),l}}catch(n){console.warn("⚠️ [UnifiedDataService] Error querying users by email:",n)}try{const n=w(g(this.db,"orgMembers"),y("email","==",o)),d=await D(n);if(!d.empty){console.log("✅ [UnifiedDataService] Found user in orgMembers collection");const l=this.mapUserDocument(d.docs[0]);return this.setCache(e,l),l}}catch(n){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers:",n)}return console.log("❌ [UnifiedDataService] User not found in any collection"),null}catch(o){return console.error("❌ [UnifiedDataService] Error fetching current user:",o),null}}async getUsersByOrganization(e){const t=`org-users-${e}`,i=this.getFromCache(t);if(i)return i;try{console.log("🔍 [UnifiedDataService] Fetching users for organization:",e),this.db||await this.initializeFirebase();let a=[];try{console.log("🔍 [UnifiedDataService] Trying users collection...");const s=w(g(this.db,"users"),y("organizationId","==",e)),c=await D(s);console.log("📊 [UnifiedDataService] Found",c.docs.length,"users in users collection"),a=a.concat(c.docs.map(n=>this.mapUserDocument(n)))}catch(s){console.warn("⚠️ [UnifiedDataService] Error querying users collection:",s)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers collection...");const s=w(g(this.db,"orgMembers"),y("organizationId","==",e)),c=await D(s);console.log("📊 [UnifiedDataService] Found",c.docs.length,"users in orgMembers collection"),a=a.concat(c.docs.map(n=>this.mapUserDocument(n)))}catch(s){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers collection:",s)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers with orgId field...");const s=w(g(this.db,"orgMembers"),y("orgId","==",e)),c=await D(s);console.log("📊 [UnifiedDataService] Found",c.docs.length,"users in orgMembers with orgId"),a=a.concat(c.docs.map(n=>this.mapUserDocument(n)))}catch(s){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers with orgId:",s)}const o=a.filter((s,c,n)=>c===n.findIndex(d=>d.email===s.email));return this.setCache(t,o),console.log("✅ [UnifiedDataService] Successfully fetched",o.length,"unique users for organization:",e),o}catch(a){return console.error("❌ [UnifiedDataService] Error fetching organization users:",a),a instanceof Error&&(console.error("Error details:",a.message),console.error("Error stack:",a.stack)),[]}}async updateUser(e,t){try{const i={...t,updatedAt:new Date};await f(u(this.db,"users",e),i),this.clearCacheByPattern("current-user"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-context-")}catch(i){throw console.error("Error updating user:",i),i}}safeToDate(e){return e?e instanceof Date?e:typeof e.toDate=="function"?e.toDate():typeof e=="string"?new Date(e):typeof e=="number"?new Date(e):new Date:new Date}async getProjectsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-projects-${e.id}`,i=this.getFromCache(t);if(i)return i;try{const a=w(g(this.db,"projects"),y("organizationId","==",e.organization.id)),s=(await D(a)).docs.map(c=>{const n=c.data();return console.log("🔍 [UnifiedDataService] Processing project data:",{id:c.id,data:n}),{...n,id:c.id,createdAt:this.safeToDate(n.createdAt),updatedAt:this.safeToDate(n.updatedAt),lastAccessedAt:this.safeToDate(n.lastAccessedAt)}});return this.setCache(t,s),s}catch(a){return console.error("Error fetching user projects:",a),[]}}async createProject(e){try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const i={...e,createdAt:new Date,updatedAt:new Date,lastAccessedAt:new Date},a=await z(g(this.db,"projects"),i);return this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("org-projects-"),this.clearCacheByPattern("org-context-"),a.id}catch(t){throw console.error("Error creating project:",t),t}}async updateProject(e,t){try{const i={...t,updatedAt:new Date};await f(u(this.db,"projects",e),i),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(i){throw console.error("Error updating project:",i),i}}async addTeamMemberToProject(e,t,i){try{const a=await U(u(this.db,"users",t));if(!a.exists())throw new Error("User not found");const o=a.data(),s=await this.getCurrentUser(),c={userId:o.id,email:o.email,name:o.name,role:i,assignedAt:new Date,assignedBy:(s==null?void 0:s.email)||"system"};await f(u(this.db,"projects",e),{teamAssignments:R(c),updatedAt:new Date}),await f(u(this.db,"users",t),{"teamMemberData.assignedProjects":R(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(a){throw console.error("Error adding team member to project:",a),a}}async removeTeamMemberFromProject(e,t){try{const i=await U(u(this.db,"projects",e));if(!i.exists())throw new Error("Project not found");const o=i.data().teamAssignments.find(s=>s.userId===t);o&&(await f(u(this.db,"projects",e),{teamAssignments:j(o),updatedAt:new Date}),await f(u(this.db,"users",t),{"teamMemberData.assignedProjects":j(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-"))}catch(i){throw console.error("Error removing team member from project:",i),i}}async getOrganizationContext(){var a,o,s,c,n,d;(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)throw new Error("No authenticated user");const t=`org-context-${e.organization.id}`,i=this.getFromCache(t);if(i)return i;try{const l=await U(u(this.db,"organizations",e.organization.id));if(!l.exists())throw new Error(`Organization ${e.organization.id} not found`);const A=l.data(),S={...A,id:e.organization.id,createdAt:((a=A.createdAt)==null?void 0:a.toDate())||new Date,updatedAt:((o=A.updatedAt)==null?void 0:o.toDate())||new Date},E=w(g(this.db,"subscriptions"),y("organizationId","==",e.organization.id),y("status","==","ACTIVE"),M(1)),h=await D(E);let C=null;if(!h.empty){const r=h.docs[0].data();C={...r,id:h.docs[0].id,createdAt:((s=r.createdAt)==null?void 0:s.toDate())||new Date,updatedAt:((c=r.updatedAt)==null?void 0:c.toDate())||new Date,currentPeriodStart:((n=r.currentPeriodStart)==null?void 0:n.toDate())||new Date,currentPeriodEnd:((d=r.currentPeriodEnd)==null?void 0:d.toDate())||new Date}}let m=[];try{m=await this.getUsersByOrganization(e.organization.id)}catch(r){throw console.error("Failed to get organization members:",r),r}const b={organization:S,subscription:C,members:m};return this.setCache(t,b,10*60*1e3),b}catch(l){throw console.error("Error fetching organization context:",l),l}}async getLicensesForOrganization(){(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)return console.log("🔍 [UnifiedDataService] No user found for license query"),[];console.log("🔍 [UnifiedDataService] Fetching licenses for organization:",e.organization.id);const t=`org-licenses-${e.organization.id}`,i=this.getFromCache(t);if(i)return console.log("📋 [UnifiedDataService] Returning cached licenses:",i.length),i;try{const a=w(g(this.db,"licenses"),y("organizationId","==",e.organization.id),$("createdAt","desc")),o=await D(a);console.log("📊 [UnifiedDataService] Found",o.docs.length,"license documents");const s=o.docs.map(c=>{var d,l,A,S,E,h,C,m;const n=c.data();return{id:c.id,key:n.key||"",name:n.name||`License ${c.id}`,tier:n.tier||"BASIC",status:n.status||"PENDING",organization:n.organization?{id:n.organization.id,name:n.organization.name,tier:n.organization.tier}:{id:n.organizationId||"",name:n.organizationName||"Unknown Organization",tier:n.tier||"BASIC"},assignedTo:n.assignedTo?{userId:n.assignedTo.userId,name:n.assignedTo.name||n.assignedToName||"Unknown User",email:n.assignedTo.email||n.assignedToEmail||"",assignedAt:((d=n.assignedTo.assignedAt)==null?void 0:d.toDate())||((l=n.activatedAt)==null?void 0:l.toDate())||new Date}:n.assignedToUserId?{userId:n.assignedToUserId,name:n.assignedToName||n.assignedToEmail||"Unknown User",email:n.assignedToEmail||"",assignedAt:((A=n.activatedAt)==null?void 0:A.toDate())||new Date}:void 0,usage:n.usage?{apiCalls:n.usage.apiCalls||0,dataTransfer:n.usage.dataTransfer||0,deviceCount:n.usage.deviceCount||1,maxDevices:n.usage.maxDevices||(n.tier==="ENTERPRISE"?10:n.tier==="PROFESSIONAL"?5:2)}:{apiCalls:n.usageCount||0,dataTransfer:0,deviceCount:1,maxDevices:n.tier==="ENTERPRISE"?10:n.tier==="PROFESSIONAL"?5:2},activatedAt:(S=n.activatedAt)==null?void 0:S.toDate(),expiresAt:((E=n.expiresAt)==null?void 0:E.toDate())||new Date,lastUsed:(h=n.lastUsed)==null?void 0:h.toDate(),createdAt:((C=n.createdAt)==null?void 0:C.toDate())||new Date,updatedAt:((m=n.updatedAt)==null?void 0:m.toDate())||new Date}});return console.log("✅ [UnifiedDataService] Processed",s.length,"licenses for organization"),this.setCache(t,s),s}catch(a){return console.error("Error fetching organization licenses:",a),[]}}async createLicense(e){var t,i,a,o,s;try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const n={key:e.key,name:e.name,tier:e.tier,status:e.status,organizationId:e.organization.id,organizationName:e.organization.name,usageCount:((t=e.usage)==null?void 0:t.apiCalls)||0,userId:((i=e.assignedTo)==null?void 0:i.userId)||null,userName:((a=e.assignedTo)==null?void 0:a.name)||null,userEmail:((o=e.assignedTo)==null?void 0:o.email)||null,activatedAt:((s=e.assignedTo)==null?void 0:s.assignedAt)||null,expiresAt:e.expiresAt,lastUsed:null,createdAt:new Date,updatedAt:new Date,organization:e.organization,usage:e.usage};console.log("🎫 [UnifiedDataService] Creating license with Firestore data:",n);const d=await z(g(this.db,"licenses"),n);return this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),console.log("🧹 [UnifiedDataService] Cleared license-related caches"),console.log("✅ [UnifiedDataService] License created with ID:",d.id),setTimeout(()=>{this.forceRefreshLicenses().catch(console.error)},100),d.id}catch(c){throw console.error("❌ [UnifiedDataService] Error creating license:",c),c}}async updateLicense(e,t){try{const i={...t,updatedAt:new Date};await f(u(this.db,"licenses",e),i),this.clearCacheByPattern("org-licenses-")}catch(i){throw console.error("Error updating license:",i),i}}async assignLicense(e,t){try{console.log("🎫 [UnifiedDataService] Assigning license",e,"to user",t);const i=await U(u(this.db,"users",t));if(!i.exists())throw new Error("User not found");const a=i.data(),o=await U(u(this.db,"licenses",e));if(!o.exists())throw new Error("License not found");const s=o.data();console.log("🔍 [UnifiedDataService] User data:",{id:t,email:a.email,name:a.name}),console.log("🔍 [UnifiedDataService] License data:",{id:e,key:s.key,tier:s.tier}),await f(u(this.db,"licenses",e),{assignedTo:{userId:t,name:a.name||a.firstName+" "+a.lastName||a.email,email:a.email,assignedAt:new Date},status:"ACTIVE",updatedAt:new Date}),await f(u(this.db,"users",t),{licenseAssignment:{licenseId:e,licenseKey:s.key,licenseType:s.tier,assignedAt:new Date},updatedAt:new Date});try{const c=w(g(this.db,v.TEAM_MEMBERS),y("userId","==",t),M(1)),n=await D(c);if(!n.empty){const d=n.docs[0];await f(d.ref,{licenseAssignment:{licenseId:e,licenseKey:s.key,licenseType:s.tier,assignedAt:new Date},updatedAt:new Date}),console.log("✅ [UnifiedDataService] Updated teamMembers collection with license assignment")}}catch(c){console.warn("⚠️ [UnifiedDataService] Failed to update teamMembers collection:",c)}try{const c=w(g(this.db,v.ORG_MEMBERS),y("userId","==",t),M(1)),n=await D(c);if(!n.empty){const d=n.docs[0];await f(d.ref,{licenseAssignment:{licenseId:e,licenseKey:s.key,licenseType:s.tier,assignedAt:new Date},updatedAt:new Date}),console.log("✅ [UnifiedDataService] Updated orgMembers collection with license assignment")}}catch(c){console.warn("⚠️ [UnifiedDataService] Failed to update orgMembers collection:",c)}console.log("✅ [UnifiedDataService] License assignment completed - all collections updated"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(i){throw console.error("❌ [UnifiedDataService] Error assigning license:",i),i}}async unassignLicense(e){var t;try{console.log("🎫 [UnifiedDataService] Unassigning license",e);const i=await U(u(this.db,"licenses",e));if(!i.exists())throw new Error("License not found");const o=(t=i.data().assignedTo)==null?void 0:t.userId;if(await f(u(this.db,"licenses",e),{assignedTo:null,status:"PENDING",updatedAt:new Date}),o&&(await f(u(this.db,"users",o),{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from user record",o)),o)try{const s=w(g(this.db,v.TEAM_MEMBERS),y("userId","==",o),M(1)),c=await D(s);if(!c.empty){const n=c.docs[0];await f(n.ref,{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from teamMembers collection")}}catch(s){console.warn("⚠️ [UnifiedDataService] Failed to update teamMembers collection:",s)}if(o)try{const s=w(g(this.db,v.ORG_MEMBERS),y("userId","==",o),M(1)),c=await D(s);if(!c.empty){const n=c.docs[0];await f(n.ref,{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from orgMembers collection")}}catch(s){console.warn("⚠️ [UnifiedDataService] Failed to update orgMembers collection:",s)}console.log("✅ [UnifiedDataService] License unassignment completed - license returned to org pool"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(i){throw console.error("❌ [UnifiedDataService] Error unassigning license:",i),i}}async getTeamMembersForOrganization(){var a,o,s,c,n,d,l,A,S,E;const e=await this.getCurrentUser();if(!e)return[];const t=`org-team-members-${e.organization.id}`,i=this.getFromCache(t);if(i)return i;try{console.log("🔍 [UnifiedDataService] Fetching team members for organization:",e.organization.id);const h=new Map;console.log("🔍 [UnifiedDataService] Trying users collection...");try{const m=await B.queryDocumentsWithFallback("users",[{field:"organizationId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${m.documents.length} users in users collection`);for(const b of m.documents){const r=b;if(r.id===e.id)continue;const p={id:r.id,firstName:r.firstName||((a=r.name)==null?void 0:a.split(" ")[0])||r.email.split("@")[0],lastName:r.lastName||((o=r.name)==null?void 0:o.split(" ")[1])||"",email:r.email,role:r.role||"member",status:r.status==="active"?"active":"pending",organization:{id:r.organizationId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:r.licenseAssignment?{licenseId:r.licenseAssignment.licenseId,licenseKey:r.licenseAssignment.licenseKey,licenseType:r.licenseAssignment.licenseType,assignedAt:r.licenseAssignment.assignedAt}:void 0,department:r.department||"General",assignedProjects:r.assignedProjects||[],avatar:r.avatar,joinedAt:r.createdAt||new Date,lastActive:r.lastActive,invitedBy:r.invitedBy||e.id,createdAt:r.createdAt||new Date,updatedAt:r.updatedAt||new Date};h.set(r.id,p)}}catch(m){console.warn("⚠️ [UnifiedDataService] Users collection query failed:",m)}console.log("🔍 [UnifiedDataService] Trying teamMembers collection...");try{const m=await B.queryDocumentsWithFallback("teamMembers",[{field:"organizationId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${m.documents.length} team members in teamMembers collection`);for(const b of m.documents){const r=b;if(r.status==="removed"||r.status==="suspended")continue;const p={id:r.id,firstName:r.firstName||((s=r.name)==null?void 0:s.split(" ")[0])||r.email.split("@")[0],lastName:r.lastName||((c=r.name)==null?void 0:c.split(" ")[1])||"",email:r.email,role:r.role||"member",status:r.status||"active",organization:{id:r.organizationId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:r.licenseAssignment?{licenseId:r.licenseAssignment.licenseId,licenseKey:r.licenseAssignment.licenseKey,licenseType:r.licenseAssignment.licenseType,assignedAt:r.licenseAssignment.assignedAt}:void 0,department:r.department||"General",assignedProjects:r.assignedProjects||[],avatar:r.avatar,joinedAt:r.joinedAt||r.createdAt||new Date,lastActive:r.lastActive,invitedBy:r.invitedBy||e.id,createdAt:r.createdAt||new Date,updatedAt:r.updatedAt||new Date};h.set(r.id,p)}}catch(m){console.warn("⚠️ [UnifiedDataService] TeamMembers collection query failed:",m)}console.log("🔍 [UnifiedDataService] Trying orgMembers collection...");try{const m=await B.queryDocumentsWithFallback("orgMembers",[{field:"orgId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${m.documents.length} org members in orgMembers collection`);for(const b of m.documents){const r=b;if(r.status==="removed"||r.status==="suspended")continue;const p=h.get(r.userId);if(p)p.role=r.role||p.role,p.status=r.status||p.status,p.department=r.department||p.department,p.joinedAt=r.joinedAt||p.joinedAt,h.set(r.userId,p);else{const k={id:r.userId,firstName:r.firstName||((n=r.name)==null?void 0:n.split(" ")[0])||((d=r.email)==null?void 0:d.split("@")[0])||"Unknown",lastName:r.lastName||((l=r.name)==null?void 0:l.split(" ")[1])||"",email:r.email||r.userEmail||"",role:r.role||"member",status:r.status||"active",organization:{id:r.orgId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:void 0,department:r.department||"General",assignedProjects:[],avatar:r.avatar,joinedAt:r.joinedAt||r.createdAt||new Date,lastActive:r.lastActive,invitedBy:r.invitedBy||e.id,createdAt:r.createdAt||new Date,updatedAt:r.updatedAt||new Date};h.set(r.userId,k)}}}catch(m){console.warn("⚠️ [UnifiedDataService] OrgMembers collection query failed:",m)}console.log("🔍 [UnifiedDataService] Trying org_members collection...");try{const m=await B.queryDocumentsWithFallback("org_members",[{field:"orgId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${m.documents.length} org members in org_members collection`);for(const b of m.documents){const r=b;if(!(r.status==="removed"||r.status==="suspended")&&!h.has(r.userId)){const p={id:r.userId,firstName:r.firstName||((A=r.name)==null?void 0:A.split(" ")[0])||((S=r.email)==null?void 0:S.split("@")[0])||"Unknown",lastName:r.lastName||((E=r.name)==null?void 0:E.split(" ")[1])||"",email:r.email||r.userEmail||"",role:r.role||"member",status:r.status||"active",organization:{id:r.orgId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:void 0,department:r.department||"General",assignedProjects:[],avatar:r.avatar,joinedAt:r.joinedAt||r.createdAt||new Date,lastActive:r.lastActive,invitedBy:r.invitedBy||e.id,createdAt:r.createdAt||new Date,updatedAt:r.updatedAt||new Date};h.set(r.userId,p)}}}catch(m){console.warn("⚠️ [UnifiedDataService] org_members collection query failed:",m)}const C=Array.from(h.values());return console.log(`✅ [UnifiedDataService] Successfully fetched ${C.length} unique team members for organization: ${e.organization.id}`),this.setCache(t,C),C}catch(h){return console.error("❌ [UnifiedDataService] Failed to fetch team members:",h),[]}}async inviteTeamMember(e){var t,i;console.log("📧 [UnifiedDataService] Validating email uniqueness for:",e.email);try{const a=await this.getAuthToken(),o=await fetch(`${window.location.origin}/api/team-members/validate-email`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({email:e.email,organizationId:e.organization.id})});if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);const c=(await o.json()).data;if(!c.canProceed){const n=((t=c.errors)==null?void 0:t.join(", "))||"Email is not valid for this organization";throw console.error("❌ [UnifiedDataService] Email validation failed:",n),new Error(n)}((i=c.warnings)==null?void 0:i.length)>0&&console.warn("⚠️ [UnifiedDataService] Email validation warnings:",c.warnings),console.log("✅ [UnifiedDataService] Email validation passed")}catch(a){throw console.error("❌ [UnifiedDataService] Email validation error:",a),a}try{const a=await this.getCurrentUser();if(!a)throw new Error("No authenticated user");console.log("🔥 [UnifiedDataService] Creating Firebase authenticated user for team member...");const o={email:e.email,firstName:e.firstName,lastName:e.lastName,temporaryPassword:e.temporaryPassword||this.generateSecurePassword(),role:e.role,department:e.department,position:e.position,phone:e.phone,organizationId:e.organization.id,organizationName:e.organization.name,invitedBy:a.email,userType:"TEAM_MEMBER",status:"pending"};console.log("📤 [UnifiedDataService] Sending user creation request to backend...");const s={...e,status:"active",invitedBy:a.email,joinedAt:new Date,createdAt:new Date,updatedAt:new Date,avatar:e.avatar||`https://ui-avatars.com/api/?name=${encodeURIComponent(e.firstName+" "+e.lastName)}&background=667eea&color=fff`},{position:c,phone:n,temporaryPassword:d,...l}=e;console.log("🔍 [UnifiedDataService] Filtered team member data for Firestore:",l),console.log("🔍 [UnifiedDataService] Department field in Firestore data:",l.department),console.log("🔍 [UnifiedDataService] Department field type:",typeof l.department),console.log("📝 [UnifiedDataService] Creating comprehensive team member records for full project coordination..."),console.log("📝 [UnifiedDataService] Creating user record in users collection...");const A=await z(g(this.db,v.USERS),{...l,organizationId:e.organization.id,userType:"TEAM_MEMBER",isTeamMember:!0,firebaseUid:"",isEmailVerified:!1,createdAt:new Date,updatedAt:new Date});console.log("📝 [UnifiedDataService] Creating team member record in teamMembers collection...");const S=await z(g(this.db,v.TEAM_MEMBERS),{...l,userId:A.id,organizationId:e.organization.id,orgId:e.organization.id,position:c||"",phone:n||"",isActive:!0,firebaseUid:"",createdAt:new Date,updatedAt:new Date});console.log("📝 [UnifiedDataService] Creating organization member record in orgMembers collection...");const E=await z(g(this.db,v.ORG_MEMBERS),{organizationId:e.organization.id,orgId:e.organization.id,userId:A.id,email:e.email,name:`${e.firstName} ${e.lastName}`,firstName:e.firstName,lastName:e.lastName,role:e.role||"member",status:e.status||"pending",seatReserved:!0,department:e.department||"",invitedByUserId:a.id||"system",invitedAt:new Date,joinedAt:e.status==="active"?new Date:null,createdAt:new Date,updatedAt:new Date});console.log("📝 [UnifiedDataService] Creating user profile record...");const h=await z(g(this.db,v.USER_PROFILES),{userId:A.id,email:e.email,firstName:e.firstName,lastName:e.lastName,displayName:`${e.firstName} ${e.lastName}`,avatar:e.avatar||`https://ui-avatars.com/api/?name=${encodeURIComponent(e.firstName+" "+e.lastName)}&background=667eea&color=fff`,department:e.department||"",position:c||"",phone:n||"",organizationId:e.organization.id,role:e.role||"member",status:e.status||"pending",bio:"",preferences:{},createdAt:new Date,updatedAt:new Date});return console.log("✅ [UnifiedDataService] Complete team member creation successful:"),console.log("   - User ID:",A.id),console.log("   - Team Member ID:",S.id),console.log("   - Org Member ID:",E.id),console.log("   - User Profile ID:",h.id),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-members-"),this.clearCacheByPattern("user-profiles-"),A.id}catch(a){throw console.error("❌ [UnifiedDataService] Error creating team member:",a),a}}async ensureTeamMemberProjectReadiness(e){const t={success:!0,collectionsCreated:[],collectionsFound:[],errors:[]};try{console.log("🔍 [UnifiedDataService] Checking team member project readiness for userId:",e);const i=await U(u(this.db,v.USERS,e));if(!i.exists())return t.errors.push("User record not found"),t.success=!1,t;const a=i.data();console.log("📋 [UnifiedDataService] Found user data:",a);const o=[{name:"teamMembers",collection:v.TEAM_MEMBERS,createData:()=>({userId:e,email:a.email,firstName:a.firstName,lastName:a.lastName,name:`${a.firstName} ${a.lastName}`,role:a.role||"member",status:a.status||"active",organizationId:a.organizationId,orgId:a.organizationId,department:a.department||"",isActive:!0,firebaseUid:a.firebaseUid||"",createdAt:new Date,updatedAt:new Date})},{name:"orgMembers",collection:v.ORG_MEMBERS,createData:()=>({organizationId:a.organizationId,orgId:a.organizationId,userId:e,email:a.email,name:`${a.firstName} ${a.lastName}`,firstName:a.firstName,lastName:a.lastName,role:a.role||"member",status:a.status||"active",seatReserved:!0,department:a.department||"",invitedByUserId:"system",invitedAt:new Date,joinedAt:new Date,createdAt:new Date,updatedAt:new Date})},{name:"userProfiles",collection:v.USER_PROFILES,createData:()=>({userId:e,email:a.email,firstName:a.firstName,lastName:a.lastName,displayName:`${a.firstName} ${a.lastName}`,avatar:a.avatar||`https://ui-avatars.com/api/?name=${encodeURIComponent(a.firstName+" "+a.lastName)}&background=667eea&color=fff`,department:a.department||"",position:"",phone:"",organizationId:a.organizationId,role:a.role||"member",status:a.status||"active",bio:"",preferences:{},createdAt:new Date,updatedAt:new Date})}];for(const s of o)try{const c=w(g(this.db,s.collection),y("userId","==",e),M(1));if((await D(c)).empty){console.log(`📝 [UnifiedDataService] Creating missing ${s.name} record for user ${e}`);const d=await z(g(this.db,s.collection),s.createData());t.collectionsCreated.push(`${s.name} (${d.id})`),console.log(`✅ [UnifiedDataService] Created ${s.name} record: ${d.id}`)}else t.collectionsFound.push(s.name),console.log(`✅ [UnifiedDataService] Found existing ${s.name} record`)}catch(c){const n=`Failed to check/create ${s.name}: ${c.message}`;t.errors.push(n),console.error(`❌ [UnifiedDataService] ${n}`,c)}return console.log("📊 [UnifiedDataService] Team member project readiness check complete:",t),t}catch(i){return console.error("❌ [UnifiedDataService] Failed to ensure team member project readiness:",i),t.errors.push(`General error: ${i.message}`),t.success=!1,t}}generateSecurePassword(){const t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";let i="";for(let a=0;a<12;a++)i+=t.charAt(Math.floor(Math.random()*t.length));return i}async updateTeamMember(e,t){try{const i={...t,updatedAt:new Date};await f(u(this.db,"users",e),i),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(i){throw console.error("Error updating team member:",i),i}}async changeTeamMemberPassword(e,t){try{console.log("🔐 [UnifiedDataService] Changing password for member:",e);const i=await fetch(`/api/team-members/${e}/reset-password`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${await this.getAuthToken()}`},body:JSON.stringify({newPassword:t})});if(!i.ok){const a=await i.json().catch(()=>({}));throw new Error(a.message||`Failed to change password: ${i.status}`)}console.log("✅ [UnifiedDataService] Password changed successfully")}catch(i){throw console.error("❌ [UnifiedDataService] Error changing password:",i),i}}async removeTeamMember(e,t){try{console.log("👤 [UnifiedDataService] Starting comprehensive team member removal:",e);const i=await U(u(this.db,"users",e));if(!i.exists()&&!(await U(u(this.db,"teamMembers",e))).exists())throw new Error("Team member not found");const a=i.exists()?i.data():null,o=t||(a==null?void 0:a.organizationId);if(!o)throw new Error("Organization ID is required for team member removal");console.log("🔍 [UnifiedDataService] Team member organization:",o);const{api:s}=await F(async()=>{const{api:d}=await import("./index-BSUJTHcG.js").then(l=>l.f);return{api:d}},__vite__mapDeps([1,2,3,4,5])),n=(await s.post("/team-members/remove-completely",{teamMemberId:e,organizationId:o})).data;console.log("✅ [UnifiedDataService] Team member removal completed:",{cleanedCollections:n.cleanedCollections,licenseRestored:n.licenseRestored,firebaseUserDeleted:n.firebaseUserDeleted}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-members-"),this.clearCacheByPattern("project-team-members-"),console.log("✅ [UnifiedDataService] Team member completely removed with full cleanup")}catch(i){throw console.error("❌ [UnifiedDataService] Error removing team member:",i),i}}async assignLicenseToTeamMember(e,t,i,a){try{await f(u(this.db,"users",e),{licenseAssignment:{licenseId:t,licenseKey:i,licenseType:a,assignedAt:new Date},updatedAt:new Date}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-licenses-")}catch(o){throw console.error("Error assigning license to team member:",o),o}}async getDatasetsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-datasets-${e.id}`,i=this.getFromCache(t);if(i)return i;try{const a=w(g(this.db,"datasets"),y("owner.organizationId","==",e.organization.id),y("status","==","ACTIVE"),$("updatedAt","desc")),s=(await D(a)).docs.map(c=>{var d,l;const n=c.data();return{...n,id:c.id,createdAt:((d=n.createdAt)==null?void 0:d.toDate())||new Date,updatedAt:((l=n.updatedAt)==null?void 0:l.toDate())||new Date}});return this.setCache(t,s),s}catch(a){return console.error("Error fetching user datasets:",a),[]}}getFromCache(e){const t=this.cache.get(e);return t?Date.now()>t.timestamp+t.ttl?(this.cache.delete(e),null):t.data:null}setCache(e,t,i=this.CACHE_TTL){this.cache.set(e,{data:t,timestamp:Date.now(),ttl:i})}clearCacheByPattern(e){for(const t of this.cache.keys())t.includes(e)&&this.cache.delete(t)}clearAllCache(){this.cache.clear(),console.log("🧹 [UnifiedDataService] All cache cleared")}async forceRefreshLicenses(){console.log("🔄 [UnifiedDataService] Force refreshing license data..."),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),await this.getLicensesForOrganization(),console.log("✅ [UnifiedDataService] License data force refreshed")}clearUserCache(e){e?(this.clearCacheByPattern("current-user"),this.clearCacheByPattern(`org-users-${e}`),this.clearCacheByPattern("org-context"),this.clearCacheByPattern("org-licenses")):this.clearAllCache()}async getCollectionName(e){const t=v[e];try{const i=w(g(this.db,t),M(1));return await D(i),console.log(`✅ [UnifiedDataService] Using primary collection: ${t}`),t}catch{const a=`${e}_LEGACY`;if(v[a]){const o=v[a];try{const s=w(g(this.db,o),M(1));return await D(s),console.log(`⚠️ [UnifiedDataService] Falling back to legacy collection: ${o}`),o}catch{console.warn(`⚠️ [UnifiedDataService] Both primary and legacy collections failed for ${e}`)}}return console.warn(`⚠️ [UnifiedDataService] Using primary collection name despite access issues: ${t}`),t}}static getInstance(){return T.instance||(T.instance=new T),T.instance}};P(T,"instance");let I=T;const Y=I.getInstance();export{Y as default,Y as unifiedDataService};
