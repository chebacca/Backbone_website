const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-Dm8Ngwai.js","assets/index-DkiLlagR.js","assets/mui-Dvh35qVf.js","assets/vendor-CjD1bmmO.js","assets/stripe-CbtnRl6i.js","assets/index-CBai7h7s.css","assets/index.esm-D7ujsXeY.js","assets/index.esm-DonjM_pP.js","assets/index.esm-D2YDx4vs.js"])))=>i.map(i=>d[i]);
var F=Object.defineProperty;var I=(E,t,e)=>t in E?F(E,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):E[t]=e;var C=(E,t,e)=>I(E,typeof t!="symbol"?t+"":t,e);import{_ as R}from"./index-DkiLlagR.js";import{getDoc as U,doc as u,query as w,collection as h,where as m,getDocs as y,updateDoc as g,addDoc as P,arrayUnion as T,arrayRemove as j,limit as N,orderBy as v}from"./index.esm-DonjM_pP.js";import"./mui-Dvh35qVf.js";import"./vendor-CjD1bmmO.js";import"./stripe-CbtnRl6i.js";import"./index.esm-D7ujsXeY.js";const A=class A{constructor(){C(this,"cache",new Map);C(this,"CACHE_TTL",5*60*1e3);C(this,"db",null);C(this,"auth",null);this.initializeFirebase()}async initializeFirebase(){try{console.log("🔧 [UnifiedDataService] Initializing Firebase...");const{db:t,auth:e}=await R(async()=>{const{db:r,auth:s}=await import("./firebase-Dm8Ngwai.js");return{db:r,auth:s}},__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=t,this.auth=e,console.log("✅ [UnifiedDataService] Firebase initialized successfully")}catch(t){throw console.error("❌ [UnifiedDataService] Failed to initialize Firebase:",t),t}}async waitForAuthReady(){var t;return this.auth||await this.initializeFirebase(),(t=this.auth)!=null&&t.currentUser?!0:new Promise(e=>{const r=setTimeout(()=>{e(!1)},5e3),s=this.auth.onAuthStateChanged(o=>{clearTimeout(r),s(),e(!!o)})})}mapUserDocument(t){var r,s,o;const e=t.data();return{id:t.id,email:e.email||"",name:e.name||e.firstName+" "+e.lastName||"Unknown User",userType:e.userType||"TEAM_MEMBER",role:e.role||"member",organization:{id:e.organizationId||e.orgId||"default-org",name:e.organizationName||"Unknown Organization",tier:e.tier||"BASIC",isOwner:e.isOwner||e.role==="OWNER"||!1},license:{type:e.licenseType||e.tier||"BASIC",status:e.status||"ACTIVE",permissions:e.permissions||[],canCreateProjects:e.tier==="ENTERPRISE"||e.tier==="PROFESSIONAL",canManageTeam:e.role==="admin"||e.role==="owner"||e.role==="OWNER"},teamMemberData:e.userType==="TEAM_MEMBER"?{managedBy:e.managedBy||"",department:e.department||"",assignedProjects:e.assignedProjects||[]}:void 0,status:e.status||"ACTIVE",createdAt:((r=e.createdAt)==null?void 0:r.toDate())||new Date,updatedAt:((s=e.updatedAt)==null?void 0:s.toDate())||new Date,lastLoginAt:(o=e.lastLoginAt)==null?void 0:o.toDate()}}async getCurrentUser(){var s;const t="current-user",e=this.getFromCache(t);if(e)return e;if(!await this.waitForAuthReady())return console.log("🔍 [UnifiedDataService] Firebase Auth not ready after waiting"),null;if(!((s=this.auth)!=null&&s.currentUser))return console.log("🔍 [UnifiedDataService] No Firebase Auth user found after auth ready"),null;try{const o=this.auth.currentUser.email,n=this.auth.currentUser.uid;console.log("🔍 [UnifiedDataService] Looking for user:",o,"UID:",n);let i=await U(u(this.db,"users",n));if(i.exists()){console.log("✅ [UnifiedDataService] Found user in users collection");const a=this.mapUserDocument(i);return this.setCache(t,a),a}try{const a=w(h(this.db,"users"),m("email","==",o)),d=await y(a);if(!d.empty){console.log("✅ [UnifiedDataService] Found user by email in users collection");const c=this.mapUserDocument(d.docs[0]);return this.setCache(t,c),c}}catch(a){console.warn("⚠️ [UnifiedDataService] Error querying users by email:",a)}try{const a=w(h(this.db,"orgMembers"),m("email","==",o)),d=await y(a);if(!d.empty){console.log("✅ [UnifiedDataService] Found user in orgMembers collection");const c=this.mapUserDocument(d.docs[0]);return this.setCache(t,c),c}}catch(a){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers:",a)}return console.log("❌ [UnifiedDataService] User not found in any collection"),null}catch(o){return console.error("❌ [UnifiedDataService] Error fetching current user:",o),null}}async getUsersByOrganization(t){const e=`org-users-${t}`,r=this.getFromCache(e);if(r)return r;try{console.log("🔍 [UnifiedDataService] Fetching users for organization:",t),this.db||await this.initializeFirebase();let s=[];try{console.log("🔍 [UnifiedDataService] Trying users collection...");const n=w(h(this.db,"users"),m("organizationId","==",t)),i=await y(n);console.log("📊 [UnifiedDataService] Found",i.docs.length,"users in users collection"),s=s.concat(i.docs.map(a=>this.mapUserDocument(a)))}catch(n){console.warn("⚠️ [UnifiedDataService] Error querying users collection:",n)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers collection...");const n=w(h(this.db,"orgMembers"),m("organizationId","==",t)),i=await y(n);console.log("📊 [UnifiedDataService] Found",i.docs.length,"users in orgMembers collection"),s=s.concat(i.docs.map(a=>this.mapUserDocument(a)))}catch(n){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers collection:",n)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers with orgId field...");const n=w(h(this.db,"orgMembers"),m("orgId","==",t)),i=await y(n);console.log("📊 [UnifiedDataService] Found",i.docs.length,"users in orgMembers with orgId"),s=s.concat(i.docs.map(a=>this.mapUserDocument(a)))}catch(n){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers with orgId:",n)}const o=s.filter((n,i,a)=>i===a.findIndex(d=>d.email===n.email));return this.setCache(e,o),console.log("✅ [UnifiedDataService] Successfully fetched",o.length,"unique users for organization:",t),o}catch(s){return console.error("❌ [UnifiedDataService] Error fetching organization users:",s),s instanceof Error&&(console.error("Error details:",s.message),console.error("Error stack:",s.stack)),[]}}async updateUser(t,e){try{const r={...e,updatedAt:new Date};await g(u(this.db,"users",t),r),this.clearCacheByPattern("current-user"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-context-")}catch(r){throw console.error("Error updating user:",r),r}}async getProjectsForUser(){const t=await this.getCurrentUser();if(!t)return[];const e=`user-projects-${t.id}`,r=this.getFromCache(e);if(r)return r;try{const s=w(h(this.db,"projects"),m("organizationId","==",t.organization.id)),n=(await y(s)).docs.map(i=>{var d,c,l;const a=i.data();return{...a,id:i.id,createdAt:((d=a.createdAt)==null?void 0:d.toDate())||new Date,updatedAt:((c=a.updatedAt)==null?void 0:c.toDate())||new Date,lastAccessedAt:((l=a.lastAccessedAt)==null?void 0:l.toDate())||new Date}});return this.setCache(e,n),n}catch(s){return console.error("Error fetching user projects:",s),[]}}async createProject(t){try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const r={...t,createdAt:new Date,updatedAt:new Date,lastAccessedAt:new Date},s=await P(h(this.db,"projects"),r);return this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("org-projects-"),this.clearCacheByPattern("org-context-"),s.id}catch(e){throw console.error("Error creating project:",e),e}}async updateProject(t,e){try{const r={...e,updatedAt:new Date};await g(u(this.db,"projects",t),r),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(r){throw console.error("Error updating project:",r),r}}async addTeamMemberToProject(t,e,r){try{const s=await U(u(this.db,"users",e));if(!s.exists())throw new Error("User not found");const o=s.data(),n=await this.getCurrentUser(),i={userId:o.id,email:o.email,name:o.name,role:r,assignedAt:new Date,assignedBy:(n==null?void 0:n.email)||"system"};await g(u(this.db,"projects",t),{teamAssignments:T(i),updatedAt:new Date}),await g(u(this.db,"users",e),{"teamMemberData.assignedProjects":T(t),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(s){throw console.error("Error adding team member to project:",s),s}}async removeTeamMemberFromProject(t,e){try{const r=await U(u(this.db,"projects",t));if(!r.exists())throw new Error("Project not found");const o=r.data().teamAssignments.find(n=>n.userId===e);o&&(await g(u(this.db,"projects",t),{teamAssignments:j(o),updatedAt:new Date}),await g(u(this.db,"users",e),{"teamMemberData.assignedProjects":j(t),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-"))}catch(r){throw console.error("Error removing team member from project:",r),r}}async getOrganizationContext(){var s,o,n,i,a,d;(!this.auth||!this.db)&&await this.initializeFirebase();const t=await this.getCurrentUser();if(!t)throw new Error("No authenticated user");const e=`org-context-${t.organization.id}`,r=this.getFromCache(e);if(r)return r;try{const c=await U(u(this.db,"organizations",t.organization.id));if(!c.exists())throw new Error(`Organization ${t.organization.id} not found`);const l=c.data(),p={...l,id:t.organization.id,createdAt:((s=l.createdAt)==null?void 0:s.toDate())||new Date,updatedAt:((o=l.updatedAt)==null?void 0:o.toDate())||new Date},b=w(h(this.db,"subscriptions"),m("organizationId","==",t.organization.id),m("status","==","ACTIVE"),N(1)),f=await y(b);let S=null;if(!f.empty){const D=f.docs[0].data();S={...D,id:f.docs[0].id,createdAt:((n=D.createdAt)==null?void 0:n.toDate())||new Date,updatedAt:((i=D.updatedAt)==null?void 0:i.toDate())||new Date,currentPeriodStart:((a=D.currentPeriodStart)==null?void 0:a.toDate())||new Date,currentPeriodEnd:((d=D.currentPeriodEnd)==null?void 0:d.toDate())||new Date}}let B=[];try{B=await this.getUsersByOrganization(t.organization.id)}catch(D){throw console.error("Failed to get organization members:",D),D}const M={organization:p,subscription:S,members:B};return this.setCache(e,M,10*60*1e3),M}catch(c){throw console.error("Error fetching organization context:",c),c}}async getLicensesForOrganization(){(!this.auth||!this.db)&&await this.initializeFirebase();const t=await this.getCurrentUser();if(!t)return console.log("🔍 [UnifiedDataService] No user found for license query"),[];const e=`org-licenses-${t.organization.id}`,r=this.getFromCache(e);if(r)return r;try{const s=w(h(this.db,"licenses"),m("organizationId","==",t.organization.id),v("createdAt","desc")),n=(await y(s)).docs.map(i=>{var d,c,l,p,b,f;const a=i.data();return{id:i.id,key:a.key||"",name:a.name||`License ${i.id}`,tier:a.tier||"BASIC",status:a.status||"PENDING",organization:{id:a.organizationId||"",name:a.organizationName||"Unknown Organization",tier:a.tier||"BASIC"},assignedTo:a.userId?{userId:a.userId,name:a.userName||a.userEmail||"Unknown User",email:a.userEmail||"",assignedAt:((d=a.activatedAt)==null?void 0:d.toDate())||new Date}:void 0,usage:{apiCalls:a.usageCount||0,dataTransfer:0,deviceCount:1,maxDevices:a.tier==="ENTERPRISE"?10:a.tier==="PROFESSIONAL"?5:2},activatedAt:(c=a.activatedAt)==null?void 0:c.toDate(),expiresAt:((l=a.expiresAt)==null?void 0:l.toDate())||new Date,lastUsed:(p=a.lastUsed)==null?void 0:p.toDate(),createdAt:((b=a.createdAt)==null?void 0:b.toDate())||new Date,updatedAt:((f=a.updatedAt)==null?void 0:f.toDate())||new Date}});return this.setCache(e,n),n}catch(s){return console.error("Error fetching organization licenses:",s),[]}}async createLicense(t){try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const r={...t,createdAt:new Date,updatedAt:new Date},s=await P(h(this.db,"licenses"),r);return this.clearCacheByPattern("org-licenses-"),s.id}catch(e){throw console.error("Error creating license:",e),e}}async updateLicense(t,e){try{const r={...e,updatedAt:new Date};await g(u(this.db,"licenses",t),r),this.clearCacheByPattern("org-licenses-")}catch(r){throw console.error("Error updating license:",r),r}}async assignLicense(t,e){try{const r=await U(u(this.db,"users",e));if(!r.exists())throw new Error("User not found");const s=r.data();await g(u(this.db,"licenses",t),{assignedTo:{userId:e,name:s.name||s.email,email:s.email,assignedAt:new Date},status:"ACTIVE",updatedAt:new Date}),this.clearCacheByPattern("org-licenses-")}catch(r){throw console.error("Error assigning license:",r),r}}async unassignLicense(t){try{await g(u(this.db,"licenses",t),{assignedTo:null,updatedAt:new Date}),this.clearCacheByPattern("org-licenses-")}catch(e){throw console.error("Error unassigning license:",e),e}}async getTeamMembersForOrganization(){const t=await this.getCurrentUser();if(!t)return[];const e=`org-team-members-${t.organization.id}`,r=this.getFromCache(e);if(r)return r;try{const s=w(h(this.db,"teamMembers"),m("organizationId","==",t.organization.id),v("createdAt","desc")),n=(await y(s)).docs.map(i=>{var d,c,l,p,b;const a=i.data();return{...a,id:i.id,createdAt:((d=a.createdAt)==null?void 0:d.toDate())||new Date,updatedAt:((c=a.updatedAt)==null?void 0:c.toDate())||new Date,joinedAt:((l=a.joinedAt)==null?void 0:l.toDate())||new Date,lastActive:(p=a.lastActive)==null?void 0:p.toDate(),licenseAssignment:a.licenseAssignment?{...a.licenseAssignment,assignedAt:((b=a.licenseAssignment.assignedAt)==null?void 0:b.toDate())||new Date}:void 0}});return this.setCache(e,n),n}catch(s){return console.error("Error fetching team members:",s),[]}}async inviteTeamMember(t){try{const e=await this.getCurrentUser();if(!e)throw new Error("No authenticated user");const r={...t,status:"pending",invitedBy:e.email,joinedAt:new Date,createdAt:new Date,updatedAt:new Date},s=await P(h(this.db,"team_members"),r);return this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),s.id}catch(e){throw console.error("Error inviting team member:",e),e}}async updateTeamMember(t,e){try{const r={...e,updatedAt:new Date};await g(u(this.db,"team_members",t),r),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(r){throw console.error("Error updating team member:",r),r}}async removeTeamMember(t){try{await g(u(this.db,"team_members",t),{status:"removed",updatedAt:new Date}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(e){throw console.error("Error removing team member:",e),e}}async assignLicenseToTeamMember(t,e,r,s){try{await g(u(this.db,"team_members",t),{licenseAssignment:{licenseId:e,licenseKey:r,licenseType:s,assignedAt:new Date},updatedAt:new Date}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-licenses-")}catch(o){throw console.error("Error assigning license to team member:",o),o}}async getDatasetsForUser(){const t=await this.getCurrentUser();if(!t)return[];const e=`user-datasets-${t.id}`,r=this.getFromCache(e);if(r)return r;try{const s=w(h(this.db,"datasets"),m("owner.organizationId","==",t.organization.id),m("status","==","ACTIVE"),v("updatedAt","desc")),n=(await y(s)).docs.map(i=>{var d,c;const a=i.data();return{...a,id:i.id,createdAt:((d=a.createdAt)==null?void 0:d.toDate())||new Date,updatedAt:((c=a.updatedAt)==null?void 0:c.toDate())||new Date}});return this.setCache(e,n),n}catch(s){return console.error("Error fetching user datasets:",s),[]}}getFromCache(t){const e=this.cache.get(t);return e?Date.now()>e.timestamp+e.ttl?(this.cache.delete(t),null):e.data:null}setCache(t,e,r=this.CACHE_TTL){this.cache.set(t,{data:e,timestamp:Date.now(),ttl:r})}clearCacheByPattern(t){for(const e of this.cache.keys())e.includes(t)&&this.cache.delete(e)}clearAllCache(){this.cache.clear()}clearUserCache(t){t?(this.clearCacheByPattern("current-user"),this.clearCacheByPattern(`org-users-${t}`),this.clearCacheByPattern("org-context"),this.clearCacheByPattern("org-licenses")):this.clearAllCache()}static getInstance(){return A.instance||(A.instance=new A),A.instance}};C(A,"instance");let z=A;const $=z.getInstance();export{$ as default,$ as unifiedDataService};
