const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-DyjCcCis.js","assets/index-CC1PJqr4.js","assets/mui-L6QpU7G9.js","assets/vendor-CjD1bmmO.js","assets/stripe-DjH5xBT-.js","assets/index-CBai7h7s.css","assets/index.esm-Dkmm1Qng.js","assets/index.esm-DdZh2hq1.js","assets/index.esm-e-DuI42t.js"])))=>i.map(i=>d[i]);
var j=Object.defineProperty;var R=(P,e,t)=>e in P?j(P,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):P[e]=t;var T=(P,e,t)=>R(P,typeof e!="symbol"?e+"":e,t);import{_ as k}from"./index-CC1PJqr4.js";import{getDoc as S,doc as m,query as D,collection as h,where as y,getDocs as w,updateDoc as b,addDoc as F,setDoc as O,arrayUnion as B,arrayRemove as $,limit as E,orderBy as M}from"./index.esm-DdZh2hq1.js";import{COLLECTIONS as C,firestoreCollectionManager as I}from"./FirestoreCollectionManager-sXGJepzW.js";import"./mui-L6QpU7G9.js";import"./vendor-CjD1bmmO.js";import"./stripe-DjH5xBT-.js";import"./index.esm-Dkmm1Qng.js";import"./firebase-DyjCcCis.js";import"./index.esm-e-DuI42t.js";const z=class z{constructor(){T(this,"cache",new Map);T(this,"CACHE_TTL",5*60*1e3);T(this,"db",null);T(this,"auth",null);this.initializeFirebase()}getApiBaseUrl(){return console.log("[UnifiedDataService] PRODUCTION MODE: Using Cloud Run API endpoint"),"https://us-central1-backbone-logic.cloudfunctions.net/api"}async initializeFirebase(){try{console.log("🔧 [UnifiedDataService] Initializing Firebase...");const{db:e,auth:t}=await k(async()=>{const{db:i,auth:r}=await import("./firebase-DyjCcCis.js").then(c=>c.f);return{db:i,auth:r}},__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=e,this.auth=t,console.log("✅ [UnifiedDataService] Firebase initialized successfully")}catch(e){throw console.error("❌ [UnifiedDataService] Failed to initialize Firebase:",e),e}}async waitForAuthReady(){var e;return this.auth||await this.initializeFirebase(),(e=this.auth)!=null&&e.currentUser?!0:new Promise(t=>{const i=setTimeout(()=>{t(!1)},5e3),r=this.auth.onAuthStateChanged(c=>{clearTimeout(i),r(),t(!!c)})})}async getAuthToken(){var e;if(!((e=this.auth)!=null&&e.currentUser))throw new Error("No authenticated user found");try{const t=await this.auth.currentUser.getIdToken();if(!t)throw new Error("Failed to get ID token from Firebase Auth");return t}catch(t){throw console.error("❌ [UnifiedDataService] Error getting auth token:",t),new Error("Failed to get authentication token")}}mapUserDocument(e){const t=e.data();return{id:e.id,email:t.email||"",name:t.name||t.firstName+" "+t.lastName||"Unknown User",userType:t.userType||"TEAM_MEMBER",role:t.role||"member",organization:{id:t.organizationId||t.orgId||"default-org",name:t.organizationName||"Unknown Organization",tier:t.tier||"BASIC",isOwner:t.isOwner||t.role==="OWNER"||!1},license:{type:t.licenseType||t.tier||"BASIC",status:t.status||"ACTIVE",permissions:t.permissions||[],canCreateProjects:t.tier==="ENTERPRISE"||t.tier==="PROFESSIONAL",canManageTeam:t.role==="admin"||t.role==="owner"||t.role==="OWNER"},teamMemberData:t.userType==="TEAM_MEMBER"?{managedBy:t.managedBy||"",department:t.department||"",assignedProjects:t.assignedProjects||[]}:void 0,status:t.status||"ACTIVE",createdAt:this.safeToDate(t.createdAt),updatedAt:this.safeToDate(t.updatedAt),lastLoginAt:t.lastLoginAt?this.safeToDate(t.lastLoginAt):void 0}}async getCurrentUser(){var r;const e="current-user",t=this.getFromCache(e);if(t)return t;if(!await this.waitForAuthReady())return console.log("🔍 [UnifiedDataService] Firebase Auth not ready after waiting"),null;if(!((r=this.auth)!=null&&r.currentUser))return console.log("🔍 [UnifiedDataService] No Firebase Auth user found after auth ready"),null;try{const c=this.auth.currentUser.email,n=this.auth.currentUser.uid;console.log("🔍 [UnifiedDataService] Looking for user:",c,"UID:",n);let o=await S(m(this.db,"users",n));if(o.exists()){console.log("✅ [UnifiedDataService] Found user in users collection");const a=this.mapUserDocument(o);return this.setCache(e,a),a}try{const a=D(h(this.db,"users"),y("email","==",c)),l=await w(a);if(!l.empty){console.log("✅ [UnifiedDataService] Found user by email in users collection");const d=this.mapUserDocument(l.docs[0]);return this.setCache(e,d),d}}catch(a){console.warn("⚠️ [UnifiedDataService] Error querying users by email:",a)}try{const a=D(h(this.db,"orgMembers"),y("email","==",c)),l=await w(a);if(!l.empty){console.log("✅ [UnifiedDataService] Found user in orgMembers collection");const d=this.mapUserDocument(l.docs[0]);return this.setCache(e,d),d}}catch(a){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers:",a)}return console.log("❌ [UnifiedDataService] User not found in any collection"),null}catch(c){return console.error("❌ [UnifiedDataService] Error fetching current user:",c),null}}async getUsersByOrganization(e){const t=`org-users-${e}`,i=this.getFromCache(t);if(i)return i;try{console.log("🔍 [UnifiedDataService] Fetching users for organization:",e),this.db||await this.initializeFirebase();let r=[];try{console.log("🔍 [UnifiedDataService] Trying users collection...");const n=D(h(this.db,"users"),y("organizationId","==",e)),o=await w(n);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in users collection"),r=r.concat(o.docs.map(a=>this.mapUserDocument(a)))}catch(n){console.warn("⚠️ [UnifiedDataService] Error querying users collection:",n)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers collection...");const n=D(h(this.db,"orgMembers"),y("organizationId","==",e)),o=await w(n);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in orgMembers collection"),r=r.concat(o.docs.map(a=>this.mapUserDocument(a)))}catch(n){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers collection:",n)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers with orgId field...");const n=D(h(this.db,"orgMembers"),y("orgId","==",e)),o=await w(n);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in orgMembers with orgId"),r=r.concat(o.docs.map(a=>this.mapUserDocument(a)))}catch(n){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers with orgId:",n)}const c=r.filter((n,o,a)=>o===a.findIndex(l=>l.email===n.email));return this.setCache(t,c),console.log("✅ [UnifiedDataService] Successfully fetched",c.length,"unique users for organization:",e),c}catch(r){return console.error("❌ [UnifiedDataService] Error fetching organization users:",r),r instanceof Error&&(console.error("Error details:",r.message),console.error("Error stack:",r.stack)),[]}}async updateUser(e,t){try{const i={...t,updatedAt:new Date};await b(m(this.db,"users",e),i),this.clearCacheByPattern("current-user"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-context-")}catch(i){throw console.error("Error updating user:",i),i}}safeToDate(e){return e?e instanceof Date?e:typeof e.toDate=="function"?e.toDate():typeof e=="string"?new Date(e):typeof e=="number"?new Date(e):new Date:new Date}async getProjectsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-projects-${e.id}`,i=this.getFromCache(t);if(i)return i;try{const r=D(h(this.db,"projects"),y("organizationId","==",e.organization.id)),n=(await w(r)).docs.map(o=>{const a=o.data();return console.log("🔍 [UnifiedDataService] Processing project data:",{id:o.id,data:a}),{...a,id:o.id,createdAt:this.safeToDate(a.createdAt),updatedAt:this.safeToDate(a.updatedAt),lastAccessedAt:this.safeToDate(a.lastAccessedAt)}});return this.setCache(t,n),n}catch(r){return console.error("Error fetching user projects:",r),[]}}async createProject(e){try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const i={...e,createdAt:new Date,updatedAt:new Date,lastAccessedAt:new Date},r=await F(h(this.db,"projects"),i);return this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("org-projects-"),this.clearCacheByPattern("org-context-"),r.id}catch(t){throw console.error("Error creating project:",t),t}}async updateProject(e,t){try{const i={...t,updatedAt:new Date};await b(m(this.db,"projects",e),i),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(i){throw console.error("Error updating project:",i),i}}async addTeamMemberToProject(e,t,i){try{const r=await S(m(this.db,"users",t));if(!r.exists())throw new Error("User not found");const c=r.data(),n=await this.getCurrentUser(),o={userId:c.id||"",email:c.email||"",name:c.name||"Unknown User",role:i||"MEMBER",assignedAt:new Date,assignedBy:(n==null?void 0:n.email)||"system"},a=Object.fromEntries(Object.entries(o).filter(([s,g])=>g!=null));console.log("🔍 [UnifiedDataService] Team assignment data:",{original:o,validated:a,projectId:e,userId:t});const l=await S(m(this.db,"projects",e));if(!l.exists())throw new Error("Project not found");const d=l.data(),u=d.teamAssignments||[];console.log("🔍 [UnifiedDataService] Project data:",{projectId:e,hasTeamAssignments:!!d.teamAssignments,existingCount:u.length}),await O(m(this.db,"projects",e),{teamAssignments:B(a),updatedAt:new Date},{merge:!0}),await b(m(this.db,"users",t),{"teamMemberData.assignedProjects":B(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(r){throw console.error("Error adding team member to project:",r),r}}async removeTeamMemberFromProject(e,t){try{const i=await S(m(this.db,"projects",e));if(!i.exists())throw new Error("Project not found");const c=i.data().teamAssignments.find(n=>n.userId===t);c&&(await b(m(this.db,"projects",e),{teamAssignments:$(c),updatedAt:new Date}),await b(m(this.db,"users",t),{"teamMemberData.assignedProjects":$(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-"))}catch(i){throw console.error("Error removing team member from project:",i),i}}async getOrganizationContext(){var r,c,n,o,a,l;(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)throw new Error("No authenticated user");const t=`org-context-${e.organization.id}`,i=this.getFromCache(t);if(i)return i;try{const d=await S(m(this.db,"organizations",e.organization.id));if(!d.exists())throw new Error(`Organization ${e.organization.id} not found`);const u=d.data(),s={...u,id:e.organization.id,createdAt:((r=u.createdAt)==null?void 0:r.toDate())||new Date,updatedAt:((c=u.updatedAt)==null?void 0:c.toDate())||new Date},g=D(h(this.db,"subscriptions"),y("organizationId","==",e.organization.id),y("status","==","ACTIVE"),E(1)),f=await w(g);let p=null;if(!f.empty){const U=f.docs[0].data();p={...U,id:f.docs[0].id,createdAt:((n=U.createdAt)==null?void 0:n.toDate())||new Date,updatedAt:((o=U.updatedAt)==null?void 0:o.toDate())||new Date,currentPeriodStart:((a=U.currentPeriodStart)==null?void 0:a.toDate())||new Date,currentPeriodEnd:((l=U.currentPeriodEnd)==null?void 0:l.toDate())||new Date}}let v=[];try{v=await this.getUsersByOrganization(e.organization.id)}catch(U){throw console.error("Failed to get organization members:",U),U}const A={organization:s,subscription:p,members:v};return this.setCache(t,A,10*60*1e3),A}catch(d){throw console.error("Error fetching organization context:",d),d}}async getLicensesForOrganization(){(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)return console.log("🔍 [UnifiedDataService] No user found for license query"),[];console.log("🔍 [UnifiedDataService] Fetching licenses for organization:",e.organization.id);const t=`org-licenses-${e.organization.id}`,i=this.getFromCache(t);if(i)return console.log("📋 [UnifiedDataService] Returning cached licenses:",i.length),i;try{const r=D(h(this.db,"licenses"),y("organizationId","==",e.organization.id),M("createdAt","desc")),c=await w(r);console.log("📊 [UnifiedDataService] Found",c.docs.length,"license documents");const n=c.docs.map(o=>{var l,d,u,s,g,f,p,v;const a=o.data();return{id:o.id,key:a.key||"",name:a.name||`License ${o.id}`,tier:a.tier||"BASIC",status:a.status||"PENDING",organization:a.organization?{id:a.organization.id,name:a.organization.name,tier:a.organization.tier}:{id:a.organizationId||"",name:a.organizationName||"Unknown Organization",tier:a.tier||"BASIC"},assignedTo:a.assignedTo?{userId:a.assignedTo.userId,name:a.assignedTo.name||a.assignedToName||"Unknown User",email:a.assignedTo.email||a.assignedToEmail||"",assignedAt:((l=a.assignedTo.assignedAt)==null?void 0:l.toDate())||((d=a.activatedAt)==null?void 0:d.toDate())||new Date}:a.assignedToUserId?{userId:a.assignedToUserId,name:a.assignedToName||a.assignedToEmail||"Unknown User",email:a.assignedToEmail||"",assignedAt:((u=a.activatedAt)==null?void 0:u.toDate())||new Date}:void 0,usage:a.usage?{apiCalls:a.usage.apiCalls||0,dataTransfer:a.usage.dataTransfer||0,deviceCount:a.usage.deviceCount||1,maxDevices:a.usage.maxDevices||(a.tier==="ENTERPRISE"?10:a.tier==="PROFESSIONAL"?5:2)}:{apiCalls:a.usageCount||0,dataTransfer:0,deviceCount:1,maxDevices:a.tier==="ENTERPRISE"?10:a.tier==="PROFESSIONAL"?5:2},activatedAt:(s=a.activatedAt)==null?void 0:s.toDate(),expiresAt:((g=a.expiresAt)==null?void 0:g.toDate())||new Date,lastUsed:(f=a.lastUsed)==null?void 0:f.toDate(),createdAt:((p=a.createdAt)==null?void 0:p.toDate())||new Date,updatedAt:((v=a.updatedAt)==null?void 0:v.toDate())||new Date}});return console.log("✅ [UnifiedDataService] Processed",n.length,"licenses for organization"),this.setCache(t,n),n}catch(r){return console.error("Error fetching organization licenses:",r),[]}}async createLicense(e){var t,i,r,c,n;try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const a={key:e.key,name:e.name,tier:e.tier,status:e.status,organizationId:e.organization.id,organizationName:e.organization.name,usageCount:((t=e.usage)==null?void 0:t.apiCalls)||0,userId:((i=e.assignedTo)==null?void 0:i.userId)||null,userName:((r=e.assignedTo)==null?void 0:r.name)||null,userEmail:((c=e.assignedTo)==null?void 0:c.email)||null,activatedAt:((n=e.assignedTo)==null?void 0:n.assignedAt)||null,expiresAt:e.expiresAt,lastUsed:null,createdAt:new Date,updatedAt:new Date,organization:e.organization,usage:e.usage};console.log("🎫 [UnifiedDataService] Creating license with Firestore data:",a);const l=await F(h(this.db,"licenses"),a);return this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),console.log("🧹 [UnifiedDataService] Cleared license-related caches"),console.log("✅ [UnifiedDataService] License created with ID:",l.id),setTimeout(()=>{this.forceRefreshLicenses().catch(console.error)},100),l.id}catch(o){throw console.error("❌ [UnifiedDataService] Error creating license:",o),o}}async updateLicense(e,t){try{const i={...t,updatedAt:new Date};await b(m(this.db,"licenses",e),i),this.clearCacheByPattern("org-licenses-")}catch(i){throw console.error("Error updating license:",i),i}}async assignLicense(e,t){try{console.log("🎫 [UnifiedDataService] Assigning license",e,"to user",t);const i=await S(m(this.db,"users",t));if(!i.exists())throw new Error("User not found");const r=i.data(),c=await S(m(this.db,"licenses",e));if(!c.exists())throw new Error("License not found");const n=c.data();console.log("🔍 [UnifiedDataService] User data:",{id:t,email:r.email,name:r.name}),console.log("🔍 [UnifiedDataService] License data:",{id:e,key:n.key,tier:n.tier}),await b(m(this.db,"licenses",e),{assignedTo:{userId:t,name:r.name||r.firstName+" "+r.lastName||r.email,email:r.email,assignedAt:new Date},status:"ACTIVE",updatedAt:new Date}),await b(m(this.db,"users",t),{licenseAssignment:{licenseId:e,licenseKey:n.key,licenseType:n.tier,assignedAt:new Date},updatedAt:new Date});try{const o=D(h(this.db,C.TEAM_MEMBERS),y("userId","==",t),E(1)),a=await w(o);if(!a.empty){const l=a.docs[0];await b(l.ref,{licenseAssignment:{licenseId:e,licenseKey:n.key,licenseType:n.tier,assignedAt:new Date},updatedAt:new Date}),console.log("✅ [UnifiedDataService] Updated teamMembers collection with license assignment")}}catch(o){console.warn("⚠️ [UnifiedDataService] Failed to update teamMembers collection:",o)}try{const o=D(h(this.db,C.ORG_MEMBERS),y("userId","==",t),E(1)),a=await w(o);if(!a.empty){const l=a.docs[0];await b(l.ref,{licenseAssignment:{licenseId:e,licenseKey:n.key,licenseType:n.tier,assignedAt:new Date},updatedAt:new Date}),console.log("✅ [UnifiedDataService] Updated orgMembers collection with license assignment")}}catch(o){console.warn("⚠️ [UnifiedDataService] Failed to update orgMembers collection:",o)}console.log("✅ [UnifiedDataService] License assignment completed - all collections updated"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(i){throw console.error("❌ [UnifiedDataService] Error assigning license:",i),i}}async unassignLicense(e){var t;try{console.log("🎫 [UnifiedDataService] Unassigning license",e);const i=await S(m(this.db,"licenses",e));if(!i.exists())throw new Error("License not found");const c=(t=i.data().assignedTo)==null?void 0:t.userId;if(await b(m(this.db,"licenses",e),{assignedTo:null,status:"PENDING",updatedAt:new Date}),c&&(await b(m(this.db,"users",c),{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from user record",c)),c)try{const n=D(h(this.db,C.TEAM_MEMBERS),y("userId","==",c),E(1)),o=await w(n);if(!o.empty){const a=o.docs[0];await b(a.ref,{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from teamMembers collection")}}catch(n){console.warn("⚠️ [UnifiedDataService] Failed to update teamMembers collection:",n)}if(c)try{const n=D(h(this.db,C.ORG_MEMBERS),y("userId","==",c),E(1)),o=await w(n);if(!o.empty){const a=o.docs[0];await b(a.ref,{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from orgMembers collection")}}catch(n){console.warn("⚠️ [UnifiedDataService] Failed to update orgMembers collection:",n)}console.log("✅ [UnifiedDataService] License unassignment completed - license returned to org pool"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(i){throw console.error("❌ [UnifiedDataService] Error unassigning license:",i),i}}async getTeamMembersForOrganization(){var r,c,n,o;const e=await this.getCurrentUser();if(!e)return[];const t=`org-team-members-${e.organization.id}`,i=this.getFromCache(t);if(i)return i;try{console.log("🔍 [UnifiedDataService] Fetching team members for organization:",e.organization.id);const a=new Map;console.log("🔍 [UnifiedDataService] Starting with users collection as primary source...");try{const d=await I.queryDocumentsWithFallback("users",[{field:"organizationId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${d.documents.length} users in users collection`);for(const u of d.documents){const s=u;if(!s.email||s.status==="removed"||s.status==="suspended")continue;const g={id:s.id||u.id,firstName:s.firstName||"",lastName:s.lastName||"",email:s.email,role:s.role||"member",status:s.status||"active",organization:{id:s.organizationId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:s.licenseAssignment?{licenseId:s.licenseAssignment.licenseId,licenseKey:s.licenseAssignment.licenseKey,licenseType:s.licenseAssignment.licenseType,assignedAt:s.licenseAssignment.assignedAt}:void 0,department:s.department||"",assignedProjects:s.assignedProjects||[],avatar:s.avatar,joinedAt:s.joinedAt||s.createdAt||new Date,lastActive:s.lastActive?s.lastActive instanceof Date?s.lastActive:new Date(s.lastActive):void 0,invitedBy:s.invitedBy||e.id,createdAt:s.createdAt||new Date,updatedAt:s.updatedAt||new Date};a.set(s.email,g),console.log(`✅ [UnifiedDataService] Added user: ${s.email} (${s.firstName} ${s.lastName})`)}}catch(d){console.warn("⚠️ [UnifiedDataService] Users collection query failed:",d)}console.log("🔍 [UnifiedDataService] Enhancing with teamMembers collection data...");try{const d=await I.queryDocumentsWithFallback("teamMembers",[{field:"organizationId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${d.documents.length} team members in teamMembers collection`);for(const u of d.documents){const s=u;if(!(s.status==="removed"||s.status==="suspended")){if(s.email&&a.has(s.email)){const g=a.get(s.email);g.role=s.role||g.role,g.status=s.status||g.status,g.department=s.department||g.department,g.avatar=s.avatar||g.avatar,s.licenseAssignment&&(g.licenseAssignment={licenseId:s.licenseAssignment.licenseId,licenseKey:s.licenseAssignment.licenseKey,licenseType:s.licenseAssignment.licenseType,assignedAt:s.licenseAssignment.assignedAt}),console.log(`✅ [UnifiedDataService] Enhanced user data for: ${s.email}`)}else if(s.email){const g={id:s.id,firstName:s.firstName||((r=s.name)==null?void 0:r.split(" ")[0])||"",lastName:s.lastName||((c=s.name)==null?void 0:c.split(" ")[1])||"",email:s.email,role:s.role||"member",status:s.status||"active",organization:{id:s.organizationId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:s.licenseAssignment?{licenseId:s.licenseAssignment.licenseId,licenseKey:s.licenseAssignment.licenseKey,licenseType:s.licenseAssignment.licenseType,assignedAt:s.licenseAssignment.assignedAt}:void 0,department:s.department||"",assignedProjects:s.assignedProjects||[],avatar:s.avatar,joinedAt:s.joinedAt||s.createdAt||new Date,lastActive:s.lastActive?s.lastActive instanceof Date?s.lastActive:new Date(s.lastActive):void 0,invitedBy:s.invitedBy||e.id,createdAt:s.createdAt||new Date,updatedAt:s.updatedAt||new Date};a.set(s.email,g),console.log(`✅ [UnifiedDataService] Added team member: ${s.email} (${g.firstName} ${g.lastName})`)}}}}catch(d){console.warn("⚠️ [UnifiedDataService] TeamMembers collection query failed:",d)}console.log("🔍 [UnifiedDataService] Cross-referencing licenses for assignments...");try{const d=await this.getLicensesForOrganization(),u=(d==null?void 0:d.filter(s=>s.assignedTo&&s.assignedTo.userId))||[];console.log(`📊 [UnifiedDataService] Found ${u.length} assigned licenses`),u.length>0&&console.log("🔍 [UnifiedDataService] Sample assigned license:",JSON.stringify(u[0],null,2));for(const s of u){const g=(n=s.assignedTo)==null?void 0:n.userId;if(!g)continue;const f=Array.from(a.keys()).find(p=>{const v=a.get(p);return v&&v.id===g});if(f){const p=a.get(f);p&&!p.licenseAssignment&&(p.licenseAssignment={licenseId:s.id,licenseKey:s.key,licenseType:s.tier,assignedAt:((o=s.assignedTo)==null?void 0:o.assignedAt)||new Date},console.log(`✅ [UnifiedDataService] Added license assignment for ${f}:`,p.licenseAssignment))}}}catch(d){console.warn("⚠️ [UnifiedDataService] License cross-reference failed:",d)}const l=Array.from(a.values());return console.log(`✅ [UnifiedDataService] Successfully fetched ${l.length} unique team members for organization: ${e.organization.id}`),l.forEach(d=>{console.log(`🔍 [UnifiedDataService] Final result - ${d.email}: ${d.firstName} ${d.lastName} (${d.role}) - Status: ${d.status}`),d.licenseAssignment?console.log(`    └── License: ${d.licenseAssignment.licenseType} (${d.licenseAssignment.licenseKey})`):console.log("    └── No license assigned")}),this.setCache(t,l),l}catch(a){return console.error("❌ [UnifiedDataService] Failed to fetch team members:",a),[]}}async inviteTeamMember(e){var t;console.log("🚀 [UnifiedDataService] Creating team member via backend API:",e.email);try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const r={email:e.email,firstName:e.firstName,lastName:e.lastName,department:e.department||"",licenseType:"PROFESSIONAL",organizationId:e.organization.id,sendWelcomeEmail:!0,temporaryPassword:e.temporaryPassword||this.generateSecurePassword()};console.log("📤 [UnifiedDataService] Sending team member creation request to backend API...");const c=await((t=this.auth.currentUser)==null?void 0:t.getIdToken()),o=await(await fetch(`${this.getApiBaseUrl()}/team-members/create`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${c}`},body:JSON.stringify(r)})).json();if(!o.success)throw new Error(o.error||"Failed to create team member");const a=o.data.teamMember;return console.log("✅ [UnifiedDataService] Team member created successfully via backend API:",a.id),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-members-"),this.clearCacheByPattern("user-profiles-"),a.id}catch(i){throw console.error("❌ [UnifiedDataService] Error creating team member via backend API:",i),i}}async ensureTeamMemberProjectReadiness(e){const t={success:!0,collectionsCreated:[],collectionsFound:[],errors:[]};try{console.log("🔍 [UnifiedDataService] Checking team member project readiness for userId:",e);const i=await S(m(this.db,C.USERS,e));if(!i.exists())return t.errors.push("User record not found"),t.success=!1,t;const r=i.data();console.log("📋 [UnifiedDataService] Found user data:",r);const c=[{name:"teamMembers",collection:C.TEAM_MEMBERS,createData:()=>({userId:e,email:r.email,firstName:r.firstName,lastName:r.lastName,name:`${r.firstName} ${r.lastName}`,role:r.role||"member",status:r.status||"active",organizationId:r.organizationId,orgId:r.organizationId,department:r.department||"",isActive:!0,firebaseUid:r.firebaseUid||"",createdAt:new Date,updatedAt:new Date})},{name:"orgMembers",collection:C.ORG_MEMBERS,createData:()=>({organizationId:r.organizationId,orgId:r.organizationId,userId:e,email:r.email,name:`${r.firstName} ${r.lastName}`,firstName:r.firstName,lastName:r.lastName,role:r.role||"member",status:r.status||"active",seatReserved:!0,department:r.department||"",invitedByUserId:"system",invitedAt:new Date,joinedAt:new Date,createdAt:new Date,updatedAt:new Date})},{name:"userProfiles",collection:C.USER_PROFILES,createData:()=>({userId:e,email:r.email,firstName:r.firstName,lastName:r.lastName,displayName:`${r.firstName} ${r.lastName}`,avatar:r.avatar||`https://ui-avatars.com/api/?name=${encodeURIComponent(r.firstName+" "+r.lastName)}&background=667eea&color=fff`,department:r.department||"",position:"",phone:"",organizationId:r.organizationId,role:r.role||"member",status:r.status||"active",bio:"",preferences:{},createdAt:new Date,updatedAt:new Date})}];for(const n of c)try{const o=D(h(this.db,n.collection),y("userId","==",e),E(1));if((await w(o)).empty){console.log(`📝 [UnifiedDataService] Creating missing ${n.name} record for user ${e}`);const l=await F(h(this.db,n.collection),n.createData());t.collectionsCreated.push(`${n.name} (${l.id})`),console.log(`✅ [UnifiedDataService] Created ${n.name} record: ${l.id}`)}else t.collectionsFound.push(n.name),console.log(`✅ [UnifiedDataService] Found existing ${n.name} record`)}catch(o){const a=`Failed to check/create ${n.name}: ${o.message}`;t.errors.push(a),console.error(`❌ [UnifiedDataService] ${a}`,o)}return console.log("📊 [UnifiedDataService] Team member project readiness check complete:",t),t}catch(i){return console.error("❌ [UnifiedDataService] Failed to ensure team member project readiness:",i),t.errors.push(`General error: ${i.message}`),t.success=!1,t}}generateSecurePassword(){const t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";let i="";for(let r=0;r<12;r++)i+=t.charAt(Math.floor(Math.random()*t.length));return i}async updateTeamMember(e,t){try{const i={...t,updatedAt:new Date};await b(m(this.db,"teamMembers",e),i),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(i){throw console.error("Error updating team member:",i),i}}async changeTeamMemberPassword(e,t){try{console.log("🔐 [UnifiedDataService] Changing password for member:",e);const i=await fetch(`/api/team-members/${e}/reset-password`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${await this.getAuthToken()}`},body:JSON.stringify({newPassword:t})});if(!i.ok){const r=await i.json().catch(()=>({}));throw new Error(r.message||`Failed to change password: ${i.status}`)}console.log("✅ [UnifiedDataService] Password changed successfully")}catch(i){throw console.error("❌ [UnifiedDataService] Error changing password:",i),i}}async removeTeamMember(e,t){try{console.log("👤 [UnifiedDataService] Starting comprehensive team member removal:",e);const i=await S(m(this.db,"users",e));if(!i.exists()&&!(await S(m(this.db,"teamMembers",e))).exists())throw new Error("Team member not found");const r=i.exists()?i.data():null,c=t||(r==null?void 0:r.organizationId);if(!c)throw new Error("Organization ID is required for team member removal");console.log("🔍 [UnifiedDataService] Team member organization:",c);const n=await this.getAuthToken(),o=await fetch(`${window.location.origin}/api/team-members/remove-completely`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n}`},body:JSON.stringify({teamMemberId:e,organizationId:c})});if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);const a=await o.json();console.log("✅ [UnifiedDataService] Team member removal completed:",{cleanedCollections:a.cleanedCollections,licenseRestored:a.licenseRestored,firebaseUserDeleted:a.firebaseUserDeleted}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-members-"),this.clearCacheByPattern("project-team-members-"),console.log("✅ [UnifiedDataService] Team member completely removed with full cleanup")}catch(i){throw console.error("❌ [UnifiedDataService] Error removing team member:",i),i}}async assignLicenseToTeamMember(e,t,i,r){try{await b(m(this.db,"users",e),{licenseAssignment:{licenseId:t,licenseKey:i,licenseType:r,assignedAt:new Date},updatedAt:new Date}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-licenses-")}catch(c){throw console.error("Error assigning license to team member:",c),c}}async getDatasetsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-datasets-${e.id}`,i=this.getFromCache(t);if(i)return i;try{const r=D(h(this.db,"datasets"),y("owner.organizationId","==",e.organization.id),y("status","==","ACTIVE"),M("updatedAt","desc")),n=(await w(r)).docs.map(o=>{var l,d;const a=o.data();return{...a,id:o.id,createdAt:((l=a.createdAt)==null?void 0:l.toDate())||new Date,updatedAt:((d=a.updatedAt)==null?void 0:d.toDate())||new Date}});return this.setCache(t,n),n}catch(r){return console.error("Error fetching user datasets:",r),[]}}getFromCache(e){const t=this.cache.get(e);return t?Date.now()>t.timestamp+t.ttl?(this.cache.delete(e),null):t.data:null}setCache(e,t,i=this.CACHE_TTL){this.cache.set(e,{data:t,timestamp:Date.now(),ttl:i})}clearCacheByPattern(e){for(const t of this.cache.keys())t.includes(e)&&this.cache.delete(t)}clearAllCache(){this.cache.clear(),console.log("🧹 [UnifiedDataService] All cache cleared")}async forceRefreshLicenses(){console.log("🔄 [UnifiedDataService] Force refreshing license data..."),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),await this.getLicensesForOrganization(),console.log("✅ [UnifiedDataService] License data force refreshed")}clearUserCache(e){e?(this.clearCacheByPattern("current-user"),this.clearCacheByPattern(`org-users-${e}`),this.clearCacheByPattern("org-context"),this.clearCacheByPattern("org-licenses")):this.clearAllCache()}async getCollectionName(e){const t=C[e];try{const i=D(h(this.db,t),E(1));return await w(i),console.log(`✅ [UnifiedDataService] Using primary collection: ${t}`),t}catch{const r=`${e}_LEGACY`;if(C[r]){const c=C[r];try{const n=D(h(this.db,c),E(1));return await w(n),console.log(`⚠️ [UnifiedDataService] Falling back to legacy collection: ${c}`),c}catch{console.warn(`⚠️ [UnifiedDataService] Both primary and legacy collections failed for ${e}`)}}return console.warn(`⚠️ [UnifiedDataService] Using primary collection name despite access issues: ${t}`),t}}async purchaseLicenses(e){try{if(!await this.getCurrentUser())throw new Error("No authenticated user");console.log("🛒 [UnifiedDataService] Starting license purchase:",e);const i=await this.getAuthToken(),r=await fetch(`${this.getApiBaseUrl()}/licenses/purchase`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${i}`},body:JSON.stringify(e)});if(!r.ok){const n=await r.json();throw new Error(n.error||"Purchase failed")}const c=await r.json();if(!c.success)throw new Error(c.error||"Purchase failed");return console.log("✅ [UnifiedDataService] License purchase completed:",c.data),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),this.clearCacheByPattern("subscription-"),this.clearCacheByPattern("invoice-"),setTimeout(()=>{this.forceRefreshLicenses()},1e3),c.data}catch(t){throw console.error("❌ [UnifiedDataService] Error purchasing licenses:",t),new Error(`Failed to purchase licenses: ${t.message}`)}}async getInvoicesForOrganization(){var e;try{const t=await this.getCurrentUser();if(!((e=t==null?void 0:t.organization)!=null&&e.id))return console.log("🔍 [UnifiedDataService] No organization context for invoices"),[];const i=`org-invoices-${t.organization.id}`,r=this.getFromCache(i);if(r&&Array.isArray(r))return console.log("📋 [UnifiedDataService] Returning cached invoices"),r;console.log("📋 [UnifiedDataService] Fetching invoices for organization:",t.organization.id);const c=D(h(this.db,"invoices"),y("organizationId","==",t.organization.id),M("createdAt","desc")),o=(await w(c)).docs.map(a=>{var l,d,u,s,g,f,p,v;return{id:a.id,...a.data(),createdAt:((d=(l=a.data().createdAt)==null?void 0:l.toDate)==null?void 0:d.call(l))||new Date(a.data().createdAt),updatedAt:((s=(u=a.data().updatedAt)==null?void 0:u.toDate)==null?void 0:s.call(u))||new Date(a.data().updatedAt),paidAt:((f=(g=a.data().paidAt)==null?void 0:g.toDate)==null?void 0:f.call(g))||(a.data().paidAt?new Date(a.data().paidAt):null),dueDate:((v=(p=a.data().dueDate)==null?void 0:p.toDate)==null?void 0:v.call(p))||new Date(a.data().dueDate)}});return this.setCache(i,o),console.log(`✅ [UnifiedDataService] Found ${o.length} invoices`),o}catch(t){return console.error("❌ [UnifiedDataService] Error fetching invoices:",t),[]}}async getPaymentsForOrganization(){var e;try{const t=await this.getCurrentUser();if(!((e=t==null?void 0:t.organization)!=null&&e.id))return console.log("🔍 [UnifiedDataService] No organization context for payments"),[];const i=`org-payments-${t.organization.id}`,r=this.getFromCache(i);if(r&&Array.isArray(r))return console.log("💰 [UnifiedDataService] Returning cached payments"),r;console.log("💰 [UnifiedDataService] Fetching payments for organization:",t.organization.id);const c=D(h(this.db,"payments"),y("organizationId","==",t.organization.id),M("createdAt","desc")),o=(await w(c)).docs.map(a=>{var l,d,u,s,g,f;return{id:a.id,...a.data(),createdAt:((d=(l=a.data().createdAt)==null?void 0:l.toDate)==null?void 0:d.call(l))||new Date(a.data().createdAt),updatedAt:((s=(u=a.data().updatedAt)==null?void 0:u.toDate)==null?void 0:s.call(u))||new Date(a.data().updatedAt),processedAt:((f=(g=a.data().processedAt)==null?void 0:g.toDate)==null?void 0:f.call(g))||(a.data().processedAt?new Date(a.data().processedAt):null)}});return this.setCache(i,o),console.log(`✅ [UnifiedDataService] Found ${o.length} payments`),o}catch(t){return console.error("❌ [UnifiedDataService] Error fetching payments:",t),[]}}async getSubscriptionForOrganization(){var e,t,i,r,c,n,o,a,l,d,u;try{const s=await this.getCurrentUser();if(!((e=s==null?void 0:s.organization)!=null&&e.id))return console.log("🔍 [UnifiedDataService] No organization context for subscription"),null;const g=`org-subscription-${s.organization.id}`,f=this.getFromCache(g);if(f)return console.log("📋 [UnifiedDataService] Returning cached subscription"),f;console.log("📋 [UnifiedDataService] Fetching subscription for organization:",s.organization.id);const p=D(h(this.db,"subscriptions"),y("organizationId","==",s.organization.id),M("createdAt","desc"),E(1)),v=await w(p);if(v.empty)return console.log("📋 [UnifiedDataService] No subscription found"),null;const A=v.docs[0],U={id:A.id,...A.data(),createdAt:((i=(t=A.data().createdAt)==null?void 0:t.toDate)==null?void 0:i.call(t))||new Date(A.data().createdAt),updatedAt:((c=(r=A.data().updatedAt)==null?void 0:r.toDate)==null?void 0:c.call(r))||new Date(A.data().updatedAt),currentPeriodStart:((o=(n=A.data().currentPeriodStart)==null?void 0:n.toDate)==null?void 0:o.call(n))||new Date(A.data().currentPeriodStart),currentPeriodEnd:((l=(a=A.data().currentPeriodEnd)==null?void 0:a.toDate)==null?void 0:l.call(a))||new Date(A.data().currentPeriodEnd),activatedAt:((u=(d=A.data().activatedAt)==null?void 0:d.toDate)==null?void 0:u.call(d))||(A.data().activatedAt?new Date(A.data().activatedAt):null)};return this.setCache(g,U),console.log("✅ [UnifiedDataService] Found subscription:",U.id),U}catch(s){return console.error("❌ [UnifiedDataService] Error fetching subscription:",s),null}}static getInstance(){return z.instance||(z.instance=new z),z.instance}};T(z,"instance");let N=z;const H=N.getInstance();export{H as default,H as unifiedDataService};
