const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-CopYoX1W.js","assets/index-DahuXcsR.js","assets/mui-Cr9U6iW2.js","assets/vendor-CjD1bmmO.js","assets/stripe-ggaMUove.js","assets/index-CBai7h7s.css","assets/index.esm-DmQE6AXN.js","assets/index.esm-B4qVkIPL.js","assets/index.esm-DeaBpi77.js"])))=>i.map(i=>d[i]);
var $=Object.defineProperty;var k=(P,e,t)=>e in P?$(P,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):P[e]=t;var T=(P,e,t)=>k(P,typeof e!="symbol"?e+"":e,t);import{_ as x}from"./index-DahuXcsR.js";import{getDoc as S,doc as u,query as w,collection as h,where as y,getDocs as D,updateDoc as p,addDoc as B,arrayUnion as j,arrayRemove as I,limit as E,orderBy as R}from"./index.esm-B4qVkIPL.js";import{COLLECTIONS as v,firestoreCollectionManager as N}from"./FirestoreCollectionManager-DuNvbfqS.js";import"./mui-Cr9U6iW2.js";import"./vendor-CjD1bmmO.js";import"./stripe-ggaMUove.js";import"./index.esm-DmQE6AXN.js";import"./firebase-CopYoX1W.js";import"./index.esm-DeaBpi77.js";const z=class z{constructor(){T(this,"cache",new Map);T(this,"CACHE_TTL",5*60*1e3);T(this,"db",null);T(this,"auth",null);this.initializeFirebase()}async initializeFirebase(){try{console.log("🔧 [UnifiedDataService] Initializing Firebase...");const{db:e,auth:t}=await x(async()=>{const{db:s,auth:a}=await import("./firebase-CopYoX1W.js");return{db:s,auth:a}},__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=e,this.auth=t,console.log("✅ [UnifiedDataService] Firebase initialized successfully")}catch(e){throw console.error("❌ [UnifiedDataService] Failed to initialize Firebase:",e),e}}async waitForAuthReady(){var e;return this.auth||await this.initializeFirebase(),(e=this.auth)!=null&&e.currentUser?!0:new Promise(t=>{const s=setTimeout(()=>{t(!1)},5e3),a=this.auth.onAuthStateChanged(o=>{clearTimeout(s),a(),t(!!o)})})}async getAuthToken(){var e;if(!((e=this.auth)!=null&&e.currentUser))throw new Error("No authenticated user found");try{const t=await this.auth.currentUser.getIdToken();if(!t)throw new Error("Failed to get ID token from Firebase Auth");return t}catch(t){throw console.error("❌ [UnifiedDataService] Error getting auth token:",t),new Error("Failed to get authentication token")}}mapUserDocument(e){var s,a,o;const t=e.data();return{id:e.id,email:t.email||"",name:t.name||t.firstName+" "+t.lastName||"Unknown User",userType:t.userType||"TEAM_MEMBER",role:t.role||"member",organization:{id:t.organizationId||t.orgId||"default-org",name:t.organizationName||"Unknown Organization",tier:t.tier||"BASIC",isOwner:t.isOwner||t.role==="OWNER"||!1},license:{type:t.licenseType||t.tier||"BASIC",status:t.status||"ACTIVE",permissions:t.permissions||[],canCreateProjects:t.tier==="ENTERPRISE"||t.tier==="PROFESSIONAL",canManageTeam:t.role==="admin"||t.role==="owner"||t.role==="OWNER"},teamMemberData:t.userType==="TEAM_MEMBER"?{managedBy:t.managedBy||"",department:t.department||"",assignedProjects:t.assignedProjects||[]}:void 0,status:t.status||"ACTIVE",createdAt:((s=t.createdAt)==null?void 0:s.toDate())||new Date,updatedAt:((a=t.updatedAt)==null?void 0:a.toDate())||new Date,lastLoginAt:(o=t.lastLoginAt)==null?void 0:o.toDate()}}async getCurrentUser(){var a;const e="current-user",t=this.getFromCache(e);if(t)return t;if(!await this.waitForAuthReady())return console.log("🔍 [UnifiedDataService] Firebase Auth not ready after waiting"),null;if(!((a=this.auth)!=null&&a.currentUser))return console.log("🔍 [UnifiedDataService] No Firebase Auth user found after auth ready"),null;try{const o=this.auth.currentUser.email,n=this.auth.currentUser.uid;console.log("🔍 [UnifiedDataService] Looking for user:",o,"UID:",n);let c=await S(u(this.db,"users",n));if(c.exists()){console.log("✅ [UnifiedDataService] Found user in users collection");const i=this.mapUserDocument(c);return this.setCache(e,i),i}try{const i=w(h(this.db,"users"),y("email","==",o)),d=await D(i);if(!d.empty){console.log("✅ [UnifiedDataService] Found user by email in users collection");const g=this.mapUserDocument(d.docs[0]);return this.setCache(e,g),g}}catch(i){console.warn("⚠️ [UnifiedDataService] Error querying users by email:",i)}try{const i=w(h(this.db,"orgMembers"),y("email","==",o)),d=await D(i);if(!d.empty){console.log("✅ [UnifiedDataService] Found user in orgMembers collection");const g=this.mapUserDocument(d.docs[0]);return this.setCache(e,g),g}}catch(i){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers:",i)}return console.log("❌ [UnifiedDataService] User not found in any collection"),null}catch(o){return console.error("❌ [UnifiedDataService] Error fetching current user:",o),null}}async getUsersByOrganization(e){const t=`org-users-${e}`,s=this.getFromCache(t);if(s)return s;try{console.log("🔍 [UnifiedDataService] Fetching users for organization:",e),this.db||await this.initializeFirebase();let a=[];try{console.log("🔍 [UnifiedDataService] Trying users collection...");const n=w(h(this.db,"users"),y("organizationId","==",e)),c=await D(n);console.log("📊 [UnifiedDataService] Found",c.docs.length,"users in users collection"),a=a.concat(c.docs.map(i=>this.mapUserDocument(i)))}catch(n){console.warn("⚠️ [UnifiedDataService] Error querying users collection:",n)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers collection...");const n=w(h(this.db,"orgMembers"),y("organizationId","==",e)),c=await D(n);console.log("📊 [UnifiedDataService] Found",c.docs.length,"users in orgMembers collection"),a=a.concat(c.docs.map(i=>this.mapUserDocument(i)))}catch(n){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers collection:",n)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers with orgId field...");const n=w(h(this.db,"orgMembers"),y("orgId","==",e)),c=await D(n);console.log("📊 [UnifiedDataService] Found",c.docs.length,"users in orgMembers with orgId"),a=a.concat(c.docs.map(i=>this.mapUserDocument(i)))}catch(n){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers with orgId:",n)}const o=a.filter((n,c,i)=>c===i.findIndex(d=>d.email===n.email));return this.setCache(t,o),console.log("✅ [UnifiedDataService] Successfully fetched",o.length,"unique users for organization:",e),o}catch(a){return console.error("❌ [UnifiedDataService] Error fetching organization users:",a),a instanceof Error&&(console.error("Error details:",a.message),console.error("Error stack:",a.stack)),[]}}async updateUser(e,t){try{const s={...t,updatedAt:new Date};await p(u(this.db,"users",e),s),this.clearCacheByPattern("current-user"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-context-")}catch(s){throw console.error("Error updating user:",s),s}}safeToDate(e){return e?e instanceof Date?e:typeof e.toDate=="function"?e.toDate():typeof e=="string"?new Date(e):typeof e=="number"?new Date(e):new Date:new Date}async getProjectsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-projects-${e.id}`,s=this.getFromCache(t);if(s)return s;try{const a=w(h(this.db,"projects"),y("organizationId","==",e.organization.id)),n=(await D(a)).docs.map(c=>{const i=c.data();return console.log("🔍 [UnifiedDataService] Processing project data:",{id:c.id,data:i}),{...i,id:c.id,createdAt:this.safeToDate(i.createdAt),updatedAt:this.safeToDate(i.updatedAt),lastAccessedAt:this.safeToDate(i.lastAccessedAt)}});return this.setCache(t,n),n}catch(a){return console.error("Error fetching user projects:",a),[]}}async createProject(e){try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const s={...e,createdAt:new Date,updatedAt:new Date,lastAccessedAt:new Date},a=await B(h(this.db,"projects"),s);return this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("org-projects-"),this.clearCacheByPattern("org-context-"),a.id}catch(t){throw console.error("Error creating project:",t),t}}async updateProject(e,t){try{const s={...t,updatedAt:new Date};await p(u(this.db,"projects",e),s),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(s){throw console.error("Error updating project:",s),s}}async addTeamMemberToProject(e,t,s){try{const a=await S(u(this.db,"users",t));if(!a.exists())throw new Error("User not found");const o=a.data(),n=await this.getCurrentUser(),c={userId:o.id,email:o.email,name:o.name,role:s,assignedAt:new Date,assignedBy:(n==null?void 0:n.email)||"system"};await p(u(this.db,"projects",e),{teamAssignments:j(c),updatedAt:new Date}),await p(u(this.db,"users",t),{"teamMemberData.assignedProjects":j(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(a){throw console.error("Error adding team member to project:",a),a}}async removeTeamMemberFromProject(e,t){try{const s=await S(u(this.db,"projects",e));if(!s.exists())throw new Error("Project not found");const o=s.data().teamAssignments.find(n=>n.userId===t);o&&(await p(u(this.db,"projects",e),{teamAssignments:I(o),updatedAt:new Date}),await p(u(this.db,"users",t),{"teamMemberData.assignedProjects":I(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-"))}catch(s){throw console.error("Error removing team member from project:",s),s}}async getOrganizationContext(){var a,o,n,c,i,d;(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)throw new Error("No authenticated user");const t=`org-context-${e.organization.id}`,s=this.getFromCache(t);if(s)return s;try{const g=await S(u(this.db,"organizations",e.organization.id));if(!g.exists())throw new Error(`Organization ${e.organization.id} not found`);const C=g.data(),M={...C,id:e.organization.id,createdAt:((a=C.createdAt)==null?void 0:a.toDate())||new Date,updatedAt:((o=C.updatedAt)==null?void 0:o.toDate())||new Date},f=w(h(this.db,"subscriptions"),y("organizationId","==",e.organization.id),y("status","==","ACTIVE"),E(1)),U=await D(f);let m=null;if(!U.empty){const l=U.docs[0].data();m={...l,id:U.docs[0].id,createdAt:((n=l.createdAt)==null?void 0:n.toDate())||new Date,updatedAt:((c=l.updatedAt)==null?void 0:c.toDate())||new Date,currentPeriodStart:((i=l.currentPeriodStart)==null?void 0:i.toDate())||new Date,currentPeriodEnd:((d=l.currentPeriodEnd)==null?void 0:d.toDate())||new Date}}let A=[];try{A=await this.getUsersByOrganization(e.organization.id)}catch(l){throw console.error("Failed to get organization members:",l),l}const r={organization:M,subscription:m,members:A};return this.setCache(t,r,10*60*1e3),r}catch(g){throw console.error("Error fetching organization context:",g),g}}async getLicensesForOrganization(){(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)return console.log("🔍 [UnifiedDataService] No user found for license query"),[];console.log("🔍 [UnifiedDataService] Fetching licenses for organization:",e.organization.id);const t=`org-licenses-${e.organization.id}`,s=this.getFromCache(t);if(s)return console.log("📋 [UnifiedDataService] Returning cached licenses:",s.length),s;try{const a=w(h(this.db,"licenses"),y("organizationId","==",e.organization.id),R("createdAt","desc")),o=await D(a);console.log("📊 [UnifiedDataService] Found",o.docs.length,"license documents");const n=o.docs.map(c=>{var d,g,C,M,f,U,m,A;const i=c.data();return{id:c.id,key:i.key||"",name:i.name||`License ${c.id}`,tier:i.tier||"BASIC",status:i.status||"PENDING",organization:i.organization?{id:i.organization.id,name:i.organization.name,tier:i.organization.tier}:{id:i.organizationId||"",name:i.organizationName||"Unknown Organization",tier:i.tier||"BASIC"},assignedTo:i.assignedTo?{userId:i.assignedTo.userId,name:i.assignedTo.name||i.assignedToName||"Unknown User",email:i.assignedTo.email||i.assignedToEmail||"",assignedAt:((d=i.assignedTo.assignedAt)==null?void 0:d.toDate())||((g=i.activatedAt)==null?void 0:g.toDate())||new Date}:i.assignedToUserId?{userId:i.assignedToUserId,name:i.assignedToName||i.assignedToEmail||"Unknown User",email:i.assignedToEmail||"",assignedAt:((C=i.activatedAt)==null?void 0:C.toDate())||new Date}:void 0,usage:i.usage?{apiCalls:i.usage.apiCalls||0,dataTransfer:i.usage.dataTransfer||0,deviceCount:i.usage.deviceCount||1,maxDevices:i.usage.maxDevices||(i.tier==="ENTERPRISE"?10:i.tier==="PROFESSIONAL"?5:2)}:{apiCalls:i.usageCount||0,dataTransfer:0,deviceCount:1,maxDevices:i.tier==="ENTERPRISE"?10:i.tier==="PROFESSIONAL"?5:2},activatedAt:(M=i.activatedAt)==null?void 0:M.toDate(),expiresAt:((f=i.expiresAt)==null?void 0:f.toDate())||new Date,lastUsed:(U=i.lastUsed)==null?void 0:U.toDate(),createdAt:((m=i.createdAt)==null?void 0:m.toDate())||new Date,updatedAt:((A=i.updatedAt)==null?void 0:A.toDate())||new Date}});return console.log("✅ [UnifiedDataService] Processed",n.length,"licenses for organization"),this.setCache(t,n),n}catch(a){return console.error("Error fetching organization licenses:",a),[]}}async createLicense(e){var t,s,a,o,n;try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const i={key:e.key,name:e.name,tier:e.tier,status:e.status,organizationId:e.organization.id,organizationName:e.organization.name,usageCount:((t=e.usage)==null?void 0:t.apiCalls)||0,userId:((s=e.assignedTo)==null?void 0:s.userId)||null,userName:((a=e.assignedTo)==null?void 0:a.name)||null,userEmail:((o=e.assignedTo)==null?void 0:o.email)||null,activatedAt:((n=e.assignedTo)==null?void 0:n.assignedAt)||null,expiresAt:e.expiresAt,lastUsed:null,createdAt:new Date,updatedAt:new Date,organization:e.organization,usage:e.usage};console.log("🎫 [UnifiedDataService] Creating license with Firestore data:",i);const d=await B(h(this.db,"licenses"),i);return this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),console.log("🧹 [UnifiedDataService] Cleared license-related caches"),console.log("✅ [UnifiedDataService] License created with ID:",d.id),setTimeout(()=>{this.forceRefreshLicenses().catch(console.error)},100),d.id}catch(c){throw console.error("❌ [UnifiedDataService] Error creating license:",c),c}}async updateLicense(e,t){try{const s={...t,updatedAt:new Date};await p(u(this.db,"licenses",e),s),this.clearCacheByPattern("org-licenses-")}catch(s){throw console.error("Error updating license:",s),s}}async assignLicense(e,t){try{console.log("🎫 [UnifiedDataService] Assigning license",e,"to user",t);const s=await S(u(this.db,"users",t));if(!s.exists())throw new Error("User not found");const a=s.data(),o=await S(u(this.db,"licenses",e));if(!o.exists())throw new Error("License not found");const n=o.data();console.log("🔍 [UnifiedDataService] User data:",{id:t,email:a.email,name:a.name}),console.log("🔍 [UnifiedDataService] License data:",{id:e,key:n.key,tier:n.tier}),await p(u(this.db,"licenses",e),{assignedTo:{userId:t,name:a.name||a.firstName+" "+a.lastName||a.email,email:a.email,assignedAt:new Date},status:"ACTIVE",updatedAt:new Date}),await p(u(this.db,"users",t),{licenseAssignment:{licenseId:e,licenseKey:n.key,licenseType:n.tier,assignedAt:new Date},updatedAt:new Date});try{const c=w(h(this.db,v.TEAM_MEMBERS),y("userId","==",t),E(1)),i=await D(c);if(!i.empty){const d=i.docs[0];await p(d.ref,{licenseAssignment:{licenseId:e,licenseKey:n.key,licenseType:n.tier,assignedAt:new Date},updatedAt:new Date}),console.log("✅ [UnifiedDataService] Updated teamMembers collection with license assignment")}}catch(c){console.warn("⚠️ [UnifiedDataService] Failed to update teamMembers collection:",c)}try{const c=w(h(this.db,v.ORG_MEMBERS),y("userId","==",t),E(1)),i=await D(c);if(!i.empty){const d=i.docs[0];await p(d.ref,{licenseAssignment:{licenseId:e,licenseKey:n.key,licenseType:n.tier,assignedAt:new Date},updatedAt:new Date}),console.log("✅ [UnifiedDataService] Updated orgMembers collection with license assignment")}}catch(c){console.warn("⚠️ [UnifiedDataService] Failed to update orgMembers collection:",c)}console.log("✅ [UnifiedDataService] License assignment completed - all collections updated"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(s){throw console.error("❌ [UnifiedDataService] Error assigning license:",s),s}}async unassignLicense(e){var t;try{console.log("🎫 [UnifiedDataService] Unassigning license",e);const s=await S(u(this.db,"licenses",e));if(!s.exists())throw new Error("License not found");const o=(t=s.data().assignedTo)==null?void 0:t.userId;if(await p(u(this.db,"licenses",e),{assignedTo:null,status:"PENDING",updatedAt:new Date}),o&&(await p(u(this.db,"users",o),{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from user record",o)),o)try{const n=w(h(this.db,v.TEAM_MEMBERS),y("userId","==",o),E(1)),c=await D(n);if(!c.empty){const i=c.docs[0];await p(i.ref,{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from teamMembers collection")}}catch(n){console.warn("⚠️ [UnifiedDataService] Failed to update teamMembers collection:",n)}if(o)try{const n=w(h(this.db,v.ORG_MEMBERS),y("userId","==",o),E(1)),c=await D(n);if(!c.empty){const i=c.docs[0];await p(i.ref,{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from orgMembers collection")}}catch(n){console.warn("⚠️ [UnifiedDataService] Failed to update orgMembers collection:",n)}console.log("✅ [UnifiedDataService] License unassignment completed - license returned to org pool"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(s){throw console.error("❌ [UnifiedDataService] Error unassigning license:",s),s}}async getTeamMembersForOrganization(){var a,o,n,c,i,d,g,C,M;const e=await this.getCurrentUser();if(!e)return[];const t=`org-team-members-${e.organization.id}`,s=this.getFromCache(t);if(s)return s;try{console.log("🔍 [UnifiedDataService] Fetching team members for organization:",e.organization.id);const f=new Map;console.log("🔍 [UnifiedDataService] Trying users collection...");try{const m=await N.queryDocumentsWithFallback("users",[{field:"organizationId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${m.documents.length} users in users collection`);for(const A of m.documents){const r=A;if(r.id===e.id)continue;const l={id:r.id,firstName:r.firstName||((a=r.name)==null?void 0:a.split(" ")[0])||r.email.split("@")[0],lastName:r.lastName||((o=r.name)==null?void 0:o.split(" ")[1])||"",email:r.email,role:r.role||"member",status:r.status==="active"?"active":"pending",organization:{id:r.organizationId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:r.licenseAssignment?{licenseId:r.licenseAssignment.licenseId,licenseKey:r.licenseAssignment.licenseKey,licenseType:r.licenseAssignment.licenseType,assignedAt:r.licenseAssignment.assignedAt}:void 0,department:r.department||"General",assignedProjects:r.assignedProjects||[],avatar:r.avatar,joinedAt:r.createdAt||new Date,lastActive:r.lastActive,invitedBy:r.invitedBy||e.id,createdAt:r.createdAt||new Date,updatedAt:r.updatedAt||new Date};f.set(r.email,l)}}catch(m){console.warn("⚠️ [UnifiedDataService] Users collection query failed:",m)}console.log("🔍 [UnifiedDataService] Trying teamMembers collection...");try{const m=await N.queryDocumentsWithFallback("teamMembers",[{field:"organizationId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${m.documents.length} team members in teamMembers collection`);for(const A of m.documents){const r=A;if(r.status==="removed"||r.status==="suspended")continue;const l={id:r.id,firstName:r.firstName||((n=r.name)==null?void 0:n.split(" ")[0])||r.email.split("@")[0],lastName:r.lastName||((c=r.name)==null?void 0:c.split(" ")[1])||"",email:r.email,role:r.role||"member",status:r.status||"active",organization:{id:r.organizationId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:r.licenseAssignment?{licenseId:r.licenseAssignment.licenseId,licenseKey:r.licenseAssignment.licenseKey,licenseType:r.licenseAssignment.licenseType,assignedAt:r.licenseAssignment.assignedAt}:void 0,department:r.department||"General",assignedProjects:r.assignedProjects||[],avatar:r.avatar,joinedAt:r.joinedAt||r.createdAt||new Date,lastActive:r.lastActive,invitedBy:r.invitedBy||e.id,createdAt:r.createdAt||new Date,updatedAt:r.updatedAt||new Date},b=f.get(r.email);b?(b.role=r.role||b.role,b.status=r.status||b.status,b.department=r.department||b.department,b.licenseAssignment=r.licenseAssignment||b.licenseAssignment,f.set(r.email,b)):f.set(r.email,l)}}catch(m){console.warn("⚠️ [UnifiedDataService] TeamMembers collection query failed:",m)}console.log("🔍 [UnifiedDataService] Trying orgMembers collection...");try{const m=await N.queryDocumentsWithFallback("orgMembers",[{field:"orgId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${m.documents.length} org members in orgMembers collection`);for(const A of m.documents){const r=A;if(r.status==="removed"||r.status==="suspended")continue;const l=f.get(r.email);if(l)l.role=r.role||l.role,l.status=r.status||l.status,l.department=r.department||l.department,l.joinedAt=r.joinedAt||l.joinedAt,f.set(r.email,l);else{const b={id:r.userId,firstName:r.firstName||((i=r.name)==null?void 0:i.split(" ")[0])||((d=r.email)==null?void 0:d.split("@")[0])||"Unknown",lastName:r.lastName||((g=r.name)==null?void 0:g.split(" ")[1])||"",email:r.email||r.userEmail||"",role:r.role||"member",status:r.status||"active",organization:{id:r.orgId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:void 0,department:r.department||"General",assignedProjects:[],avatar:r.avatar,joinedAt:r.joinedAt||r.createdAt||new Date,lastActive:r.lastActive,invitedBy:r.invitedBy||e.id,createdAt:r.createdAt||new Date,updatedAt:r.updatedAt||new Date};f.set(r.email||r.userEmail||"",b)}}}catch(m){console.warn("⚠️ [UnifiedDataService] OrgMembers collection query failed:",m)}console.log("🔍 [UnifiedDataService] Trying org_members collection...");try{const m=await N.queryDocumentsWithFallback("org_members",[{field:"orgId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${m.documents.length} org members in org_members collection`);for(const A of m.documents){const r=A;if(r.status==="removed"||r.status==="suspended")continue;const l=r.email||r.userEmail||"";if(l&&!f.has(l)){const b={id:r.userId,firstName:r.firstName||((C=r.name)==null?void 0:C.split(" ")[0])||l.split("@")[0]||"Unknown",lastName:r.lastName||((M=r.name)==null?void 0:M.split(" ")[1])||"",email:l,role:r.role||"member",status:r.status||"active",organization:{id:r.orgId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:void 0,department:r.department||"General",assignedProjects:[],avatar:r.avatar,joinedAt:r.joinedAt||r.createdAt||new Date,lastActive:r.lastActive,invitedBy:r.invitedBy||e.id,createdAt:r.createdAt||new Date,updatedAt:r.updatedAt||new Date};f.set(l,b)}}}catch(m){console.warn("⚠️ [UnifiedDataService] org_members collection query failed:",m)}const U=Array.from(f.values());return console.log(`✅ [UnifiedDataService] Successfully fetched ${U.length} unique team members for organization: ${e.organization.id}`),this.setCache(t,U),U}catch(f){return console.error("❌ [UnifiedDataService] Failed to fetch team members:",f),[]}}async inviteTeamMember(e){console.log("🚀 [UnifiedDataService] Creating team member via backend API:",e.email);try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const s={email:e.email,firstName:e.firstName,lastName:e.lastName,department:e.department||"",licenseType:"PROFESSIONAL",organizationId:e.organization.id,sendWelcomeEmail:!0,temporaryPassword:e.temporaryPassword||this.generateSecurePassword()};console.log("📤 [UnifiedDataService] Sending team member creation request to backend API...");const a=await this.api.post("/team-members/create",s);if(!a.data.success)throw new Error(a.data.error||"Failed to create team member");const o=a.data.data.teamMember;return console.log("✅ [UnifiedDataService] Team member created successfully via backend API:",o.id),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-members-"),this.clearCacheByPattern("user-profiles-"),o.id}catch(t){throw console.error("❌ [UnifiedDataService] Error creating team member via backend API:",t),t}}async ensureTeamMemberProjectReadiness(e){const t={success:!0,collectionsCreated:[],collectionsFound:[],errors:[]};try{console.log("🔍 [UnifiedDataService] Checking team member project readiness for userId:",e);const s=await S(u(this.db,v.USERS,e));if(!s.exists())return t.errors.push("User record not found"),t.success=!1,t;const a=s.data();console.log("📋 [UnifiedDataService] Found user data:",a);const o=[{name:"teamMembers",collection:v.TEAM_MEMBERS,createData:()=>({userId:e,email:a.email,firstName:a.firstName,lastName:a.lastName,name:`${a.firstName} ${a.lastName}`,role:a.role||"member",status:a.status||"active",organizationId:a.organizationId,orgId:a.organizationId,department:a.department||"",isActive:!0,firebaseUid:a.firebaseUid||"",createdAt:new Date,updatedAt:new Date})},{name:"orgMembers",collection:v.ORG_MEMBERS,createData:()=>({organizationId:a.organizationId,orgId:a.organizationId,userId:e,email:a.email,name:`${a.firstName} ${a.lastName}`,firstName:a.firstName,lastName:a.lastName,role:a.role||"member",status:a.status||"active",seatReserved:!0,department:a.department||"",invitedByUserId:"system",invitedAt:new Date,joinedAt:new Date,createdAt:new Date,updatedAt:new Date})},{name:"userProfiles",collection:v.USER_PROFILES,createData:()=>({userId:e,email:a.email,firstName:a.firstName,lastName:a.lastName,displayName:`${a.firstName} ${a.lastName}`,avatar:a.avatar||`https://ui-avatars.com/api/?name=${encodeURIComponent(a.firstName+" "+a.lastName)}&background=667eea&color=fff`,department:a.department||"",position:"",phone:"",organizationId:a.organizationId,role:a.role||"member",status:a.status||"active",bio:"",preferences:{},createdAt:new Date,updatedAt:new Date})}];for(const n of o)try{const c=w(h(this.db,n.collection),y("userId","==",e),E(1));if((await D(c)).empty){console.log(`📝 [UnifiedDataService] Creating missing ${n.name} record for user ${e}`);const d=await B(h(this.db,n.collection),n.createData());t.collectionsCreated.push(`${n.name} (${d.id})`),console.log(`✅ [UnifiedDataService] Created ${n.name} record: ${d.id}`)}else t.collectionsFound.push(n.name),console.log(`✅ [UnifiedDataService] Found existing ${n.name} record`)}catch(c){const i=`Failed to check/create ${n.name}: ${c.message}`;t.errors.push(i),console.error(`❌ [UnifiedDataService] ${i}`,c)}return console.log("📊 [UnifiedDataService] Team member project readiness check complete:",t),t}catch(s){return console.error("❌ [UnifiedDataService] Failed to ensure team member project readiness:",s),t.errors.push(`General error: ${s.message}`),t.success=!1,t}}generateSecurePassword(){const t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";let s="";for(let a=0;a<12;a++)s+=t.charAt(Math.floor(Math.random()*t.length));return s}async updateTeamMember(e,t){try{const s={...t,updatedAt:new Date};await p(u(this.db,"users",e),s),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(s){throw console.error("Error updating team member:",s),s}}async changeTeamMemberPassword(e,t){try{console.log("🔐 [UnifiedDataService] Changing password for member:",e);const s=await fetch(`/api/team-members/${e}/reset-password`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${await this.getAuthToken()}`},body:JSON.stringify({newPassword:t})});if(!s.ok){const a=await s.json().catch(()=>({}));throw new Error(a.message||`Failed to change password: ${s.status}`)}console.log("✅ [UnifiedDataService] Password changed successfully")}catch(s){throw console.error("❌ [UnifiedDataService] Error changing password:",s),s}}async removeTeamMember(e,t){try{console.log("👤 [UnifiedDataService] Starting comprehensive team member removal:",e);const s=await S(u(this.db,"users",e));if(!s.exists()&&!(await S(u(this.db,"teamMembers",e))).exists())throw new Error("Team member not found");const a=s.exists()?s.data():null,o=t||(a==null?void 0:a.organizationId);if(!o)throw new Error("Organization ID is required for team member removal");console.log("🔍 [UnifiedDataService] Team member organization:",o);const n=await this.getAuthToken(),c=await fetch(`${window.location.origin}/api/team-members/remove-completely`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n}`},body:JSON.stringify({teamMemberId:e,organizationId:o})});if(!c.ok)throw new Error(`HTTP ${c.status}: ${c.statusText}`);const i=await c.json();console.log("✅ [UnifiedDataService] Team member removal completed:",{cleanedCollections:i.cleanedCollections,licenseRestored:i.licenseRestored,firebaseUserDeleted:i.firebaseUserDeleted}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-members-"),this.clearCacheByPattern("project-team-members-"),console.log("✅ [UnifiedDataService] Team member completely removed with full cleanup")}catch(s){throw console.error("❌ [UnifiedDataService] Error removing team member:",s),s}}async assignLicenseToTeamMember(e,t,s,a){try{await p(u(this.db,"users",e),{licenseAssignment:{licenseId:t,licenseKey:s,licenseType:a,assignedAt:new Date},updatedAt:new Date}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-licenses-")}catch(o){throw console.error("Error assigning license to team member:",o),o}}async getDatasetsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-datasets-${e.id}`,s=this.getFromCache(t);if(s)return s;try{const a=w(h(this.db,"datasets"),y("owner.organizationId","==",e.organization.id),y("status","==","ACTIVE"),R("updatedAt","desc")),n=(await D(a)).docs.map(c=>{var d,g;const i=c.data();return{...i,id:c.id,createdAt:((d=i.createdAt)==null?void 0:d.toDate())||new Date,updatedAt:((g=i.updatedAt)==null?void 0:g.toDate())||new Date}});return this.setCache(t,n),n}catch(a){return console.error("Error fetching user datasets:",a),[]}}getFromCache(e){const t=this.cache.get(e);return t?Date.now()>t.timestamp+t.ttl?(this.cache.delete(e),null):t.data:null}setCache(e,t,s=this.CACHE_TTL){this.cache.set(e,{data:t,timestamp:Date.now(),ttl:s})}clearCacheByPattern(e){for(const t of this.cache.keys())t.includes(e)&&this.cache.delete(t)}clearAllCache(){this.cache.clear(),console.log("🧹 [UnifiedDataService] All cache cleared")}async forceRefreshLicenses(){console.log("🔄 [UnifiedDataService] Force refreshing license data..."),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),await this.getLicensesForOrganization(),console.log("✅ [UnifiedDataService] License data force refreshed")}clearUserCache(e){e?(this.clearCacheByPattern("current-user"),this.clearCacheByPattern(`org-users-${e}`),this.clearCacheByPattern("org-context"),this.clearCacheByPattern("org-licenses")):this.clearAllCache()}async getCollectionName(e){const t=v[e];try{const s=w(h(this.db,t),E(1));return await D(s),console.log(`✅ [UnifiedDataService] Using primary collection: ${t}`),t}catch{const a=`${e}_LEGACY`;if(v[a]){const o=v[a];try{const n=w(h(this.db,o),E(1));return await D(n),console.log(`⚠️ [UnifiedDataService] Falling back to legacy collection: ${o}`),o}catch{console.warn(`⚠️ [UnifiedDataService] Both primary and legacy collections failed for ${e}`)}}return console.warn(`⚠️ [UnifiedDataService] Using primary collection name despite access issues: ${t}`),t}}static getInstance(){return z.instance||(z.instance=new z),z.instance}};T(z,"instance");let F=z;const J=F.getInstance();export{J as default,J as unifiedDataService};
