const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-Di-nGvuy.js","assets/index-UlA8C2rF.js","assets/mui-Cr9U6iW2.js","assets/vendor-CjD1bmmO.js","assets/stripe-ggaMUove.js","assets/index-CBai7h7s.css","assets/index.esm-DmQE6AXN.js","assets/index.esm-B4qVkIPL.js","assets/index.esm-DeaBpi77.js"])))=>i.map(i=>d[i]);
var j=Object.defineProperty;var N=(z,e,t)=>e in z?j(z,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):z[e]=t;var E=(z,e,t)=>N(z,typeof e!="symbol"?e+"":e,t);import{_ as R}from"./index-UlA8C2rF.js";import{getDoc as S,doc as u,query as y,collection as g,where as w,getDocs as A,updateDoc as D,addDoc as P,arrayUnion as F,arrayRemove as I,limit as k,orderBy as T}from"./index.esm-B4qVkIPL.js";import"./mui-Cr9U6iW2.js";import"./vendor-CjD1bmmO.js";import"./stripe-ggaMUove.js";import"./index.esm-DmQE6AXN.js";const C=class C{constructor(){E(this,"cache",new Map);E(this,"CACHE_TTL",5*60*1e3);E(this,"db",null);E(this,"auth",null);this.initializeFirebase()}async initializeFirebase(){try{console.log("🔧 [UnifiedDataService] Initializing Firebase...");const{db:e,auth:t}=await R(async()=>{const{db:r,auth:a}=await import("./firebase-Di-nGvuy.js");return{db:r,auth:a}},__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=e,this.auth=t,console.log("✅ [UnifiedDataService] Firebase initialized successfully")}catch(e){throw console.error("❌ [UnifiedDataService] Failed to initialize Firebase:",e),e}}async waitForAuthReady(){var e;return this.auth||await this.initializeFirebase(),(e=this.auth)!=null&&e.currentUser?!0:new Promise(t=>{const r=setTimeout(()=>{t(!1)},5e3),a=this.auth.onAuthStateChanged(n=>{clearTimeout(r),a(),t(!!n)})})}async getAuthToken(){var e;if(!((e=this.auth)!=null&&e.currentUser))throw new Error("No authenticated user found");try{const t=await this.auth.currentUser.getIdToken();if(!t)throw new Error("Failed to get ID token from Firebase Auth");return t}catch(t){throw console.error("❌ [UnifiedDataService] Error getting auth token:",t),new Error("Failed to get authentication token")}}mapUserDocument(e){var r,a,n;const t=e.data();return{id:e.id,email:t.email||"",name:t.name||t.firstName+" "+t.lastName||"Unknown User",userType:t.userType||"TEAM_MEMBER",role:t.role||"member",organization:{id:t.organizationId||t.orgId||"default-org",name:t.organizationName||"Unknown Organization",tier:t.tier||"BASIC",isOwner:t.isOwner||t.role==="OWNER"||!1},license:{type:t.licenseType||t.tier||"BASIC",status:t.status||"ACTIVE",permissions:t.permissions||[],canCreateProjects:t.tier==="ENTERPRISE"||t.tier==="PROFESSIONAL",canManageTeam:t.role==="admin"||t.role==="owner"||t.role==="OWNER"},teamMemberData:t.userType==="TEAM_MEMBER"?{managedBy:t.managedBy||"",department:t.department||"",assignedProjects:t.assignedProjects||[]}:void 0,status:t.status||"ACTIVE",createdAt:((r=t.createdAt)==null?void 0:r.toDate())||new Date,updatedAt:((a=t.updatedAt)==null?void 0:a.toDate())||new Date,lastLoginAt:(n=t.lastLoginAt)==null?void 0:n.toDate()}}async getCurrentUser(){var a;const e="current-user",t=this.getFromCache(e);if(t)return t;if(!await this.waitForAuthReady())return console.log("🔍 [UnifiedDataService] Firebase Auth not ready after waiting"),null;if(!((a=this.auth)!=null&&a.currentUser))return console.log("🔍 [UnifiedDataService] No Firebase Auth user found after auth ready"),null;try{const n=this.auth.currentUser.email,o=this.auth.currentUser.uid;console.log("🔍 [UnifiedDataService] Looking for user:",n,"UID:",o);let c=await S(u(this.db,"users",o));if(c.exists()){console.log("✅ [UnifiedDataService] Found user in users collection");const s=this.mapUserDocument(c);return this.setCache(e,s),s}try{const s=y(g(this.db,"users"),w("email","==",n)),i=await A(s);if(!i.empty){console.log("✅ [UnifiedDataService] Found user by email in users collection");const l=this.mapUserDocument(i.docs[0]);return this.setCache(e,l),l}}catch(s){console.warn("⚠️ [UnifiedDataService] Error querying users by email:",s)}try{const s=y(g(this.db,"orgMembers"),w("email","==",n)),i=await A(s);if(!i.empty){console.log("✅ [UnifiedDataService] Found user in orgMembers collection");const l=this.mapUserDocument(i.docs[0]);return this.setCache(e,l),l}}catch(s){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers:",s)}return console.log("❌ [UnifiedDataService] User not found in any collection"),null}catch(n){return console.error("❌ [UnifiedDataService] Error fetching current user:",n),null}}async getUsersByOrganization(e){const t=`org-users-${e}`,r=this.getFromCache(t);if(r)return r;try{console.log("🔍 [UnifiedDataService] Fetching users for organization:",e),this.db||await this.initializeFirebase();let a=[];try{console.log("🔍 [UnifiedDataService] Trying users collection...");const o=y(g(this.db,"users"),w("organizationId","==",e)),c=await A(o);console.log("📊 [UnifiedDataService] Found",c.docs.length,"users in users collection"),a=a.concat(c.docs.map(s=>this.mapUserDocument(s)))}catch(o){console.warn("⚠️ [UnifiedDataService] Error querying users collection:",o)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers collection...");const o=y(g(this.db,"orgMembers"),w("organizationId","==",e)),c=await A(o);console.log("📊 [UnifiedDataService] Found",c.docs.length,"users in orgMembers collection"),a=a.concat(c.docs.map(s=>this.mapUserDocument(s)))}catch(o){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers collection:",o)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers with orgId field...");const o=y(g(this.db,"orgMembers"),w("orgId","==",e)),c=await A(o);console.log("📊 [UnifiedDataService] Found",c.docs.length,"users in orgMembers with orgId"),a=a.concat(c.docs.map(s=>this.mapUserDocument(s)))}catch(o){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers with orgId:",o)}const n=a.filter((o,c,s)=>c===s.findIndex(i=>i.email===o.email));return this.setCache(t,n),console.log("✅ [UnifiedDataService] Successfully fetched",n.length,"unique users for organization:",e),n}catch(a){return console.error("❌ [UnifiedDataService] Error fetching organization users:",a),a instanceof Error&&(console.error("Error details:",a.message),console.error("Error stack:",a.stack)),[]}}async updateUser(e,t){try{const r={...t,updatedAt:new Date};await D(u(this.db,"users",e),r),this.clearCacheByPattern("current-user"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-context-")}catch(r){throw console.error("Error updating user:",r),r}}safeToDate(e){return e?e instanceof Date?e:typeof e.toDate=="function"?e.toDate():typeof e=="string"?new Date(e):typeof e=="number"?new Date(e):new Date:new Date}async getProjectsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-projects-${e.id}`,r=this.getFromCache(t);if(r)return r;try{const a=y(g(this.db,"projects"),w("organizationId","==",e.organization.id)),o=(await A(a)).docs.map(c=>{const s=c.data();return console.log("🔍 [UnifiedDataService] Processing project data:",{id:c.id,data:s}),{...s,id:c.id,createdAt:this.safeToDate(s.createdAt),updatedAt:this.safeToDate(s.updatedAt),lastAccessedAt:this.safeToDate(s.lastAccessedAt)}});return this.setCache(t,o),o}catch(a){return console.error("Error fetching user projects:",a),[]}}async createProject(e){try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const r={...e,createdAt:new Date,updatedAt:new Date,lastAccessedAt:new Date},a=await P(g(this.db,"projects"),r);return this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("org-projects-"),this.clearCacheByPattern("org-context-"),a.id}catch(t){throw console.error("Error creating project:",t),t}}async updateProject(e,t){try{const r={...t,updatedAt:new Date};await D(u(this.db,"projects",e),r),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(r){throw console.error("Error updating project:",r),r}}async addTeamMemberToProject(e,t,r){try{const a=await S(u(this.db,"users",t));if(!a.exists())throw new Error("User not found");const n=a.data(),o=await this.getCurrentUser(),c={userId:n.id,email:n.email,name:n.name,role:r,assignedAt:new Date,assignedBy:(o==null?void 0:o.email)||"system"};await D(u(this.db,"projects",e),{teamAssignments:F(c),updatedAt:new Date}),await D(u(this.db,"users",t),{"teamMemberData.assignedProjects":F(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(a){throw console.error("Error adding team member to project:",a),a}}async removeTeamMemberFromProject(e,t){try{const r=await S(u(this.db,"projects",e));if(!r.exists())throw new Error("Project not found");const n=r.data().teamAssignments.find(o=>o.userId===t);n&&(await D(u(this.db,"projects",e),{teamAssignments:I(n),updatedAt:new Date}),await D(u(this.db,"users",t),{"teamMemberData.assignedProjects":I(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-"))}catch(r){throw console.error("Error removing team member from project:",r),r}}async getOrganizationContext(){var a,n,o,c,s,i;(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)throw new Error("No authenticated user");const t=`org-context-${e.organization.id}`,r=this.getFromCache(t);if(r)return r;try{const l=await S(u(this.db,"organizations",e.organization.id));if(!l.exists())throw new Error(`Organization ${e.organization.id} not found`);const h=l.data(),d={...h,id:e.organization.id,createdAt:((a=h.createdAt)==null?void 0:a.toDate())||new Date,updatedAt:((n=h.updatedAt)==null?void 0:n.toDate())||new Date},f=y(g(this.db,"subscriptions"),w("organizationId","==",e.organization.id),w("status","==","ACTIVE"),k(1)),p=await A(f);let b=null;if(!p.empty){const m=p.docs[0].data();b={...m,id:p.docs[0].id,createdAt:((o=m.createdAt)==null?void 0:o.toDate())||new Date,updatedAt:((c=m.updatedAt)==null?void 0:c.toDate())||new Date,currentPeriodStart:((s=m.currentPeriodStart)==null?void 0:s.toDate())||new Date,currentPeriodEnd:((i=m.currentPeriodEnd)==null?void 0:i.toDate())||new Date}}let U=[];try{U=await this.getUsersByOrganization(e.organization.id)}catch(m){throw console.error("Failed to get organization members:",m),m}const v={organization:d,subscription:b,members:U};return this.setCache(t,v,10*60*1e3),v}catch(l){throw console.error("Error fetching organization context:",l),l}}async getLicensesForOrganization(){(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)return console.log("🔍 [UnifiedDataService] No user found for license query"),[];console.log("🔍 [UnifiedDataService] Fetching licenses for organization:",e.organization.id);const t=`org-licenses-${e.organization.id}`,r=this.getFromCache(t);if(r)return console.log("📋 [UnifiedDataService] Returning cached licenses:",r.length),r;try{const a=y(g(this.db,"licenses"),w("organizationId","==",e.organization.id),T("createdAt","desc")),n=await A(a);console.log("📊 [UnifiedDataService] Found",n.docs.length,"license documents");const o=n.docs.map(c=>{var i,l,h,d,f,p;const s=c.data();return{id:c.id,key:s.key||"",name:s.name||`License ${c.id}`,tier:s.tier||"BASIC",status:s.status||"PENDING",organization:{id:s.organizationId||"",name:s.organizationName||"Unknown Organization",tier:s.tier||"BASIC"},assignedTo:s.userId?{userId:s.userId,name:s.userName||s.userEmail||"Unknown User",email:s.userEmail||"",assignedAt:((i=s.activatedAt)==null?void 0:i.toDate())||new Date}:void 0,usage:{apiCalls:s.usageCount||0,dataTransfer:0,deviceCount:1,maxDevices:s.tier==="ENTERPRISE"?10:s.tier==="PROFESSIONAL"?5:2},activatedAt:(l=s.activatedAt)==null?void 0:l.toDate(),expiresAt:((h=s.expiresAt)==null?void 0:h.toDate())||new Date,lastUsed:(d=s.lastUsed)==null?void 0:d.toDate(),createdAt:((f=s.createdAt)==null?void 0:f.toDate())||new Date,updatedAt:((p=s.updatedAt)==null?void 0:p.toDate())||new Date}});return console.log("✅ [UnifiedDataService] Processed",o.length,"licenses for organization"),this.setCache(t,o),o}catch(a){return console.error("Error fetching organization licenses:",a),[]}}async createLicense(e){var t,r,a,n,o;try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const s={key:e.key,name:e.name,tier:e.tier,status:e.status,organizationId:e.organization.id,organizationName:e.organization.name,usageCount:((t=e.usage)==null?void 0:t.apiCalls)||0,userId:((r=e.assignedTo)==null?void 0:r.userId)||null,userName:((a=e.assignedTo)==null?void 0:a.name)||null,userEmail:((n=e.assignedTo)==null?void 0:n.email)||null,activatedAt:((o=e.assignedTo)==null?void 0:o.assignedAt)||null,expiresAt:e.expiresAt,lastUsed:null,createdAt:new Date,updatedAt:new Date,organization:e.organization,usage:e.usage};console.log("🎫 [UnifiedDataService] Creating license with Firestore data:",s);const i=await P(g(this.db,"licenses"),s);return this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),console.log("🧹 [UnifiedDataService] Cleared license-related caches"),console.log("✅ [UnifiedDataService] License created with ID:",i.id),setTimeout(()=>{this.forceRefreshLicenses().catch(console.error)},100),i.id}catch(c){throw console.error("❌ [UnifiedDataService] Error creating license:",c),c}}async updateLicense(e,t){try{const r={...t,updatedAt:new Date};await D(u(this.db,"licenses",e),r),this.clearCacheByPattern("org-licenses-")}catch(r){throw console.error("Error updating license:",r),r}}async assignLicense(e,t){try{console.log("🎫 [UnifiedDataService] Assigning license",e,"to user",t);const r=await S(u(this.db,"users",t));if(!r.exists())throw new Error("User not found");const a=r.data(),n=await S(u(this.db,"licenses",e));if(!n.exists())throw new Error("License not found");const o=n.data();console.log("🔍 [UnifiedDataService] User data:",{id:t,email:a.email,name:a.name}),console.log("🔍 [UnifiedDataService] License data:",{id:e,key:o.key,tier:o.tier}),await D(u(this.db,"licenses",e),{assignedTo:{userId:t,name:a.name||a.firstName+" "+a.lastName||a.email,email:a.email,assignedAt:new Date},status:"ACTIVE",updatedAt:new Date}),await D(u(this.db,"users",t),{licenseAssignment:{licenseId:e,licenseKey:o.key,licenseType:o.tier,assignedAt:new Date},updatedAt:new Date}),console.log("✅ [UnifiedDataService] License assignment completed - both records updated"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(r){throw console.error("❌ [UnifiedDataService] Error assigning license:",r),r}}async unassignLicense(e){var t;try{console.log("🎫 [UnifiedDataService] Unassigning license",e);const r=await S(u(this.db,"licenses",e));if(!r.exists())throw new Error("License not found");const n=(t=r.data().assignedTo)==null?void 0:t.userId;await D(u(this.db,"licenses",e),{assignedTo:null,status:"PENDING",updatedAt:new Date}),n&&(await D(u(this.db,"users",n),{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from user",n)),console.log("✅ [UnifiedDataService] License unassignment completed - both records updated"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(r){throw console.error("❌ [UnifiedDataService] Error unassigning license:",r),r}}async migrateExistingTeamMembers(){try{const e=await this.getCurrentUser();if(!e)return;console.log("🔧 [UnifiedDataService] Starting team member migration...");const t=y(g(this.db,"users"),w("organizationId","==",e.organization.id)),r=await A(t);console.log("📊 [UnifiedDataService] Found",r.size,"users to check for migration");const a=y(g(this.db,"teamMembers"),w("organizationId","==",e.organization.id)),n=await A(a),o=new Set(n.docs.map(s=>s.data().userId||s.id));console.log("📊 [UnifiedDataService] Found",o.size,"existing team member records");let c=0;for(const s of r.docs){const i=s.data();if(o.has(s.id)||i.userType!=="TEAM_MEMBER"&&!i.isTeamMember)continue;console.log("🔧 [UnifiedDataService] Migrating user to teamMembers:",s.id,i.email);const l={userId:s.id,firstName:i.firstName,lastName:i.lastName,email:i.email,role:i.role,status:i.status,department:i.department||"",organizationId:i.organizationId||e.organization.id,organization:i.organization,assignedProjects:i.assignedProjects||[],licenseAssignment:i.licenseAssignment,createdAt:i.createdAt||new Date,updatedAt:new Date,joinedAt:i.joinedAt||i.createdAt||new Date,lastActive:i.lastActive,avatar:i.avatar};i.position&&(l.position=i.position),i.phone&&(l.phone=i.phone),l.isActive=i.status==="active"||i.status==="pending",await P(g(this.db,"teamMembers"),l),c++}console.log("✅ [UnifiedDataService] Migration complete. Migrated",c,"team members"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(e){throw console.error("❌ [UnifiedDataService] Migration failed:",e),e}}async getTeamMembersForOrganization(){const e=await this.getCurrentUser();if(!e)return[];const t=`org-team-members-${e.organization.id}`,r=this.getFromCache(t);if(r)return r;try{console.log("🔍 [UnifiedDataService] Fetching users for organization:",e.organization.id);const a=y(g(this.db,"users"),w("organizationId","==",e.organization.id),T("createdAt","desc")),n=await A(a);console.log("🔍 [UnifiedDataService] Trying users collection..."),console.log("📊 [UnifiedDataService] Found",n.size,"users in users collection");const o=y(g(this.db,"teamMembers"),w("organizationId","==",e.organization.id),T("createdAt","desc")),c=await A(o);console.log("🔍 [UnifiedDataService] Trying teamMembers collection..."),console.log("📊 [UnifiedDataService] Found",c.size,"users in teamMembers collection");let s;try{const h=y(g(this.db,"teamMembers"),w("orgId","==",e.organization.id));s=await A(h),console.log("🔍 [UnifiedDataService] Trying teamMembers with orgId field..."),console.log("📊 [UnifiedDataService] Found",s.size,"users in teamMembers with orgId")}catch{console.log("⚠️ [UnifiedDataService] orgId query failed, continuing...")}const i=new Map;n.docs.forEach(h=>{var p,b,U,v,m;const d=h.data(),f={...d,id:h.id,createdAt:((p=d.createdAt)==null?void 0:p.toDate())||new Date,updatedAt:((b=d.updatedAt)==null?void 0:b.toDate())||new Date,joinedAt:((U=d.joinedAt)==null?void 0:U.toDate())||new Date,lastActive:(v=d.lastActive)==null?void 0:v.toDate(),licenseAssignment:d.licenseAssignment?{...d.licenseAssignment,assignedAt:((m=d.licenseAssignment.assignedAt)==null?void 0:m.toDate())||new Date}:void 0};i.set(h.id,f)}),c.docs.forEach(h=>{var p,b,U,v,m;const d=h.data(),f=d.userId||h.id;if(i.has(f)){const M=i.get(f);i.set(f,{...M})}else{const M={...d,id:f,createdAt:((p=d.createdAt)==null?void 0:p.toDate())||new Date,updatedAt:((b=d.updatedAt)==null?void 0:b.toDate())||new Date,joinedAt:((U=d.joinedAt)==null?void 0:U.toDate())||new Date,lastActive:(v=d.lastActive)==null?void 0:v.toDate(),licenseAssignment:d.licenseAssignment?{...d.licenseAssignment,assignedAt:((m=d.licenseAssignment.assignedAt)==null?void 0:m.toDate())||new Date}:void 0};i.set(f,M)}}),s&&s.docs.forEach(h=>{var p,b,U,v,m;const d=h.data(),f=d.userId||h.id;if(!i.has(f)){const M={...d,id:f,createdAt:((p=d.createdAt)==null?void 0:p.toDate())||new Date,updatedAt:((b=d.updatedAt)==null?void 0:b.toDate())||new Date,joinedAt:((U=d.joinedAt)==null?void 0:U.toDate())||new Date,lastActive:(v=d.lastActive)==null?void 0:v.toDate(),licenseAssignment:d.licenseAssignment?{...d.licenseAssignment,assignedAt:((m=d.licenseAssignment.assignedAt)==null?void 0:m.toDate())||new Date}:void 0};i.set(f,M)}});const l=Array.from(i.values());return console.log("✅ [UnifiedDataService] Successfully fetched",l.length,"unique users for organization:",e.organization.id),this.setCache(t,l),l}catch(a){return console.error("Error fetching team members:",a),[]}}async inviteTeamMember(e){try{const t=await this.getCurrentUser();if(!t)throw new Error("No authenticated user");console.log("🔥 [UnifiedDataService] Creating Firebase authenticated user for team member...");const r={email:e.email,firstName:e.firstName,lastName:e.lastName,temporaryPassword:e.temporaryPassword||this.generateSecurePassword(),role:e.role,department:e.department,position:e.position,phone:e.phone,organizationId:e.organization.id,organizationName:e.organization.name,invitedBy:t.email,userType:"TEAM_MEMBER",status:"pending"};console.log("📤 [UnifiedDataService] Sending user creation request to backend...");const a={...e,status:"active",invitedBy:t.email,joinedAt:new Date,createdAt:new Date,updatedAt:new Date,avatar:e.avatar||`https://ui-avatars.com/api/?name=${encodeURIComponent(e.firstName+" "+e.lastName)}&background=667eea&color=fff`},{position:n,phone:o,temporaryPassword:c,...s}=e;console.log("🔍 [UnifiedDataService] Filtered team member data for Firestore:",s),console.log("🔍 [UnifiedDataService] Department field in Firestore data:",s.department),console.log("🔍 [UnifiedDataService] Department field type:",typeof s.department),console.log("📝 [UnifiedDataService] Creating user record in users collection...");const i=await P(g(this.db,"users"),{...s,organizationId:e.organization.id,userType:"TEAM_MEMBER",isTeamMember:!0,createdAt:new Date,updatedAt:new Date});console.log("📝 [UnifiedDataService] Creating team member record in teamMembers collection...");const l=await P(g(this.db,"teamMembers"),{...s,userId:i.id,organizationId:e.organization.id,position:n||"",phone:o||"",isActive:!0,createdAt:new Date,updatedAt:new Date});return console.log("✅ [UnifiedDataService] User created with ID:",i.id),console.log("✅ [UnifiedDataService] Team member created with ID:",l.id),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),i.id}catch(t){throw console.error("❌ [UnifiedDataService] Error creating team member:",t),t}}generateSecurePassword(){const t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";let r="";for(let a=0;a<12;a++)r+=t.charAt(Math.floor(Math.random()*t.length));return r}async updateTeamMember(e,t){try{const r={...t,updatedAt:new Date};await D(u(this.db,"users",e),r),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(r){throw console.error("Error updating team member:",r),r}}async changeTeamMemberPassword(e,t){try{console.log("🔐 [UnifiedDataService] Changing password for member:",e);const r=await fetch(`/api/team-members/${e}/reset-password`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${await this.getAuthToken()}`},body:JSON.stringify({newPassword:t})});if(!r.ok){const a=await r.json().catch(()=>({}));throw new Error(a.message||`Failed to change password: ${r.status}`)}console.log("✅ [UnifiedDataService] Password changed successfully")}catch(r){throw console.error("❌ [UnifiedDataService] Error changing password:",r),r}}async removeTeamMember(e){try{console.log("👤 [UnifiedDataService] Removing team member:",e);const t=await S(u(this.db,"users",e));if(!t.exists())throw new Error("Team member not found");const r=t.data(),a=r.licenseAssignment;if(console.log("🔍 [UnifiedDataService] Team member has license:",a),await D(u(this.db,"users",e),{status:"removed",updatedAt:new Date}),a){const n=r.licenseAssignment.licenseId;console.log("🎫 [UnifiedDataService] Releasing license back to pool:",n),await D(u(this.db,"licenses",n),{assignedTo:null,status:"PENDING",updatedAt:new Date}),await D(u(this.db,"users",e),{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] License released back to available pool")}this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-licenses-"),console.log("✅ [UnifiedDataService] Team member removed and license released (if applicable)")}catch(t){throw console.error("❌ [UnifiedDataService] Error removing team member:",t),t}}async assignLicenseToTeamMember(e,t,r,a){try{await D(u(this.db,"users",e),{licenseAssignment:{licenseId:t,licenseKey:r,licenseType:a,assignedAt:new Date},updatedAt:new Date}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-licenses-")}catch(n){throw console.error("Error assigning license to team member:",n),n}}async getDatasetsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-datasets-${e.id}`,r=this.getFromCache(t);if(r)return r;try{const a=y(g(this.db,"datasets"),w("owner.organizationId","==",e.organization.id),w("status","==","ACTIVE"),T("updatedAt","desc")),o=(await A(a)).docs.map(c=>{var i,l;const s=c.data();return{...s,id:c.id,createdAt:((i=s.createdAt)==null?void 0:i.toDate())||new Date,updatedAt:((l=s.updatedAt)==null?void 0:l.toDate())||new Date}});return this.setCache(t,o),o}catch(a){return console.error("Error fetching user datasets:",a),[]}}getFromCache(e){const t=this.cache.get(e);return t?Date.now()>t.timestamp+t.ttl?(this.cache.delete(e),null):t.data:null}setCache(e,t,r=this.CACHE_TTL){this.cache.set(e,{data:t,timestamp:Date.now(),ttl:r})}clearCacheByPattern(e){for(const t of this.cache.keys())t.includes(e)&&this.cache.delete(t)}clearAllCache(){this.cache.clear(),console.log("🧹 [UnifiedDataService] All cache cleared")}async forceRefreshLicenses(){console.log("🔄 [UnifiedDataService] Force refreshing license data..."),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),await this.getLicensesForOrganization(),console.log("✅ [UnifiedDataService] License data force refreshed")}clearUserCache(e){e?(this.clearCacheByPattern("current-user"),this.clearCacheByPattern(`org-users-${e}`),this.clearCacheByPattern("org-context"),this.clearCacheByPattern("org-licenses")):this.clearAllCache()}static getInstance(){return C.instance||(C.instance=new C),C.instance}};E(C,"instance");let B=C;const K=B.getInstance();export{K as default,K as unifiedDataService};
