const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-vQyZ__E-.js","assets/index-DgsBIZRr.js","assets/mui-Cr9U6iW2.js","assets/vendor-CjD1bmmO.js","assets/stripe-ggaMUove.js","assets/index-CBai7h7s.css","assets/index.esm-DmQE6AXN.js","assets/index.esm-B4qVkIPL.js","assets/index.esm-DeaBpi77.js"])))=>i.map(i=>d[i]);
var j=Object.defineProperty;var I=(U,e,t)=>e in U?j(U,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):U[e]=t;var C=(U,e,t)=>I(U,typeof e!="symbol"?e+"":e,t);import{_ as N}from"./index-DgsBIZRr.js";import{getDoc as E,doc as h,query as m,collection as u,where as l,getDocs as w,updateDoc as g,addDoc as P,arrayUnion as F,arrayRemove as M,limit as R,orderBy as S}from"./index.esm-B4qVkIPL.js";import"./mui-Cr9U6iW2.js";import"./vendor-CjD1bmmO.js";import"./stripe-ggaMUove.js";import"./index.esm-DmQE6AXN.js";const A=class A{constructor(){C(this,"cache",new Map);C(this,"CACHE_TTL",5*60*1e3);C(this,"db",null);C(this,"auth",null);this.initializeFirebase()}async initializeFirebase(){try{console.log("🔧 [UnifiedDataService] Initializing Firebase...");const{db:e,auth:t}=await N(async()=>{const{db:r,auth:s}=await import("./firebase-vQyZ__E-.js");return{db:r,auth:s}},__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=e,this.auth=t,console.log("✅ [UnifiedDataService] Firebase initialized successfully")}catch(e){throw console.error("❌ [UnifiedDataService] Failed to initialize Firebase:",e),e}}async waitForAuthReady(){var e;return this.auth||await this.initializeFirebase(),(e=this.auth)!=null&&e.currentUser?!0:new Promise(t=>{const r=setTimeout(()=>{t(!1)},5e3),s=this.auth.onAuthStateChanged(i=>{clearTimeout(r),s(),t(!!i)})})}mapUserDocument(e){var r,s,i;const t=e.data();return{id:e.id,email:t.email||"",name:t.name||t.firstName+" "+t.lastName||"Unknown User",userType:t.userType||"TEAM_MEMBER",role:t.role||"member",organization:{id:t.organizationId||t.orgId||"default-org",name:t.organizationName||"Unknown Organization",tier:t.tier||"BASIC",isOwner:t.isOwner||t.role==="OWNER"||!1},license:{type:t.licenseType||t.tier||"BASIC",status:t.status||"ACTIVE",permissions:t.permissions||[],canCreateProjects:t.tier==="ENTERPRISE"||t.tier==="PROFESSIONAL",canManageTeam:t.role==="admin"||t.role==="owner"||t.role==="OWNER"},teamMemberData:t.userType==="TEAM_MEMBER"?{managedBy:t.managedBy||"",department:t.department||"",assignedProjects:t.assignedProjects||[]}:void 0,status:t.status||"ACTIVE",createdAt:((r=t.createdAt)==null?void 0:r.toDate())||new Date,updatedAt:((s=t.updatedAt)==null?void 0:s.toDate())||new Date,lastLoginAt:(i=t.lastLoginAt)==null?void 0:i.toDate()}}async getCurrentUser(){var s;const e="current-user",t=this.getFromCache(e);if(t)return t;if(!await this.waitForAuthReady())return console.log("🔍 [UnifiedDataService] Firebase Auth not ready after waiting"),null;if(!((s=this.auth)!=null&&s.currentUser))return console.log("🔍 [UnifiedDataService] No Firebase Auth user found after auth ready"),null;try{const i=this.auth.currentUser.email,n=this.auth.currentUser.uid;console.log("🔍 [UnifiedDataService] Looking for user:",i,"UID:",n);let o=await E(h(this.db,"users",n));if(o.exists()){console.log("✅ [UnifiedDataService] Found user in users collection");const a=this.mapUserDocument(o);return this.setCache(e,a),a}try{const a=m(u(this.db,"users"),l("email","==",i)),c=await w(a);if(!c.empty){console.log("✅ [UnifiedDataService] Found user by email in users collection");const d=this.mapUserDocument(c.docs[0]);return this.setCache(e,d),d}}catch(a){console.warn("⚠️ [UnifiedDataService] Error querying users by email:",a)}try{const a=m(u(this.db,"orgMembers"),l("email","==",i)),c=await w(a);if(!c.empty){console.log("✅ [UnifiedDataService] Found user in orgMembers collection");const d=this.mapUserDocument(c.docs[0]);return this.setCache(e,d),d}}catch(a){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers:",a)}return console.log("❌ [UnifiedDataService] User not found in any collection"),null}catch(i){return console.error("❌ [UnifiedDataService] Error fetching current user:",i),null}}async getUsersByOrganization(e){const t=`org-users-${e}`,r=this.getFromCache(t);if(r)return r;try{console.log("🔍 [UnifiedDataService] Fetching users for organization:",e),this.db||await this.initializeFirebase();let s=[];try{console.log("🔍 [UnifiedDataService] Trying users collection...");const n=m(u(this.db,"users"),l("organizationId","==",e)),o=await w(n);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in users collection"),s=s.concat(o.docs.map(a=>this.mapUserDocument(a)))}catch(n){console.warn("⚠️ [UnifiedDataService] Error querying users collection:",n)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers collection...");const n=m(u(this.db,"orgMembers"),l("organizationId","==",e)),o=await w(n);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in orgMembers collection"),s=s.concat(o.docs.map(a=>this.mapUserDocument(a)))}catch(n){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers collection:",n)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers with orgId field...");const n=m(u(this.db,"orgMembers"),l("orgId","==",e)),o=await w(n);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in orgMembers with orgId"),s=s.concat(o.docs.map(a=>this.mapUserDocument(a)))}catch(n){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers with orgId:",n)}const i=s.filter((n,o,a)=>o===a.findIndex(c=>c.email===n.email));return this.setCache(t,i),console.log("✅ [UnifiedDataService] Successfully fetched",i.length,"unique users for organization:",e),i}catch(s){return console.error("❌ [UnifiedDataService] Error fetching organization users:",s),s instanceof Error&&(console.error("Error details:",s.message),console.error("Error stack:",s.stack)),[]}}async updateUser(e,t){try{const r={...t,updatedAt:new Date};await g(h(this.db,"users",e),r),this.clearCacheByPattern("current-user"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-context-")}catch(r){throw console.error("Error updating user:",r),r}}safeToDate(e){return e?e instanceof Date?e:typeof e.toDate=="function"?e.toDate():typeof e=="string"?new Date(e):typeof e=="number"?new Date(e):new Date:new Date}async getProjectsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-projects-${e.id}`,r=this.getFromCache(t);if(r)return r;try{const s=m(u(this.db,"projects"),l("organizationId","==",e.organization.id)),n=(await w(s)).docs.map(o=>{const a=o.data();return console.log("🔍 [UnifiedDataService] Processing project data:",{id:o.id,data:a}),{...a,id:o.id,createdAt:this.safeToDate(a.createdAt),updatedAt:this.safeToDate(a.updatedAt),lastAccessedAt:this.safeToDate(a.lastAccessedAt)}});return this.setCache(t,n),n}catch(s){return console.error("Error fetching user projects:",s),[]}}async createProject(e){try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const r={...e,createdAt:new Date,updatedAt:new Date,lastAccessedAt:new Date},s=await P(u(this.db,"projects"),r);return this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("org-projects-"),this.clearCacheByPattern("org-context-"),s.id}catch(t){throw console.error("Error creating project:",t),t}}async updateProject(e,t){try{const r={...t,updatedAt:new Date};await g(h(this.db,"projects",e),r),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(r){throw console.error("Error updating project:",r),r}}async addTeamMemberToProject(e,t,r){try{const s=await E(h(this.db,"users",t));if(!s.exists())throw new Error("User not found");const i=s.data(),n=await this.getCurrentUser(),o={userId:i.id,email:i.email,name:i.name,role:r,assignedAt:new Date,assignedBy:(n==null?void 0:n.email)||"system"};await g(h(this.db,"projects",e),{teamAssignments:F(o),updatedAt:new Date}),await g(h(this.db,"users",t),{"teamMemberData.assignedProjects":F(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(s){throw console.error("Error adding team member to project:",s),s}}async removeTeamMemberFromProject(e,t){try{const r=await E(h(this.db,"projects",e));if(!r.exists())throw new Error("Project not found");const i=r.data().teamAssignments.find(n=>n.userId===t);i&&(await g(h(this.db,"projects",e),{teamAssignments:M(i),updatedAt:new Date}),await g(h(this.db,"users",t),{"teamMemberData.assignedProjects":M(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-"))}catch(r){throw console.error("Error removing team member from project:",r),r}}async getOrganizationContext(){var s,i,n,o,a,c;(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)throw new Error("No authenticated user");const t=`org-context-${e.organization.id}`,r=this.getFromCache(t);if(r)return r;try{const d=await E(h(this.db,"organizations",e.organization.id));if(!d.exists())throw new Error(`Organization ${e.organization.id} not found`);const y=d.data(),p={...y,id:e.organization.id,createdAt:((s=y.createdAt)==null?void 0:s.toDate())||new Date,updatedAt:((i=y.updatedAt)==null?void 0:i.toDate())||new Date},D=m(u(this.db,"subscriptions"),l("organizationId","==",e.organization.id),l("status","==","ACTIVE"),R(1)),b=await w(D);let v=null;if(!b.empty){const f=b.docs[0].data();v={...f,id:b.docs[0].id,createdAt:((n=f.createdAt)==null?void 0:n.toDate())||new Date,updatedAt:((o=f.updatedAt)==null?void 0:o.toDate())||new Date,currentPeriodStart:((a=f.currentPeriodStart)==null?void 0:a.toDate())||new Date,currentPeriodEnd:((c=f.currentPeriodEnd)==null?void 0:c.toDate())||new Date}}let T=[];try{T=await this.getUsersByOrganization(e.organization.id)}catch(f){throw console.error("Failed to get organization members:",f),f}const B={organization:p,subscription:v,members:T};return this.setCache(t,B,10*60*1e3),B}catch(d){throw console.error("Error fetching organization context:",d),d}}async getLicensesForOrganization(){(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)return console.log("🔍 [UnifiedDataService] No user found for license query"),[];console.log("🔍 [UnifiedDataService] Fetching licenses for organization:",e.organization.id);const t=`org-licenses-${e.organization.id}`,r=this.getFromCache(t);if(r)return console.log("📋 [UnifiedDataService] Returning cached licenses:",r.length),r;try{const s=m(u(this.db,"licenses"),l("organizationId","==",e.organization.id),S("createdAt","desc")),i=await w(s);console.log("📊 [UnifiedDataService] Found",i.docs.length,"license documents");const n=i.docs.map(o=>{var c,d,y,p,D,b;const a=o.data();return{id:o.id,key:a.key||"",name:a.name||`License ${o.id}`,tier:a.tier||"BASIC",status:a.status||"PENDING",organization:{id:a.organizationId||"",name:a.organizationName||"Unknown Organization",tier:a.tier||"BASIC"},assignedTo:a.userId?{userId:a.userId,name:a.userName||a.userEmail||"Unknown User",email:a.userEmail||"",assignedAt:((c=a.activatedAt)==null?void 0:c.toDate())||new Date}:void 0,usage:{apiCalls:a.usageCount||0,dataTransfer:0,deviceCount:1,maxDevices:a.tier==="ENTERPRISE"?10:a.tier==="PROFESSIONAL"?5:2},activatedAt:(d=a.activatedAt)==null?void 0:d.toDate(),expiresAt:((y=a.expiresAt)==null?void 0:y.toDate())||new Date,lastUsed:(p=a.lastUsed)==null?void 0:p.toDate(),createdAt:((D=a.createdAt)==null?void 0:D.toDate())||new Date,updatedAt:((b=a.updatedAt)==null?void 0:b.toDate())||new Date}});return console.log("✅ [UnifiedDataService] Processed",n.length,"licenses for organization"),this.setCache(t,n),n}catch(s){return console.error("Error fetching organization licenses:",s),[]}}async createLicense(e){var t,r,s,i,n;try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const a={key:e.key,name:e.name,tier:e.tier,status:e.status,organizationId:e.organization.id,organizationName:e.organization.name,usageCount:((t=e.usage)==null?void 0:t.apiCalls)||0,userId:((r=e.assignedTo)==null?void 0:r.userId)||null,userName:((s=e.assignedTo)==null?void 0:s.name)||null,userEmail:((i=e.assignedTo)==null?void 0:i.email)||null,activatedAt:((n=e.assignedTo)==null?void 0:n.assignedAt)||null,expiresAt:e.expiresAt,lastUsed:null,createdAt:new Date,updatedAt:new Date,organization:e.organization,usage:e.usage};console.log("🎫 [UnifiedDataService] Creating license with Firestore data:",a);const c=await P(u(this.db,"licenses"),a);return this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),console.log("🧹 [UnifiedDataService] Cleared license-related caches"),console.log("✅ [UnifiedDataService] License created with ID:",c.id),setTimeout(()=>{this.forceRefreshLicenses().catch(console.error)},100),c.id}catch(o){throw console.error("❌ [UnifiedDataService] Error creating license:",o),o}}async updateLicense(e,t){try{const r={...t,updatedAt:new Date};await g(h(this.db,"licenses",e),r),this.clearCacheByPattern("org-licenses-")}catch(r){throw console.error("Error updating license:",r),r}}async assignLicense(e,t){try{const r=await E(h(this.db,"users",t));if(!r.exists())throw new Error("User not found");const s=r.data();await g(h(this.db,"licenses",e),{assignedTo:{userId:t,name:s.name||s.email,email:s.email,assignedAt:new Date},status:"ACTIVE",updatedAt:new Date}),this.clearCacheByPattern("org-licenses-")}catch(r){throw console.error("Error assigning license:",r),r}}async unassignLicense(e){try{await g(h(this.db,"licenses",e),{assignedTo:null,updatedAt:new Date}),this.clearCacheByPattern("org-licenses-")}catch(t){throw console.error("Error unassigning license:",t),t}}async getTeamMembersForOrganization(){const e=await this.getCurrentUser();if(!e)return[];const t=`org-team-members-${e.organization.id}`,r=this.getFromCache(t);if(r)return r;try{const s=m(u(this.db,"teamMembers"),l("organizationId","==",e.organization.id),S("createdAt","desc")),n=(await w(s)).docs.map(o=>{var c,d,y,p,D;const a=o.data();return{...a,id:o.id,createdAt:((c=a.createdAt)==null?void 0:c.toDate())||new Date,updatedAt:((d=a.updatedAt)==null?void 0:d.toDate())||new Date,joinedAt:((y=a.joinedAt)==null?void 0:y.toDate())||new Date,lastActive:(p=a.lastActive)==null?void 0:p.toDate(),licenseAssignment:a.licenseAssignment?{...a.licenseAssignment,assignedAt:((D=a.licenseAssignment.assignedAt)==null?void 0:D.toDate())||new Date}:void 0}});return this.setCache(t,n),n}catch(s){return console.error("Error fetching team members:",s),[]}}async inviteTeamMember(e){try{const t=await this.getCurrentUser();if(!t)throw new Error("No authenticated user");console.log("🔥 [UnifiedDataService] Creating Firebase authenticated user for team member...");const r={email:e.email,firstName:e.firstName,lastName:e.lastName,temporaryPassword:e.temporaryPassword||this.generateSecurePassword(),role:e.role,department:e.department,position:e.position,phone:e.phone,organizationId:e.organization.id,organizationName:e.organization.name,invitedBy:t.email,userType:"TEAM_MEMBER",status:"pending"};console.log("📤 [UnifiedDataService] Sending user creation request to backend...");const s={...e,status:"active",invitedBy:t.email,joinedAt:new Date,createdAt:new Date,updatedAt:new Date,avatar:e.avatar||`https://ui-avatars.com/api/?name=${encodeURIComponent(e.firstName+" "+e.lastName)}&background=667eea&color=fff`},i=await P(u(this.db,"team_members"),s);return console.log("✅ [UnifiedDataService] Team member created with ID:",i.id),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),i.id}catch(t){throw console.error("❌ [UnifiedDataService] Error creating team member:",t),t}}generateSecurePassword(){const t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";let r="";for(let s=0;s<12;s++)r+=t.charAt(Math.floor(Math.random()*t.length));return r}async updateTeamMember(e,t){try{const r={...t,updatedAt:new Date};await g(h(this.db,"team_members",e),r),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(r){throw console.error("Error updating team member:",r),r}}async removeTeamMember(e){try{await g(h(this.db,"team_members",e),{status:"removed",updatedAt:new Date}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(t){throw console.error("Error removing team member:",t),t}}async assignLicenseToTeamMember(e,t,r,s){try{await g(h(this.db,"team_members",e),{licenseAssignment:{licenseId:t,licenseKey:r,licenseType:s,assignedAt:new Date},updatedAt:new Date}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-licenses-")}catch(i){throw console.error("Error assigning license to team member:",i),i}}async getDatasetsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-datasets-${e.id}`,r=this.getFromCache(t);if(r)return r;try{const s=m(u(this.db,"datasets"),l("owner.organizationId","==",e.organization.id),l("status","==","ACTIVE"),S("updatedAt","desc")),n=(await w(s)).docs.map(o=>{var c,d;const a=o.data();return{...a,id:o.id,createdAt:((c=a.createdAt)==null?void 0:c.toDate())||new Date,updatedAt:((d=a.updatedAt)==null?void 0:d.toDate())||new Date}});return this.setCache(t,n),n}catch(s){return console.error("Error fetching user datasets:",s),[]}}getFromCache(e){const t=this.cache.get(e);return t?Date.now()>t.timestamp+t.ttl?(this.cache.delete(e),null):t.data:null}setCache(e,t,r=this.CACHE_TTL){this.cache.set(e,{data:t,timestamp:Date.now(),ttl:r})}clearCacheByPattern(e){for(const t of this.cache.keys())t.includes(e)&&this.cache.delete(t)}clearAllCache(){this.cache.clear(),console.log("🧹 [UnifiedDataService] All cache cleared")}async forceRefreshLicenses(){console.log("🔄 [UnifiedDataService] Force refreshing license data..."),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),await this.getLicensesForOrganization(),console.log("✅ [UnifiedDataService] License data force refreshed")}clearUserCache(e){e?(this.clearCacheByPattern("current-user"),this.clearCacheByPattern(`org-users-${e}`),this.clearCacheByPattern("org-context"),this.clearCacheByPattern("org-licenses")):this.clearAllCache()}static getInstance(){return A.instance||(A.instance=new A),A.instance}};C(A,"instance");let z=A;const $=z.getInstance();export{$ as default,$ as unifiedDataService};
