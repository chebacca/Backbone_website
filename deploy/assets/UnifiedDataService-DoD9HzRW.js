const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-BkWn-5Qb.js","assets/index-QtI44IxS.js","assets/mui-Cr9U6iW2.js","assets/vendor-CjD1bmmO.js","assets/stripe-ggaMUove.js","assets/index-CBai7h7s.css","assets/index.esm-DmQE6AXN.js","assets/index.esm-B4qVkIPL.js","assets/index.esm-DeaBpi77.js"])))=>i.map(i=>d[i]);
var $=Object.defineProperty;var L=(P,e,t)=>e in P?$(P,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):P[e]=t;var z=(P,e,t)=>L(P,typeof e!="symbol"?e+"":e,t);import{_ as T}from"./index-QtI44IxS.js";import{getDoc as v,doc as u,query as f,collection as g,where as p,getDocs as w,updateDoc as h,addDoc as C,arrayUnion as R,arrayRemove as I,limit as N,orderBy as j}from"./index.esm-B4qVkIPL.js";import{COLLECTIONS as A,firestoreCollectionManager as B}from"./FirestoreCollectionManager-DPvaEMcv.js";import"./mui-Cr9U6iW2.js";import"./vendor-CjD1bmmO.js";import"./stripe-ggaMUove.js";import"./index.esm-DmQE6AXN.js";import"./firebase-BkWn-5Qb.js";import"./index.esm-DeaBpi77.js";const M=class M{constructor(){z(this,"cache",new Map);z(this,"CACHE_TTL",5*60*1e3);z(this,"db",null);z(this,"auth",null);this.initializeFirebase()}async initializeFirebase(){try{console.log("🔧 [UnifiedDataService] Initializing Firebase...");const{db:e,auth:t}=await T(async()=>{const{db:a,auth:r}=await import("./firebase-BkWn-5Qb.js");return{db:a,auth:r}},__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=e,this.auth=t,console.log("✅ [UnifiedDataService] Firebase initialized successfully")}catch(e){throw console.error("❌ [UnifiedDataService] Failed to initialize Firebase:",e),e}}async waitForAuthReady(){var e;return this.auth||await this.initializeFirebase(),(e=this.auth)!=null&&e.currentUser?!0:new Promise(t=>{const a=setTimeout(()=>{t(!1)},5e3),r=this.auth.onAuthStateChanged(c=>{clearTimeout(a),r(),t(!!c)})})}async getAuthToken(){var e;if(!((e=this.auth)!=null&&e.currentUser))throw new Error("No authenticated user found");try{const t=await this.auth.currentUser.getIdToken();if(!t)throw new Error("Failed to get ID token from Firebase Auth");return t}catch(t){throw console.error("❌ [UnifiedDataService] Error getting auth token:",t),new Error("Failed to get authentication token")}}mapUserDocument(e){var a,r,c;const t=e.data();return{id:e.id,email:t.email||"",name:t.name||t.firstName+" "+t.lastName||"Unknown User",userType:t.userType||"TEAM_MEMBER",role:t.role||"member",organization:{id:t.organizationId||t.orgId||"default-org",name:t.organizationName||"Unknown Organization",tier:t.tier||"BASIC",isOwner:t.isOwner||t.role==="OWNER"||!1},license:{type:t.licenseType||t.tier||"BASIC",status:t.status||"ACTIVE",permissions:t.permissions||[],canCreateProjects:t.tier==="ENTERPRISE"||t.tier==="PROFESSIONAL",canManageTeam:t.role==="admin"||t.role==="owner"||t.role==="OWNER"},teamMemberData:t.userType==="TEAM_MEMBER"?{managedBy:t.managedBy||"",department:t.department||"",assignedProjects:t.assignedProjects||[]}:void 0,status:t.status||"ACTIVE",createdAt:((a=t.createdAt)==null?void 0:a.toDate())||new Date,updatedAt:((r=t.updatedAt)==null?void 0:r.toDate())||new Date,lastLoginAt:(c=t.lastLoginAt)==null?void 0:c.toDate()}}async getCurrentUser(){var r;const e="current-user",t=this.getFromCache(e);if(t)return t;if(!await this.waitForAuthReady())return console.log("🔍 [UnifiedDataService] Firebase Auth not ready after waiting"),null;if(!((r=this.auth)!=null&&r.currentUser))return console.log("🔍 [UnifiedDataService] No Firebase Auth user found after auth ready"),null;try{const c=this.auth.currentUser.email,s=this.auth.currentUser.uid;console.log("🔍 [UnifiedDataService] Looking for user:",c,"UID:",s);let o=await v(u(this.db,"users",s));if(o.exists()){console.log("✅ [UnifiedDataService] Found user in users collection");const i=this.mapUserDocument(o);return this.setCache(e,i),i}try{const i=f(g(this.db,"users"),p("email","==",c)),d=await w(i);if(!d.empty){console.log("✅ [UnifiedDataService] Found user by email in users collection");const n=this.mapUserDocument(d.docs[0]);return this.setCache(e,n),n}}catch(i){console.warn("⚠️ [UnifiedDataService] Error querying users by email:",i)}try{const i=f(g(this.db,"orgMembers"),p("email","==",c)),d=await w(i);if(!d.empty){console.log("✅ [UnifiedDataService] Found user in orgMembers collection");const n=this.mapUserDocument(d.docs[0]);return this.setCache(e,n),n}}catch(i){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers:",i)}return console.log("❌ [UnifiedDataService] User not found in any collection"),null}catch(c){return console.error("❌ [UnifiedDataService] Error fetching current user:",c),null}}async getUsersByOrganization(e){const t=`org-users-${e}`,a=this.getFromCache(t);if(a)return a;try{console.log("🔍 [UnifiedDataService] Fetching users for organization:",e),this.db||await this.initializeFirebase();let r=[];try{console.log("🔍 [UnifiedDataService] Trying users collection...");const s=f(g(this.db,"users"),p("organizationId","==",e)),o=await w(s);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in users collection"),r=r.concat(o.docs.map(i=>this.mapUserDocument(i)))}catch(s){console.warn("⚠️ [UnifiedDataService] Error querying users collection:",s)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers collection...");const s=f(g(this.db,"orgMembers"),p("organizationId","==",e)),o=await w(s);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in orgMembers collection"),r=r.concat(o.docs.map(i=>this.mapUserDocument(i)))}catch(s){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers collection:",s)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers with orgId field...");const s=f(g(this.db,"orgMembers"),p("orgId","==",e)),o=await w(s);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in orgMembers with orgId"),r=r.concat(o.docs.map(i=>this.mapUserDocument(i)))}catch(s){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers with orgId:",s)}const c=r.filter((s,o,i)=>o===i.findIndex(d=>d.email===s.email));return this.setCache(t,c),console.log("✅ [UnifiedDataService] Successfully fetched",c.length,"unique users for organization:",e),c}catch(r){return console.error("❌ [UnifiedDataService] Error fetching organization users:",r),r instanceof Error&&(console.error("Error details:",r.message),console.error("Error stack:",r.stack)),[]}}async updateUser(e,t){try{const a={...t,updatedAt:new Date};await h(u(this.db,"users",e),a),this.clearCacheByPattern("current-user"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-context-")}catch(a){throw console.error("Error updating user:",a),a}}safeToDate(e){return e?e instanceof Date?e:typeof e.toDate=="function"?e.toDate():typeof e=="string"?new Date(e):typeof e=="number"?new Date(e):new Date:new Date}async getProjectsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-projects-${e.id}`,a=this.getFromCache(t);if(a)return a;try{const r=f(g(this.db,"projects"),p("organizationId","==",e.organization.id)),s=(await w(r)).docs.map(o=>{const i=o.data();return console.log("🔍 [UnifiedDataService] Processing project data:",{id:o.id,data:i}),{...i,id:o.id,createdAt:this.safeToDate(i.createdAt),updatedAt:this.safeToDate(i.updatedAt),lastAccessedAt:this.safeToDate(i.lastAccessedAt)}});return this.setCache(t,s),s}catch(r){return console.error("Error fetching user projects:",r),[]}}async createProject(e){try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const a={...e,createdAt:new Date,updatedAt:new Date,lastAccessedAt:new Date},r=await C(g(this.db,"projects"),a);return this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("org-projects-"),this.clearCacheByPattern("org-context-"),r.id}catch(t){throw console.error("Error creating project:",t),t}}async updateProject(e,t){try{const a={...t,updatedAt:new Date};await h(u(this.db,"projects",e),a),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(a){throw console.error("Error updating project:",a),a}}async addTeamMemberToProject(e,t,a){try{const r=await v(u(this.db,"users",t));if(!r.exists())throw new Error("User not found");const c=r.data(),s=await this.getCurrentUser(),o={userId:c.id,email:c.email,name:c.name,role:a,assignedAt:new Date,assignedBy:(s==null?void 0:s.email)||"system"};await h(u(this.db,"projects",e),{teamAssignments:R(o),updatedAt:new Date}),await h(u(this.db,"users",t),{"teamMemberData.assignedProjects":R(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(r){throw console.error("Error adding team member to project:",r),r}}async removeTeamMemberFromProject(e,t){try{const a=await v(u(this.db,"projects",e));if(!a.exists())throw new Error("Project not found");const c=a.data().teamAssignments.find(s=>s.userId===t);c&&(await h(u(this.db,"projects",e),{teamAssignments:I(c),updatedAt:new Date}),await h(u(this.db,"users",t),{"teamMemberData.assignedProjects":I(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-"))}catch(a){throw console.error("Error removing team member from project:",a),a}}async getOrganizationContext(){var r,c,s,o,i,d;(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)throw new Error("No authenticated user");const t=`org-context-${e.organization.id}`,a=this.getFromCache(t);if(a)return a;try{const n=await v(u(this.db,"organizations",e.organization.id));if(!n.exists())throw new Error(`Organization ${e.organization.id} not found`);const l=n.data(),y={...l,id:e.organization.id,createdAt:((r=l.createdAt)==null?void 0:r.toDate())||new Date,updatedAt:((c=l.updatedAt)==null?void 0:c.toDate())||new Date},D=f(g(this.db,"subscriptions"),p("organizationId","==",e.organization.id),p("status","==","ACTIVE"),N(1)),m=await w(D);let U=null;if(!m.empty){const E=m.docs[0].data();U={...E,id:m.docs[0].id,createdAt:((s=E.createdAt)==null?void 0:s.toDate())||new Date,updatedAt:((o=E.updatedAt)==null?void 0:o.toDate())||new Date,currentPeriodStart:((i=E.currentPeriodStart)==null?void 0:i.toDate())||new Date,currentPeriodEnd:((d=E.currentPeriodEnd)==null?void 0:d.toDate())||new Date}}let b=[];try{b=await this.getUsersByOrganization(e.organization.id)}catch(E){throw console.error("Failed to get organization members:",E),E}const S={organization:y,subscription:U,members:b};return this.setCache(t,S,10*60*1e3),S}catch(n){throw console.error("Error fetching organization context:",n),n}}async getLicensesForOrganization(){(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)return console.log("🔍 [UnifiedDataService] No user found for license query"),[];console.log("🔍 [UnifiedDataService] Fetching licenses for organization:",e.organization.id);const t=`org-licenses-${e.organization.id}`,a=this.getFromCache(t);if(a)return console.log("📋 [UnifiedDataService] Returning cached licenses:",a.length),a;try{const r=f(g(this.db,"licenses"),p("organizationId","==",e.organization.id),j("createdAt","desc")),c=await w(r);console.log("📊 [UnifiedDataService] Found",c.docs.length,"license documents");const s=c.docs.map(o=>{var d,n,l,y,D,m;const i=o.data();return{id:o.id,key:i.key||"",name:i.name||`License ${o.id}`,tier:i.tier||"BASIC",status:i.status||"PENDING",organization:{id:i.organizationId||"",name:i.organizationName||"Unknown Organization",tier:i.tier||"BASIC"},assignedTo:i.userId?{userId:i.userId,name:i.userName||i.userEmail||"Unknown User",email:i.userEmail||"",assignedAt:((d=i.activatedAt)==null?void 0:d.toDate())||new Date}:void 0,usage:{apiCalls:i.usageCount||0,dataTransfer:0,deviceCount:1,maxDevices:i.tier==="ENTERPRISE"?10:i.tier==="PROFESSIONAL"?5:2},activatedAt:(n=i.activatedAt)==null?void 0:n.toDate(),expiresAt:((l=i.expiresAt)==null?void 0:l.toDate())||new Date,lastUsed:(y=i.lastUsed)==null?void 0:y.toDate(),createdAt:((D=i.createdAt)==null?void 0:D.toDate())||new Date,updatedAt:((m=i.updatedAt)==null?void 0:m.toDate())||new Date}});return console.log("✅ [UnifiedDataService] Processed",s.length,"licenses for organization"),this.setCache(t,s),s}catch(r){return console.error("Error fetching organization licenses:",r),[]}}async createLicense(e){var t,a,r,c,s;try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const i={key:e.key,name:e.name,tier:e.tier,status:e.status,organizationId:e.organization.id,organizationName:e.organization.name,usageCount:((t=e.usage)==null?void 0:t.apiCalls)||0,userId:((a=e.assignedTo)==null?void 0:a.userId)||null,userName:((r=e.assignedTo)==null?void 0:r.name)||null,userEmail:((c=e.assignedTo)==null?void 0:c.email)||null,activatedAt:((s=e.assignedTo)==null?void 0:s.assignedAt)||null,expiresAt:e.expiresAt,lastUsed:null,createdAt:new Date,updatedAt:new Date,organization:e.organization,usage:e.usage};console.log("🎫 [UnifiedDataService] Creating license with Firestore data:",i);const d=await C(g(this.db,"licenses"),i);return this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),console.log("🧹 [UnifiedDataService] Cleared license-related caches"),console.log("✅ [UnifiedDataService] License created with ID:",d.id),setTimeout(()=>{this.forceRefreshLicenses().catch(console.error)},100),d.id}catch(o){throw console.error("❌ [UnifiedDataService] Error creating license:",o),o}}async updateLicense(e,t){try{const a={...t,updatedAt:new Date};await h(u(this.db,"licenses",e),a),this.clearCacheByPattern("org-licenses-")}catch(a){throw console.error("Error updating license:",a),a}}async assignLicense(e,t){try{console.log("🎫 [UnifiedDataService] Assigning license",e,"to user",t);const a=await v(u(this.db,"users",t));if(!a.exists())throw new Error("User not found");const r=a.data(),c=await v(u(this.db,"licenses",e));if(!c.exists())throw new Error("License not found");const s=c.data();console.log("🔍 [UnifiedDataService] User data:",{id:t,email:r.email,name:r.name}),console.log("🔍 [UnifiedDataService] License data:",{id:e,key:s.key,tier:s.tier}),await h(u(this.db,"licenses",e),{assignedTo:{userId:t,name:r.name||r.firstName+" "+r.lastName||r.email,email:r.email,assignedAt:new Date},status:"ACTIVE",updatedAt:new Date}),await h(u(this.db,"users",t),{licenseAssignment:{licenseId:e,licenseKey:s.key,licenseType:s.tier,assignedAt:new Date},updatedAt:new Date});try{const o=f(g(this.db,A.TEAM_MEMBERS),p("userId","==",t),firestoreLimit(1)),i=await w(o);if(!i.empty){const d=i.docs[0];await h(d.ref,{licenseAssignment:{licenseId:e,licenseKey:s.key,licenseType:s.tier,assignedAt:new Date},updatedAt:new Date}),console.log("✅ [UnifiedDataService] Updated teamMembers collection with license assignment")}}catch(o){console.warn("⚠️ [UnifiedDataService] Failed to update teamMembers collection:",o)}try{const o=f(g(this.db,A.ORG_MEMBERS),p("userId","==",t),firestoreLimit(1)),i=await w(o);if(!i.empty){const d=i.docs[0];await h(d.ref,{licenseAssignment:{licenseId:e,licenseKey:s.key,licenseType:s.tier,assignedAt:new Date},updatedAt:new Date}),console.log("✅ [UnifiedDataService] Updated orgMembers collection with license assignment")}}catch(o){console.warn("⚠️ [UnifiedDataService] Failed to update orgMembers collection:",o)}console.log("✅ [UnifiedDataService] License assignment completed - all collections updated"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(a){throw console.error("❌ [UnifiedDataService] Error assigning license:",a),a}}async unassignLicense(e){var t;try{console.log("🎫 [UnifiedDataService] Unassigning license",e);const a=await v(u(this.db,"licenses",e));if(!a.exists())throw new Error("License not found");const c=(t=a.data().assignedTo)==null?void 0:t.userId;if(await h(u(this.db,"licenses",e),{assignedTo:null,status:"PENDING",updatedAt:new Date}),c&&(await h(u(this.db,"users",c),{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from user record",c)),c)try{const s=f(g(this.db,A.TEAM_MEMBERS),p("userId","==",c),firestoreLimit(1)),o=await w(s);if(!o.empty){const i=o.docs[0];await h(i.ref,{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from teamMembers collection")}}catch(s){console.warn("⚠️ [UnifiedDataService] Failed to update teamMembers collection:",s)}if(c)try{const s=f(g(this.db,A.ORG_MEMBERS),p("userId","==",c),firestoreLimit(1)),o=await w(s);if(!o.empty){const i=o.docs[0];await h(i.ref,{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from orgMembers collection")}}catch(s){console.warn("⚠️ [UnifiedDataService] Failed to update orgMembers collection:",s)}console.log("✅ [UnifiedDataService] License unassignment completed - license returned to org pool"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(a){throw console.error("❌ [UnifiedDataService] Error unassigning license:",a),a}}async getTeamMembersForOrganization(){const e=await this.getCurrentUser();if(!e)return[];const t=`org-team-members-${e.organization.id}`,a=this.getFromCache(t);if(a)return a;try{console.log("🔍 [UnifiedDataService] Fetching users for organization:",e.organization.id);let r,c,s;try{const d=await B.queryDocumentsWithFallback("users",[{field:"organizationId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`✅ [UnifiedDataService] Users query successful using ${d.isLegacy?"legacy":"primary"} collection: ${d.collectionUsed}`),r={docs:d.documents.map(n=>({id:n.id,data:()=>n}))}}catch(d){console.warn("⚠️ [UnifiedDataService] Users collection query failed:",d),r={docs:[]}}try{const d=await B.queryDocumentsWithFallback("teamMembers",[{field:"organizationId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`✅ [UnifiedDataService] TeamMembers query successful using ${d.isLegacy?"legacy":"primary"} collection: ${d.collectionUsed}`),c={docs:d.documents.map(n=>({id:n.id,data:()=>n}))}}catch(d){console.warn("⚠️ [UnifiedDataService] TeamMembers collection query failed:",d),c={docs:[]}}try{const d=await B.queryDocumentsWithFallback("orgMembers",[{field:"orgId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`✅ [UnifiedDataService] OrgMembers query successful using ${d.isLegacy?"legacy":"primary"} collection: ${d.collectionUsed}`),s={docs:d.documents.map(n=>({id:n.id,data:()=>n}))}}catch(d){console.warn("⚠️ [UnifiedDataService] OrgMembers collection query failed:",d),s={docs:[]}}const o=new Map;r.docs.forEach(d=>{var y,D,m,U,b;const n=d.data(),l={...n,id:d.id,createdAt:((y=n.createdAt)==null?void 0:y.toDate())||new Date,updatedAt:((D=n.updatedAt)==null?void 0:D.toDate())||new Date,joinedAt:((m=n.joinedAt)==null?void 0:m.toDate())||new Date,lastActive:(U=n.lastActive)==null?void 0:U.toDate(),licenseAssignment:n.licenseAssignment?{...n.licenseAssignment,assignedAt:((b=n.licenseAssignment.assignedAt)==null?void 0:b.toDate())||new Date}:void 0};o.set(d.id,l)}),c.docs.forEach(d=>{var y,D,m,U,b;const n=d.data(),l=n.userId||d.id;if(o.has(l)){const S=o.get(l);o.set(l,{...S})}else{const S={...n,id:l,createdAt:((y=n.createdAt)==null?void 0:y.toDate())||new Date,updatedAt:((D=n.updatedAt)==null?void 0:D.toDate())||new Date,joinedAt:((m=n.joinedAt)==null?void 0:m.toDate())||new Date,lastActive:(U=n.lastActive)==null?void 0:U.toDate(),licenseAssignment:n.licenseAssignment?{...n.licenseAssignment,assignedAt:((b=n.licenseAssignment.assignedAt)==null?void 0:b.toDate())||new Date}:void 0};o.set(l,S)}}),s&&s.docs.forEach(d=>{var y,D,m,U,b;const n=d.data(),l=n.userId||d.id;if(!o.has(l)){const S={...n,id:l,createdAt:((y=n.createdAt)==null?void 0:y.toDate())||new Date,updatedAt:((D=n.updatedAt)==null?void 0:D.toDate())||new Date,joinedAt:((m=n.joinedAt)==null?void 0:m.toDate())||new Date,lastActive:(U=n.lastActive)==null?void 0:U.toDate(),licenseAssignment:n.licenseAssignment?{...n.licenseAssignment,assignedAt:((b=n.licenseAssignment.assignedAt)==null?void 0:b.toDate())||new Date}:void 0};o.set(l,S)}});const i=Array.from(o.values());return console.log("✅ [UnifiedDataService] Successfully fetched",i.length,"unique users for organization:",e.organization.id),this.setCache(t,i),i}catch(r){return console.error("Error fetching team members:",r),[]}}async inviteTeamMember(e){var t,a;console.log("📧 [UnifiedDataService] Validating email uniqueness for:",e.email);try{const{api:r}=await T(async()=>{const{api:o}=await import("./index-QtI44IxS.js").then(i=>i.f);return{api:o}},__vite__mapDeps([1,2,3,4,5])),s=(await r.post("/team-members/validate-email",{email:e.email,organizationId:e.organization.id})).data;if(!s.canProceed){const o=((t=s.errors)==null?void 0:t.join(", "))||"Email is not valid for this organization";throw console.error("❌ [UnifiedDataService] Email validation failed:",o),new Error(o)}((a=s.warnings)==null?void 0:a.length)>0&&console.warn("⚠️ [UnifiedDataService] Email validation warnings:",s.warnings),console.log("✅ [UnifiedDataService] Email validation passed")}catch(r){throw console.error("❌ [UnifiedDataService] Email validation error:",r),r}try{const r=await this.getCurrentUser();if(!r)throw new Error("No authenticated user");console.log("🔥 [UnifiedDataService] Creating Firebase authenticated user for team member...");const c={email:e.email,firstName:e.firstName,lastName:e.lastName,temporaryPassword:e.temporaryPassword||this.generateSecurePassword(),role:e.role,department:e.department,position:e.position,phone:e.phone,organizationId:e.organization.id,organizationName:e.organization.name,invitedBy:r.email,userType:"TEAM_MEMBER",status:"pending"};console.log("📤 [UnifiedDataService] Sending user creation request to backend...");const s={...e,status:"active",invitedBy:r.email,joinedAt:new Date,createdAt:new Date,updatedAt:new Date,avatar:e.avatar||`https://ui-avatars.com/api/?name=${encodeURIComponent(e.firstName+" "+e.lastName)}&background=667eea&color=fff`},{position:o,phone:i,temporaryPassword:d,...n}=e;console.log("🔍 [UnifiedDataService] Filtered team member data for Firestore:",n),console.log("🔍 [UnifiedDataService] Department field in Firestore data:",n.department),console.log("🔍 [UnifiedDataService] Department field type:",typeof n.department),console.log("📝 [UnifiedDataService] Creating comprehensive team member records for full project coordination..."),console.log("📝 [UnifiedDataService] Creating user record in users collection...");const l=await C(g(this.db,A.USERS),{...n,organizationId:e.organization.id,userType:"TEAM_MEMBER",isTeamMember:!0,firebaseUid:"",isEmailVerified:!1,createdAt:new Date,updatedAt:new Date});console.log("📝 [UnifiedDataService] Creating team member record in teamMembers collection...");const y=await C(g(this.db,A.TEAM_MEMBERS),{...n,userId:l.id,organizationId:e.organization.id,orgId:e.organization.id,position:o||"",phone:i||"",isActive:!0,firebaseUid:"",createdAt:new Date,updatedAt:new Date});console.log("📝 [UnifiedDataService] Creating organization member record in orgMembers collection...");const D=await C(g(this.db,A.ORG_MEMBERS),{organizationId:e.organization.id,orgId:e.organization.id,userId:l.id,email:e.email,name:`${e.firstName} ${e.lastName}`,firstName:e.firstName,lastName:e.lastName,role:e.role||"member",status:e.status||"pending",seatReserved:!0,department:e.department||"",invitedByUserId:r.id||"system",invitedAt:new Date,joinedAt:e.status==="active"?new Date:null,createdAt:new Date,updatedAt:new Date});console.log("📝 [UnifiedDataService] Creating user profile record...");const m=await C(g(this.db,A.USER_PROFILES),{userId:l.id,email:e.email,firstName:e.firstName,lastName:e.lastName,displayName:`${e.firstName} ${e.lastName}`,avatar:e.avatar||`https://ui-avatars.com/api/?name=${encodeURIComponent(e.firstName+" "+e.lastName)}&background=667eea&color=fff`,department:e.department||"",position:o||"",phone:i||"",organizationId:e.organization.id,role:e.role||"member",status:e.status||"pending",bio:"",preferences:{},createdAt:new Date,updatedAt:new Date});return console.log("✅ [UnifiedDataService] Complete team member creation successful:"),console.log("   - User ID:",l.id),console.log("   - Team Member ID:",y.id),console.log("   - Org Member ID:",D.id),console.log("   - User Profile ID:",m.id),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-members-"),this.clearCacheByPattern("user-profiles-"),l.id}catch(r){throw console.error("❌ [UnifiedDataService] Error creating team member:",r),r}}async ensureTeamMemberProjectReadiness(e){const t={success:!0,collectionsCreated:[],collectionsFound:[],errors:[]};try{console.log("🔍 [UnifiedDataService] Checking team member project readiness for userId:",e);const a=await v(u(this.db,A.USERS,e));if(!a.exists())return t.errors.push("User record not found"),t.success=!1,t;const r=a.data();console.log("📋 [UnifiedDataService] Found user data:",r);const c=[{name:"teamMembers",collection:A.TEAM_MEMBERS,createData:()=>({userId:e,email:r.email,firstName:r.firstName,lastName:r.lastName,name:`${r.firstName} ${r.lastName}`,role:r.role||"member",status:r.status||"active",organizationId:r.organizationId,orgId:r.organizationId,department:r.department||"",isActive:!0,firebaseUid:r.firebaseUid||"",createdAt:new Date,updatedAt:new Date})},{name:"orgMembers",collection:A.ORG_MEMBERS,createData:()=>({organizationId:r.organizationId,orgId:r.organizationId,userId:e,email:r.email,name:`${r.firstName} ${r.lastName}`,firstName:r.firstName,lastName:r.lastName,role:r.role||"member",status:r.status||"active",seatReserved:!0,department:r.department||"",invitedByUserId:"system",invitedAt:new Date,joinedAt:new Date,createdAt:new Date,updatedAt:new Date})},{name:"userProfiles",collection:A.USER_PROFILES,createData:()=>({userId:e,email:r.email,firstName:r.firstName,lastName:r.lastName,displayName:`${r.firstName} ${r.lastName}`,avatar:r.avatar||`https://ui-avatars.com/api/?name=${encodeURIComponent(r.firstName+" "+r.lastName)}&background=667eea&color=fff`,department:r.department||"",position:"",phone:"",organizationId:r.organizationId,role:r.role||"member",status:r.status||"active",bio:"",preferences:{},createdAt:new Date,updatedAt:new Date})}];for(const s of c)try{const o=f(g(this.db,s.collection),p("userId","==",e),firestoreLimit(1));if((await w(o)).empty){console.log(`📝 [UnifiedDataService] Creating missing ${s.name} record for user ${e}`);const d=await C(g(this.db,s.collection),s.createData());t.collectionsCreated.push(`${s.name} (${d.id})`),console.log(`✅ [UnifiedDataService] Created ${s.name} record: ${d.id}`)}else t.collectionsFound.push(s.name),console.log(`✅ [UnifiedDataService] Found existing ${s.name} record`)}catch(o){const i=`Failed to check/create ${s.name}: ${o.message}`;t.errors.push(i),console.error(`❌ [UnifiedDataService] ${i}`,o)}return console.log("📊 [UnifiedDataService] Team member project readiness check complete:",t),t}catch(a){return console.error("❌ [UnifiedDataService] Failed to ensure team member project readiness:",a),t.errors.push(`General error: ${a.message}`),t.success=!1,t}}generateSecurePassword(){const t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";let a="";for(let r=0;r<12;r++)a+=t.charAt(Math.floor(Math.random()*t.length));return a}async updateTeamMember(e,t){try{const a={...t,updatedAt:new Date};await h(u(this.db,"users",e),a),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(a){throw console.error("Error updating team member:",a),a}}async changeTeamMemberPassword(e,t){try{console.log("🔐 [UnifiedDataService] Changing password for member:",e);const a=await fetch(`/api/team-members/${e}/reset-password`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${await this.getAuthToken()}`},body:JSON.stringify({newPassword:t})});if(!a.ok){const r=await a.json().catch(()=>({}));throw new Error(r.message||`Failed to change password: ${a.status}`)}console.log("✅ [UnifiedDataService] Password changed successfully")}catch(a){throw console.error("❌ [UnifiedDataService] Error changing password:",a),a}}async removeTeamMember(e,t){try{console.log("👤 [UnifiedDataService] Starting comprehensive team member removal:",e);const a=await v(u(this.db,"users",e));if(!a.exists()&&!(await v(u(this.db,"teamMembers",e))).exists())throw new Error("Team member not found");const r=a.exists()?a.data():null,c=t||(r==null?void 0:r.organizationId);if(!c)throw new Error("Organization ID is required for team member removal");console.log("🔍 [UnifiedDataService] Team member organization:",c);const{api:s}=await T(async()=>{const{api:d}=await import("./index-QtI44IxS.js").then(n=>n.f);return{api:d}},__vite__mapDeps([1,2,3,4,5])),i=(await s.post("/team-members/remove-completely",{teamMemberId:e,organizationId:c})).data;console.log("✅ [UnifiedDataService] Team member removal completed:",{cleanedCollections:i.cleanedCollections,licenseRestored:i.licenseRestored,firebaseUserDeleted:i.firebaseUserDeleted}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-members-"),this.clearCacheByPattern("project-team-members-"),console.log("✅ [UnifiedDataService] Team member completely removed with full cleanup")}catch(a){throw console.error("❌ [UnifiedDataService] Error removing team member:",a),a}}async assignLicenseToTeamMember(e,t,a,r){try{await h(u(this.db,"users",e),{licenseAssignment:{licenseId:t,licenseKey:a,licenseType:r,assignedAt:new Date},updatedAt:new Date}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-licenses-")}catch(c){throw console.error("Error assigning license to team member:",c),c}}async getDatasetsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-datasets-${e.id}`,a=this.getFromCache(t);if(a)return a;try{const r=f(g(this.db,"datasets"),p("owner.organizationId","==",e.organization.id),p("status","==","ACTIVE"),j("updatedAt","desc")),s=(await w(r)).docs.map(o=>{var d,n;const i=o.data();return{...i,id:o.id,createdAt:((d=i.createdAt)==null?void 0:d.toDate())||new Date,updatedAt:((n=i.updatedAt)==null?void 0:n.toDate())||new Date}});return this.setCache(t,s),s}catch(r){return console.error("Error fetching user datasets:",r),[]}}getFromCache(e){const t=this.cache.get(e);return t?Date.now()>t.timestamp+t.ttl?(this.cache.delete(e),null):t.data:null}setCache(e,t,a=this.CACHE_TTL){this.cache.set(e,{data:t,timestamp:Date.now(),ttl:a})}clearCacheByPattern(e){for(const t of this.cache.keys())t.includes(e)&&this.cache.delete(t)}clearAllCache(){this.cache.clear(),console.log("🧹 [UnifiedDataService] All cache cleared")}async forceRefreshLicenses(){console.log("🔄 [UnifiedDataService] Force refreshing license data..."),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),await this.getLicensesForOrganization(),console.log("✅ [UnifiedDataService] License data force refreshed")}clearUserCache(e){e?(this.clearCacheByPattern("current-user"),this.clearCacheByPattern(`org-users-${e}`),this.clearCacheByPattern("org-context"),this.clearCacheByPattern("org-licenses")):this.clearAllCache()}async getCollectionName(e){const t=A[e];try{const a=f(g(this.db,t),N(1));return await w(a),console.log(`✅ [UnifiedDataService] Using primary collection: ${t}`),t}catch{const r=`${e}_LEGACY`;if(A[r]){const c=A[r];try{const s=f(g(this.db,c),N(1));return await w(s),console.log(`⚠️ [UnifiedDataService] Falling back to legacy collection: ${c}`),c}catch{console.warn(`⚠️ [UnifiedDataService] Both primary and legacy collections failed for ${e}`)}}return console.warn(`⚠️ [UnifiedDataService] Using primary collection name despite access issues: ${t}`),t}}static getInstance(){return M.instance||(M.instance=new M),M.instance}};z(M,"instance");let F=M;const H=F.getInstance();export{H as default,H as unifiedDataService};
