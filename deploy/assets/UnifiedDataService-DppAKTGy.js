const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/firebase-BNqY_32N.js","assets/index-DRS7h1sG.js","assets/mui-BO-fjSjW.js","assets/vendor-CjD1bmmO.js","assets/stripe-BghXmgwV.js","assets/index-CBai7h7s.css","assets/index.esm-BANGvNYi.js","assets/index.esm-DjGGEXS3.js","assets/index.esm-CiRfLMBX.js"])))=>i.map(i=>d[i]);
var O=Object.defineProperty;var x=(F,e,t)=>e in F?O(F,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):F[e]=t;var B=(F,e,t)=>x(F,typeof e!="symbol"?e+"":e,t);import{_ as L}from"./index-DRS7h1sG.js";import{getDoc as z,doc as h,query as A,collection as D,where as b,getDocs as v,updateDoc as S,addDoc as I,setDoc as q,arrayUnion as $,arrayRemove as k,limit as T,orderBy as N}from"./index.esm-DjGGEXS3.js";import{COLLECTIONS as P,firestoreCollectionManager as j}from"./FirestoreCollectionManager-BwqnDQrJ.js";import"./mui-BO-fjSjW.js";import"./vendor-CjD1bmmO.js";import"./stripe-BghXmgwV.js";import"./index.esm-BANGvNYi.js";import"./firebase-BNqY_32N.js";import"./index.esm-CiRfLMBX.js";const M=class M{constructor(){B(this,"cache",new Map);B(this,"CACHE_TTL",5*60*1e3);B(this,"db",null);B(this,"auth",null);this.initializeFirebase()}getApiBaseUrl(){return console.log("[UnifiedDataService] PRODUCTION MODE: Using Cloud Run API endpoint"),"https://api-oup5qxogca-uc.a.run.app/api"}async initializeFirebase(){try{console.log("🔧 [UnifiedDataService] Initializing Firebase...");const{db:e,auth:t}=await L(async()=>{const{db:i,auth:a}=await import("./firebase-BNqY_32N.js");return{db:i,auth:a}},__vite__mapDeps([0,1,2,3,4,5,6,7,8]));this.db=e,this.auth=t,console.log("✅ [UnifiedDataService] Firebase initialized successfully")}catch(e){throw console.error("❌ [UnifiedDataService] Failed to initialize Firebase:",e),e}}async waitForAuthReady(){var e;return this.auth||await this.initializeFirebase(),(e=this.auth)!=null&&e.currentUser?!0:new Promise(t=>{const i=setTimeout(()=>{t(!1)},5e3),a=this.auth.onAuthStateChanged(c=>{clearTimeout(i),a(),t(!!c)})})}async getAuthToken(){var e;if(!((e=this.auth)!=null&&e.currentUser))throw new Error("No authenticated user found");try{const t=await this.auth.currentUser.getIdToken();if(!t)throw new Error("Failed to get ID token from Firebase Auth");return t}catch(t){throw console.error("❌ [UnifiedDataService] Error getting auth token:",t),new Error("Failed to get authentication token")}}mapUserDocument(e){var i,a,c;const t=e.data();return{id:e.id,email:t.email||"",name:t.name||t.firstName+" "+t.lastName||"Unknown User",userType:t.userType||"TEAM_MEMBER",role:t.role||"member",organization:{id:t.organizationId||t.orgId||"default-org",name:t.organizationName||"Unknown Organization",tier:t.tier||"BASIC",isOwner:t.isOwner||t.role==="OWNER"||!1},license:{type:t.licenseType||t.tier||"BASIC",status:t.status||"ACTIVE",permissions:t.permissions||[],canCreateProjects:t.tier==="ENTERPRISE"||t.tier==="PROFESSIONAL",canManageTeam:t.role==="admin"||t.role==="owner"||t.role==="OWNER"},teamMemberData:t.userType==="TEAM_MEMBER"?{managedBy:t.managedBy||"",department:t.department||"",assignedProjects:t.assignedProjects||[]}:void 0,status:t.status||"ACTIVE",createdAt:((i=t.createdAt)==null?void 0:i.toDate())||new Date,updatedAt:((a=t.updatedAt)==null?void 0:a.toDate())||new Date,lastLoginAt:(c=t.lastLoginAt)==null?void 0:c.toDate()}}async getCurrentUser(){var a;const e="current-user",t=this.getFromCache(e);if(t)return t;if(!await this.waitForAuthReady())return console.log("🔍 [UnifiedDataService] Firebase Auth not ready after waiting"),null;if(!((a=this.auth)!=null&&a.currentUser))return console.log("🔍 [UnifiedDataService] No Firebase Auth user found after auth ready"),null;try{const c=this.auth.currentUser.email,s=this.auth.currentUser.uid;console.log("🔍 [UnifiedDataService] Looking for user:",c,"UID:",s);let o=await z(h(this.db,"users",s));if(o.exists()){console.log("✅ [UnifiedDataService] Found user in users collection");const r=this.mapUserDocument(o);return this.setCache(e,r),r}try{const r=A(D(this.db,"users"),b("email","==",c)),d=await v(r);if(!d.empty){console.log("✅ [UnifiedDataService] Found user by email in users collection");const m=this.mapUserDocument(d.docs[0]);return this.setCache(e,m),m}}catch(r){console.warn("⚠️ [UnifiedDataService] Error querying users by email:",r)}try{const r=A(D(this.db,"orgMembers"),b("email","==",c)),d=await v(r);if(!d.empty){console.log("✅ [UnifiedDataService] Found user in orgMembers collection");const m=this.mapUserDocument(d.docs[0]);return this.setCache(e,m),m}}catch(r){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers:",r)}return console.log("❌ [UnifiedDataService] User not found in any collection"),null}catch(c){return console.error("❌ [UnifiedDataService] Error fetching current user:",c),null}}async getUsersByOrganization(e){const t=`org-users-${e}`,i=this.getFromCache(t);if(i)return i;try{console.log("🔍 [UnifiedDataService] Fetching users for organization:",e),this.db||await this.initializeFirebase();let a=[];try{console.log("🔍 [UnifiedDataService] Trying users collection...");const s=A(D(this.db,"users"),b("organizationId","==",e)),o=await v(s);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in users collection"),a=a.concat(o.docs.map(r=>this.mapUserDocument(r)))}catch(s){console.warn("⚠️ [UnifiedDataService] Error querying users collection:",s)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers collection...");const s=A(D(this.db,"orgMembers"),b("organizationId","==",e)),o=await v(s);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in orgMembers collection"),a=a.concat(o.docs.map(r=>this.mapUserDocument(r)))}catch(s){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers collection:",s)}try{console.log("🔍 [UnifiedDataService] Trying orgMembers with orgId field...");const s=A(D(this.db,"orgMembers"),b("orgId","==",e)),o=await v(s);console.log("📊 [UnifiedDataService] Found",o.docs.length,"users in orgMembers with orgId"),a=a.concat(o.docs.map(r=>this.mapUserDocument(r)))}catch(s){console.warn("⚠️ [UnifiedDataService] Error querying orgMembers with orgId:",s)}const c=a.filter((s,o,r)=>o===r.findIndex(d=>d.email===s.email));return this.setCache(t,c),console.log("✅ [UnifiedDataService] Successfully fetched",c.length,"unique users for organization:",e),c}catch(a){return console.error("❌ [UnifiedDataService] Error fetching organization users:",a),a instanceof Error&&(console.error("Error details:",a.message),console.error("Error stack:",a.stack)),[]}}async updateUser(e,t){try{const i={...t,updatedAt:new Date};await S(h(this.db,"users",e),i),this.clearCacheByPattern("current-user"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-context-")}catch(i){throw console.error("Error updating user:",i),i}}safeToDate(e){return e?e instanceof Date?e:typeof e.toDate=="function"?e.toDate():typeof e=="string"?new Date(e):typeof e=="number"?new Date(e):new Date:new Date}async getProjectsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-projects-${e.id}`,i=this.getFromCache(t);if(i)return i;try{const a=A(D(this.db,"projects"),b("organizationId","==",e.organization.id)),s=(await v(a)).docs.map(o=>{const r=o.data();return console.log("🔍 [UnifiedDataService] Processing project data:",{id:o.id,data:r}),{...r,id:o.id,createdAt:this.safeToDate(r.createdAt),updatedAt:this.safeToDate(r.updatedAt),lastAccessedAt:this.safeToDate(r.lastAccessedAt)}});return this.setCache(t,s),s}catch(a){return console.error("Error fetching user projects:",a),[]}}async createProject(e){try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const i={...e,createdAt:new Date,updatedAt:new Date,lastAccessedAt:new Date},a=await I(D(this.db,"projects"),i);return this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("org-projects-"),this.clearCacheByPattern("org-context-"),a.id}catch(t){throw console.error("Error creating project:",t),t}}async updateProject(e,t){try{const i={...t,updatedAt:new Date};await S(h(this.db,"projects",e),i),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(i){throw console.error("Error updating project:",i),i}}async addTeamMemberToProject(e,t,i){try{const a=await z(h(this.db,"users",t));if(!a.exists())throw new Error("User not found");const c=a.data(),s=await this.getCurrentUser(),o={userId:c.id||"",email:c.email||"",name:c.name||"Unknown User",role:i||"MEMBER",assignedAt:new Date,assignedBy:(s==null?void 0:s.email)||"system"},r=Object.fromEntries(Object.entries(o).filter(([f,p])=>p!=null));console.log("🔍 [UnifiedDataService] Team assignment data:",{original:o,validated:r,projectId:e,userId:t});const d=await z(h(this.db,"projects",e));if(!d.exists())throw new Error("Project not found");const m=d.data(),g=m.teamAssignments||[];console.log("🔍 [UnifiedDataService] Project data:",{projectId:e,hasTeamAssignments:!!m.teamAssignments,existingCount:g.length}),await q(h(this.db,"projects",e),{teamAssignments:$(r),updatedAt:new Date},{merge:!0}),await S(h(this.db,"users",t),{"teamMemberData.assignedProjects":$(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-")}catch(a){throw console.error("Error adding team member to project:",a),a}}async removeTeamMemberFromProject(e,t){try{const i=await z(h(this.db,"projects",e));if(!i.exists())throw new Error("Project not found");const c=i.data().teamAssignments.find(s=>s.userId===t);c&&(await S(h(this.db,"projects",e),{teamAssignments:k(c),updatedAt:new Date}),await S(h(this.db,"users",t),{"teamMemberData.assignedProjects":k(e),updatedAt:new Date}),this.clearCacheByPattern("user-projects-"),this.clearCacheByPattern("project-"))}catch(i){throw console.error("Error removing team member from project:",i),i}}async getOrganizationContext(){var a,c,s,o,r,d;(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)throw new Error("No authenticated user");const t=`org-context-${e.organization.id}`,i=this.getFromCache(t);if(i)return i;try{const m=await z(h(this.db,"organizations",e.organization.id));if(!m.exists())throw new Error(`Organization ${e.organization.id} not found`);const g=m.data(),f={...g,id:e.organization.id,createdAt:((a=g.createdAt)==null?void 0:a.toDate())||new Date,updatedAt:((c=g.updatedAt)==null?void 0:c.toDate())||new Date},p=A(D(this.db,"subscriptions"),b("organizationId","==",e.organization.id),b("status","==","ACTIVE"),T(1)),U=await v(p);let u=null;if(!U.empty){const w=U.docs[0].data();u={...w,id:U.docs[0].id,createdAt:((s=w.createdAt)==null?void 0:s.toDate())||new Date,updatedAt:((o=w.updatedAt)==null?void 0:o.toDate())||new Date,currentPeriodStart:((r=w.currentPeriodStart)==null?void 0:r.toDate())||new Date,currentPeriodEnd:((d=w.currentPeriodEnd)==null?void 0:d.toDate())||new Date}}let C=[];try{C=await this.getUsersByOrganization(e.organization.id)}catch(w){throw console.error("Failed to get organization members:",w),w}const l={organization:f,subscription:u,members:C};return this.setCache(t,l,10*60*1e3),l}catch(m){throw console.error("Error fetching organization context:",m),m}}async getLicensesForOrganization(){(!this.auth||!this.db)&&await this.initializeFirebase();const e=await this.getCurrentUser();if(!e)return console.log("🔍 [UnifiedDataService] No user found for license query"),[];console.log("🔍 [UnifiedDataService] Fetching licenses for organization:",e.organization.id);const t=`org-licenses-${e.organization.id}`,i=this.getFromCache(t);if(i)return console.log("📋 [UnifiedDataService] Returning cached licenses:",i.length),i;try{const a=A(D(this.db,"licenses"),b("organizationId","==",e.organization.id),N("createdAt","desc")),c=await v(a);console.log("📊 [UnifiedDataService] Found",c.docs.length,"license documents");const s=c.docs.map(o=>{var d,m,g,f,p,U,u,C;const r=o.data();return{id:o.id,key:r.key||"",name:r.name||`License ${o.id}`,tier:r.tier||"BASIC",status:r.status||"PENDING",organization:r.organization?{id:r.organization.id,name:r.organization.name,tier:r.organization.tier}:{id:r.organizationId||"",name:r.organizationName||"Unknown Organization",tier:r.tier||"BASIC"},assignedTo:r.assignedTo?{userId:r.assignedTo.userId,name:r.assignedTo.name||r.assignedToName||"Unknown User",email:r.assignedTo.email||r.assignedToEmail||"",assignedAt:((d=r.assignedTo.assignedAt)==null?void 0:d.toDate())||((m=r.activatedAt)==null?void 0:m.toDate())||new Date}:r.assignedToUserId?{userId:r.assignedToUserId,name:r.assignedToName||r.assignedToEmail||"Unknown User",email:r.assignedToEmail||"",assignedAt:((g=r.activatedAt)==null?void 0:g.toDate())||new Date}:void 0,usage:r.usage?{apiCalls:r.usage.apiCalls||0,dataTransfer:r.usage.dataTransfer||0,deviceCount:r.usage.deviceCount||1,maxDevices:r.usage.maxDevices||(r.tier==="ENTERPRISE"?10:r.tier==="PROFESSIONAL"?5:2)}:{apiCalls:r.usageCount||0,dataTransfer:0,deviceCount:1,maxDevices:r.tier==="ENTERPRISE"?10:r.tier==="PROFESSIONAL"?5:2},activatedAt:(f=r.activatedAt)==null?void 0:f.toDate(),expiresAt:((p=r.expiresAt)==null?void 0:p.toDate())||new Date,lastUsed:(U=r.lastUsed)==null?void 0:U.toDate(),createdAt:((u=r.createdAt)==null?void 0:u.toDate())||new Date,updatedAt:((C=r.updatedAt)==null?void 0:C.toDate())||new Date}});return console.log("✅ [UnifiedDataService] Processed",s.length,"licenses for organization"),this.setCache(t,s),s}catch(a){return console.error("Error fetching organization licenses:",a),[]}}async createLicense(e){var t,i,a,c,s;try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const r={key:e.key,name:e.name,tier:e.tier,status:e.status,organizationId:e.organization.id,organizationName:e.organization.name,usageCount:((t=e.usage)==null?void 0:t.apiCalls)||0,userId:((i=e.assignedTo)==null?void 0:i.userId)||null,userName:((a=e.assignedTo)==null?void 0:a.name)||null,userEmail:((c=e.assignedTo)==null?void 0:c.email)||null,activatedAt:((s=e.assignedTo)==null?void 0:s.assignedAt)||null,expiresAt:e.expiresAt,lastUsed:null,createdAt:new Date,updatedAt:new Date,organization:e.organization,usage:e.usage};console.log("🎫 [UnifiedDataService] Creating license with Firestore data:",r);const d=await I(D(this.db,"licenses"),r);return this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),console.log("🧹 [UnifiedDataService] Cleared license-related caches"),console.log("✅ [UnifiedDataService] License created with ID:",d.id),setTimeout(()=>{this.forceRefreshLicenses().catch(console.error)},100),d.id}catch(o){throw console.error("❌ [UnifiedDataService] Error creating license:",o),o}}async updateLicense(e,t){try{const i={...t,updatedAt:new Date};await S(h(this.db,"licenses",e),i),this.clearCacheByPattern("org-licenses-")}catch(i){throw console.error("Error updating license:",i),i}}async assignLicense(e,t){try{console.log("🎫 [UnifiedDataService] Assigning license",e,"to user",t);const i=await z(h(this.db,"users",t));if(!i.exists())throw new Error("User not found");const a=i.data(),c=await z(h(this.db,"licenses",e));if(!c.exists())throw new Error("License not found");const s=c.data();console.log("🔍 [UnifiedDataService] User data:",{id:t,email:a.email,name:a.name}),console.log("🔍 [UnifiedDataService] License data:",{id:e,key:s.key,tier:s.tier}),await S(h(this.db,"licenses",e),{assignedTo:{userId:t,name:a.name||a.firstName+" "+a.lastName||a.email,email:a.email,assignedAt:new Date},status:"ACTIVE",updatedAt:new Date}),await S(h(this.db,"users",t),{licenseAssignment:{licenseId:e,licenseKey:s.key,licenseType:s.tier,assignedAt:new Date},updatedAt:new Date});try{const o=A(D(this.db,P.TEAM_MEMBERS),b("userId","==",t),T(1)),r=await v(o);if(!r.empty){const d=r.docs[0];await S(d.ref,{licenseAssignment:{licenseId:e,licenseKey:s.key,licenseType:s.tier,assignedAt:new Date},updatedAt:new Date}),console.log("✅ [UnifiedDataService] Updated teamMembers collection with license assignment")}}catch(o){console.warn("⚠️ [UnifiedDataService] Failed to update teamMembers collection:",o)}try{const o=A(D(this.db,P.ORG_MEMBERS),b("userId","==",t),T(1)),r=await v(o);if(!r.empty){const d=r.docs[0];await S(d.ref,{licenseAssignment:{licenseId:e,licenseKey:s.key,licenseType:s.tier,assignedAt:new Date},updatedAt:new Date}),console.log("✅ [UnifiedDataService] Updated orgMembers collection with license assignment")}}catch(o){console.warn("⚠️ [UnifiedDataService] Failed to update orgMembers collection:",o)}console.log("✅ [UnifiedDataService] License assignment completed - all collections updated"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(i){throw console.error("❌ [UnifiedDataService] Error assigning license:",i),i}}async unassignLicense(e){var t;try{console.log("🎫 [UnifiedDataService] Unassigning license",e);const i=await z(h(this.db,"licenses",e));if(!i.exists())throw new Error("License not found");const c=(t=i.data().assignedTo)==null?void 0:t.userId;if(await S(h(this.db,"licenses",e),{assignedTo:null,status:"PENDING",updatedAt:new Date}),c&&(await S(h(this.db,"users",c),{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from user record",c)),c)try{const s=A(D(this.db,P.TEAM_MEMBERS),b("userId","==",c),T(1)),o=await v(s);if(!o.empty){const r=o.docs[0];await S(r.ref,{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from teamMembers collection")}}catch(s){console.warn("⚠️ [UnifiedDataService] Failed to update teamMembers collection:",s)}if(c)try{const s=A(D(this.db,P.ORG_MEMBERS),b("userId","==",c),T(1)),o=await v(s);if(!o.empty){const r=o.docs[0];await S(r.ref,{licenseAssignment:null,updatedAt:new Date}),console.log("✅ [UnifiedDataService] Removed license assignment from orgMembers collection")}}catch(s){console.warn("⚠️ [UnifiedDataService] Failed to update orgMembers collection:",s)}console.log("✅ [UnifiedDataService] License unassignment completed - license returned to org pool"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(i){throw console.error("❌ [UnifiedDataService] Error unassigning license:",i),i}}async getTeamMembersForOrganization(){var a,c,s,o,r,d,m,g,f,p,U;const e=await this.getCurrentUser();if(!e)return[];const t=`org-team-members-${e.organization.id}`,i=this.getFromCache(t);if(i)return i;try{console.log("🔍 [UnifiedDataService] Fetching team members for organization:",e.organization.id);const u=new Map;console.log("🔍 [UnifiedDataService] Trying users collection...");try{const l=await j.queryDocumentsWithFallback("users",[{field:"organizationId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${l.documents.length} users in users collection`);for(const w of l.documents){const n=w;if(n.id===e.id)continue;const y={id:n.id,firstName:n.firstName||((a=n.name)==null?void 0:a.split(" ")[0])||((c=n.email)==null?void 0:c.split("@")[0])||"Unknown",lastName:n.lastName||((s=n.name)==null?void 0:s.split(" ")[1])||"",email:n.email,role:n.role||"member",status:n.status==="active"?"active":"pending",organization:{id:n.organizationId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:n.licenseAssignment?{licenseId:n.licenseAssignment.licenseId,licenseKey:n.licenseAssignment.licenseKey,licenseType:n.licenseAssignment.licenseType,assignedAt:n.licenseAssignment.assignedAt}:void 0,department:n.department||"General",assignedProjects:n.assignedProjects||[],avatar:n.avatar,joinedAt:n.createdAt||new Date,lastActive:n.lastActive,invitedBy:n.invitedBy||e.id,createdAt:n.createdAt||new Date,updatedAt:n.updatedAt||new Date};n.email&&u.set(n.email,y)}}catch(l){console.warn("⚠️ [UnifiedDataService] Users collection query failed:",l)}console.log("🔍 [UnifiedDataService] Trying teamMembers collection...");try{const l=await j.queryDocumentsWithFallback("teamMembers",[{field:"organizationId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${l.documents.length} team members in teamMembers collection`);for(const w of l.documents){const n=w;if(n.status==="removed"||n.status==="suspended")continue;const y={id:n.id,firstName:n.firstName||((o=n.name)==null?void 0:o.split(" ")[0])||((r=n.email)==null?void 0:r.split("@")[0])||"Unknown",lastName:n.lastName||((d=n.name)==null?void 0:d.split(" ")[1])||"",email:n.email,role:n.role||"member",status:n.status||"active",organization:{id:n.organizationId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:n.licenseAssignment?{licenseId:n.licenseAssignment.licenseId,licenseKey:n.licenseAssignment.licenseKey,licenseType:n.licenseAssignment.licenseType,assignedAt:n.licenseAssignment.assignedAt}:void 0,department:n.department||"General",assignedProjects:n.assignedProjects||[],avatar:n.avatar,joinedAt:n.joinedAt||n.createdAt||new Date,lastActive:n.lastActive,invitedBy:n.invitedBy||e.id,createdAt:n.createdAt||new Date,updatedAt:n.updatedAt||new Date};if(n.email){const E=u.get(n.email);E?(E.role=n.role||E.role,E.status=n.status||E.status,E.department=n.department||E.department,E.licenseAssignment=n.licenseAssignment||E.licenseAssignment,u.set(n.email,E)):u.set(n.email,y)}}}catch(l){console.warn("⚠️ [UnifiedDataService] TeamMembers collection query failed:",l)}console.log("🔍 [UnifiedDataService] Trying orgMembers collection...");try{const l=await j.queryDocumentsWithFallback("orgMembers",[{field:"orgId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${l.documents.length} org members in orgMembers collection`);for(const w of l.documents){const n=w;if(n.status==="removed"||n.status==="suspended")continue;const y=u.get(n.email);if(y)y.role=n.role||y.role,y.status=n.status||y.status,y.department=n.department||y.department,y.joinedAt=n.joinedAt||y.joinedAt,u.set(n.email,y);else{const E={id:n.userId,firstName:n.firstName||((m=n.name)==null?void 0:m.split(" ")[0])||((g=n.email)==null?void 0:g.split("@")[0])||"Unknown",lastName:n.lastName||((f=n.name)==null?void 0:f.split(" ")[1])||"",email:n.email||n.userEmail||"",role:n.role||"member",status:n.status||"active",organization:{id:n.orgId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:void 0,department:n.department||"General",assignedProjects:[],avatar:n.avatar,joinedAt:n.joinedAt||n.createdAt||new Date,lastActive:n.lastActive,invitedBy:n.invitedBy||e.id,createdAt:n.createdAt||new Date,updatedAt:n.updatedAt||new Date};u.set(n.email||n.userEmail||"",E)}}}catch(l){console.warn("⚠️ [UnifiedDataService] OrgMembers collection query failed:",l)}console.log("🔍 [UnifiedDataService] Trying org_members collection...");try{const l=await j.queryDocumentsWithFallback("org_members",[{field:"orgId",operator:"==",value:e.organization.id}],"createdAt","desc");console.log(`📊 [UnifiedDataService] Found ${l.documents.length} org members in org_members collection`);for(const w of l.documents){const n=w;if(n.status==="removed"||n.status==="suspended")continue;const y=n.email||n.userEmail||"";if(y&&!u.has(y)){const E={id:n.userId,firstName:n.firstName||((p=n.name)==null?void 0:p.split(" ")[0])||y.split("@")[0]||"Unknown",lastName:n.lastName||((U=n.name)==null?void 0:U.split(" ")[1])||"",email:y,role:n.role||"member",status:n.status||"active",organization:{id:n.orgId||e.organization.id,name:e.organization.name,tier:e.organization.tier},licenseAssignment:void 0,department:n.department||"General",assignedProjects:[],avatar:n.avatar,joinedAt:n.joinedAt||n.createdAt||new Date,lastActive:n.lastActive,invitedBy:n.invitedBy||e.id,createdAt:n.createdAt||new Date,updatedAt:n.updatedAt||new Date};u.set(y,E)}}}catch(l){console.warn("⚠️ [UnifiedDataService] org_members collection query failed:",l)}const C=Array.from(u.values());return console.log(`✅ [UnifiedDataService] Successfully fetched ${C.length} unique team members for organization: ${e.organization.id}`),this.setCache(t,C),C}catch(u){return console.error("❌ [UnifiedDataService] Failed to fetch team members:",u),[]}}async inviteTeamMember(e){var t;console.log("🚀 [UnifiedDataService] Creating team member via backend API:",e.email);try{if(!await this.getCurrentUser())throw new Error("No authenticated user");const a={email:e.email,firstName:e.firstName,lastName:e.lastName,department:e.department||"",licenseType:"PROFESSIONAL",organizationId:e.organization.id,sendWelcomeEmail:!0,temporaryPassword:e.temporaryPassword||this.generateSecurePassword()};console.log("📤 [UnifiedDataService] Sending team member creation request to backend API...");const c=await((t=this.auth.currentUser)==null?void 0:t.getIdToken()),o=await(await fetch(`${this.getApiBaseUrl()}/team-members/create`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${c}`},body:JSON.stringify(a)})).json();if(!o.success)throw new Error(o.error||"Failed to create team member");const r=o.data.teamMember;return console.log("✅ [UnifiedDataService] Team member created successfully via backend API:",r.id),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-members-"),this.clearCacheByPattern("user-profiles-"),r.id}catch(i){throw console.error("❌ [UnifiedDataService] Error creating team member via backend API:",i),i}}async ensureTeamMemberProjectReadiness(e){const t={success:!0,collectionsCreated:[],collectionsFound:[],errors:[]};try{console.log("🔍 [UnifiedDataService] Checking team member project readiness for userId:",e);const i=await z(h(this.db,P.USERS,e));if(!i.exists())return t.errors.push("User record not found"),t.success=!1,t;const a=i.data();console.log("📋 [UnifiedDataService] Found user data:",a);const c=[{name:"teamMembers",collection:P.TEAM_MEMBERS,createData:()=>({userId:e,email:a.email,firstName:a.firstName,lastName:a.lastName,name:`${a.firstName} ${a.lastName}`,role:a.role||"member",status:a.status||"active",organizationId:a.organizationId,orgId:a.organizationId,department:a.department||"",isActive:!0,firebaseUid:a.firebaseUid||"",createdAt:new Date,updatedAt:new Date})},{name:"orgMembers",collection:P.ORG_MEMBERS,createData:()=>({organizationId:a.organizationId,orgId:a.organizationId,userId:e,email:a.email,name:`${a.firstName} ${a.lastName}`,firstName:a.firstName,lastName:a.lastName,role:a.role||"member",status:a.status||"active",seatReserved:!0,department:a.department||"",invitedByUserId:"system",invitedAt:new Date,joinedAt:new Date,createdAt:new Date,updatedAt:new Date})},{name:"userProfiles",collection:P.USER_PROFILES,createData:()=>({userId:e,email:a.email,firstName:a.firstName,lastName:a.lastName,displayName:`${a.firstName} ${a.lastName}`,avatar:a.avatar||`https://ui-avatars.com/api/?name=${encodeURIComponent(a.firstName+" "+a.lastName)}&background=667eea&color=fff`,department:a.department||"",position:"",phone:"",organizationId:a.organizationId,role:a.role||"member",status:a.status||"active",bio:"",preferences:{},createdAt:new Date,updatedAt:new Date})}];for(const s of c)try{const o=A(D(this.db,s.collection),b("userId","==",e),T(1));if((await v(o)).empty){console.log(`📝 [UnifiedDataService] Creating missing ${s.name} record for user ${e}`);const d=await I(D(this.db,s.collection),s.createData());t.collectionsCreated.push(`${s.name} (${d.id})`),console.log(`✅ [UnifiedDataService] Created ${s.name} record: ${d.id}`)}else t.collectionsFound.push(s.name),console.log(`✅ [UnifiedDataService] Found existing ${s.name} record`)}catch(o){const r=`Failed to check/create ${s.name}: ${o.message}`;t.errors.push(r),console.error(`❌ [UnifiedDataService] ${r}`,o)}return console.log("📊 [UnifiedDataService] Team member project readiness check complete:",t),t}catch(i){return console.error("❌ [UnifiedDataService] Failed to ensure team member project readiness:",i),t.errors.push(`General error: ${i.message}`),t.success=!1,t}}generateSecurePassword(){const t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";let i="";for(let a=0;a<12;a++)i+=t.charAt(Math.floor(Math.random()*t.length));return i}async updateTeamMember(e,t){try{const i={...t,updatedAt:new Date};await S(h(this.db,"users",e),i),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-")}catch(i){throw console.error("Error updating team member:",i),i}}async changeTeamMemberPassword(e,t){try{console.log("🔐 [UnifiedDataService] Changing password for member:",e);const i=await fetch(`/api/team-members/${e}/reset-password`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${await this.getAuthToken()}`},body:JSON.stringify({newPassword:t})});if(!i.ok){const a=await i.json().catch(()=>({}));throw new Error(a.message||`Failed to change password: ${i.status}`)}console.log("✅ [UnifiedDataService] Password changed successfully")}catch(i){throw console.error("❌ [UnifiedDataService] Error changing password:",i),i}}async removeTeamMember(e,t){try{console.log("👤 [UnifiedDataService] Starting comprehensive team member removal:",e);const i=await z(h(this.db,"users",e));if(!i.exists()&&!(await z(h(this.db,"teamMembers",e))).exists())throw new Error("Team member not found");const a=i.exists()?i.data():null,c=t||(a==null?void 0:a.organizationId);if(!c)throw new Error("Organization ID is required for team member removal");console.log("🔍 [UnifiedDataService] Team member organization:",c);const s=await this.getAuthToken(),o=await fetch(`${window.location.origin}/api/team-members/remove-completely`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${s}`},body:JSON.stringify({teamMemberId:e,organizationId:c})});if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);const r=await o.json();console.log("✅ [UnifiedDataService] Team member removal completed:",{cleanedCollections:r.cleanedCollections,licenseRestored:r.licenseRestored,firebaseUserDeleted:r.firebaseUserDeleted}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-users-"),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("org-members-"),this.clearCacheByPattern("project-team-members-"),console.log("✅ [UnifiedDataService] Team member completely removed with full cleanup")}catch(i){throw console.error("❌ [UnifiedDataService] Error removing team member:",i),i}}async assignLicenseToTeamMember(e,t,i,a){try{await S(h(this.db,"users",e),{licenseAssignment:{licenseId:t,licenseKey:i,licenseType:a,assignedAt:new Date},updatedAt:new Date}),this.clearCacheByPattern("org-team-members-"),this.clearCacheByPattern("org-licenses-")}catch(c){throw console.error("Error assigning license to team member:",c),c}}async getDatasetsForUser(){const e=await this.getCurrentUser();if(!e)return[];const t=`user-datasets-${e.id}`,i=this.getFromCache(t);if(i)return i;try{const a=A(D(this.db,"datasets"),b("owner.organizationId","==",e.organization.id),b("status","==","ACTIVE"),N("updatedAt","desc")),s=(await v(a)).docs.map(o=>{var d,m;const r=o.data();return{...r,id:o.id,createdAt:((d=r.createdAt)==null?void 0:d.toDate())||new Date,updatedAt:((m=r.updatedAt)==null?void 0:m.toDate())||new Date}});return this.setCache(t,s),s}catch(a){return console.error("Error fetching user datasets:",a),[]}}getFromCache(e){const t=this.cache.get(e);return t?Date.now()>t.timestamp+t.ttl?(this.cache.delete(e),null):t.data:null}setCache(e,t,i=this.CACHE_TTL){this.cache.set(e,{data:t,timestamp:Date.now(),ttl:i})}clearCacheByPattern(e){for(const t of this.cache.keys())t.includes(e)&&this.cache.delete(t)}clearAllCache(){this.cache.clear(),console.log("🧹 [UnifiedDataService] All cache cleared")}async forceRefreshLicenses(){console.log("🔄 [UnifiedDataService] Force refreshing license data..."),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),await this.getLicensesForOrganization(),console.log("✅ [UnifiedDataService] License data force refreshed")}clearUserCache(e){e?(this.clearCacheByPattern("current-user"),this.clearCacheByPattern(`org-users-${e}`),this.clearCacheByPattern("org-context"),this.clearCacheByPattern("org-licenses")):this.clearAllCache()}async getCollectionName(e){const t=P[e];try{const i=A(D(this.db,t),T(1));return await v(i),console.log(`✅ [UnifiedDataService] Using primary collection: ${t}`),t}catch{const a=`${e}_LEGACY`;if(P[a]){const c=P[a];try{const s=A(D(this.db,c),T(1));return await v(s),console.log(`⚠️ [UnifiedDataService] Falling back to legacy collection: ${c}`),c}catch{console.warn(`⚠️ [UnifiedDataService] Both primary and legacy collections failed for ${e}`)}}return console.warn(`⚠️ [UnifiedDataService] Using primary collection name despite access issues: ${t}`),t}}async purchaseLicenses(e){try{if(!await this.getCurrentUser())throw new Error("No authenticated user");console.log("🛒 [UnifiedDataService] Starting license purchase:",e);const i=await this.getAuthToken(),a=await fetch(`${this.getApiBaseUrl()}/licenses/purchase`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${i}`},body:JSON.stringify(e)});if(!a.ok){const s=await a.json();throw new Error(s.error||"Purchase failed")}const c=await a.json();if(!c.success)throw new Error(c.error||"Purchase failed");return console.log("✅ [UnifiedDataService] License purchase completed:",c.data),this.clearCacheByPattern("org-licenses-"),this.clearCacheByPattern("user-"),this.clearCacheByPattern("organization-"),this.clearCacheByPattern("subscription-"),this.clearCacheByPattern("invoice-"),setTimeout(()=>{this.forceRefreshLicenses()},1e3),c.data}catch(t){throw console.error("❌ [UnifiedDataService] Error purchasing licenses:",t),new Error(`Failed to purchase licenses: ${t.message}`)}}async getInvoicesForOrganization(){var e;try{const t=await this.getCurrentUser();if(!((e=t==null?void 0:t.organization)!=null&&e.id))return console.log("🔍 [UnifiedDataService] No organization context for invoices"),[];const i=`org-invoices-${t.organization.id}`,a=this.getFromCache(i);if(a&&Array.isArray(a))return console.log("📋 [UnifiedDataService] Returning cached invoices"),a;console.log("📋 [UnifiedDataService] Fetching invoices for organization:",t.organization.id);const c=A(D(this.db,"invoices"),b("organizationId","==",t.organization.id),N("createdAt","desc")),o=(await v(c)).docs.map(r=>{var d,m,g,f,p,U,u,C;return{id:r.id,...r.data(),createdAt:((m=(d=r.data().createdAt)==null?void 0:d.toDate)==null?void 0:m.call(d))||new Date(r.data().createdAt),updatedAt:((f=(g=r.data().updatedAt)==null?void 0:g.toDate)==null?void 0:f.call(g))||new Date(r.data().updatedAt),paidAt:((U=(p=r.data().paidAt)==null?void 0:p.toDate)==null?void 0:U.call(p))||(r.data().paidAt?new Date(r.data().paidAt):null),dueDate:((C=(u=r.data().dueDate)==null?void 0:u.toDate)==null?void 0:C.call(u))||new Date(r.data().dueDate)}});return this.setCache(i,o),console.log(`✅ [UnifiedDataService] Found ${o.length} invoices`),o}catch(t){return console.error("❌ [UnifiedDataService] Error fetching invoices:",t),[]}}async getPaymentsForOrganization(){var e;try{const t=await this.getCurrentUser();if(!((e=t==null?void 0:t.organization)!=null&&e.id))return console.log("🔍 [UnifiedDataService] No organization context for payments"),[];const i=`org-payments-${t.organization.id}`,a=this.getFromCache(i);if(a&&Array.isArray(a))return console.log("💰 [UnifiedDataService] Returning cached payments"),a;console.log("💰 [UnifiedDataService] Fetching payments for organization:",t.organization.id);const c=A(D(this.db,"payments"),b("organizationId","==",t.organization.id),N("createdAt","desc")),o=(await v(c)).docs.map(r=>{var d,m,g,f,p,U;return{id:r.id,...r.data(),createdAt:((m=(d=r.data().createdAt)==null?void 0:d.toDate)==null?void 0:m.call(d))||new Date(r.data().createdAt),updatedAt:((f=(g=r.data().updatedAt)==null?void 0:g.toDate)==null?void 0:f.call(g))||new Date(r.data().updatedAt),processedAt:((U=(p=r.data().processedAt)==null?void 0:p.toDate)==null?void 0:U.call(p))||(r.data().processedAt?new Date(r.data().processedAt):null)}});return this.setCache(i,o),console.log(`✅ [UnifiedDataService] Found ${o.length} payments`),o}catch(t){return console.error("❌ [UnifiedDataService] Error fetching payments:",t),[]}}async getSubscriptionForOrganization(){var e,t,i,a,c,s,o,r,d,m,g;try{const f=await this.getCurrentUser();if(!((e=f==null?void 0:f.organization)!=null&&e.id))return console.log("🔍 [UnifiedDataService] No organization context for subscription"),null;const p=`org-subscription-${f.organization.id}`,U=this.getFromCache(p);if(U)return console.log("📋 [UnifiedDataService] Returning cached subscription"),U;console.log("📋 [UnifiedDataService] Fetching subscription for organization:",f.organization.id);const u=A(D(this.db,"subscriptions"),b("organizationId","==",f.organization.id),N("createdAt","desc"),T(1)),C=await v(u);if(C.empty)return console.log("📋 [UnifiedDataService] No subscription found"),null;const l=C.docs[0],w={id:l.id,...l.data(),createdAt:((i=(t=l.data().createdAt)==null?void 0:t.toDate)==null?void 0:i.call(t))||new Date(l.data().createdAt),updatedAt:((c=(a=l.data().updatedAt)==null?void 0:a.toDate)==null?void 0:c.call(a))||new Date(l.data().updatedAt),currentPeriodStart:((o=(s=l.data().currentPeriodStart)==null?void 0:s.toDate)==null?void 0:o.call(s))||new Date(l.data().currentPeriodStart),currentPeriodEnd:((d=(r=l.data().currentPeriodEnd)==null?void 0:r.toDate)==null?void 0:d.call(r))||new Date(l.data().currentPeriodEnd),activatedAt:((g=(m=l.data().activatedAt)==null?void 0:m.toDate)==null?void 0:g.call(m))||(l.data().activatedAt?new Date(l.data().activatedAt):null)};return this.setCache(p,w),console.log("✅ [UnifiedDataService] Found subscription:",w.id),w}catch(f){return console.error("❌ [UnifiedDataService] Error fetching subscription:",f),null}}static getInstance(){return M.instance||(M.instance=new M),M.instance}};B(M,"instance");let R=M;const Z=R.getInstance();export{Z as default,Z as unifiedDataService};
