{"version":3,"file":"paymentService-DPPcwrxn.js","sources":["../../src/services/paymentService.ts"],"sourcesContent":["import { api, endpoints, apiUtils } from './api';\n\nexport interface PricingTier {\n  id: string;\n  name: string;\n  description: string;\n  price: number | null;\n  priceId: string;\n  features: string[];\n  maxSeats: number | null;\n  popular?: boolean;\n  enterprise?: boolean;\n}\n\nexport interface TaxCalculationRequest {\n  amount: number;\n  billingAddress: {\n    country: string;\n    state?: string;\n    postalCode?: string;\n  };\n  userType?: 'individual' | 'business';\n}\n\nexport interface TaxCalculation {\n  subtotal: number;\n  taxAmount: number;\n  taxRate: number;\n  total: number;\n  taxJurisdiction: string;\n  breakdown: Array<{\n    type: string;\n    rate: number;\n    amount: number;\n  }>;\n}\n\nexport interface BillingAddress {\n  firstName: string;\n  lastName: string;\n  company?: string;\n  addressLine1: string;\n  addressLine2?: string;\n  city: string;\n  state?: string;\n  postalCode: string;\n  country: string;\n}\n\nexport interface TaxInformation {\n  taxResidency: string;\n  taxId?: string;\n  taxIdType?: 'SSN' | 'EIN' | 'VAT' | 'GST' | 'OTHER';\n  vatNumber?: string;\n  taxExempt?: boolean;\n}\n\nexport interface BusinessProfile {\n  companyName: string;\n  companyType: 'SOLE_PROPRIETORSHIP' | 'PARTNERSHIP' | 'LLC' | 'CORPORATION' | 'NON_PROFIT' | 'GOVERNMENT' | 'OTHER';\n  incorporationCountry: string;\n  incorporationState?: string;\n  businessDescription?: string;\n  website?: string;\n  industry?: string;\n  revenueRange?: string;\n  employeeCount?: string;\n}\n\nexport interface CreateSubscriptionRequest {\n  tier: string;\n  seats: number;\n  paymentMethodId: string;\n  billingAddress: BillingAddress;\n  taxInformation?: TaxInformation;\n  businessProfile?: BusinessProfile;\n}\n\nexport interface CreateSubscriptionResponse {\n  subscription: {\n    id: string;\n    tier: string;\n    status: string;\n    seats: number;\n    pricePerSeat: number;\n    currentPeriodEnd: string;\n  };\n  payment: {\n    id: string;\n    amount: number;\n    currency: string;\n    status: string;\n    receiptUrl: string;\n  };\n  taxCalculation: TaxCalculation;\n}\n\nexport interface PaymentHistory {\n  payments: Array<{\n    id: string;\n    amount: number;\n    currency: string;\n    status: string;\n    description: string;\n    receiptUrl: string;\n    taxAmount: number;\n    createdAt: string;\n    subscription?: {\n      tier: string;\n      seats: number;\n    };\n  }>;\n  total: number;\n}\n\nexport const paymentService = {\n  /**\n   * Get pricing tiers\n   */\n  async getPricingTiers(): Promise<PricingTier[]> {\n    const response = await api.get(endpoints.payments.pricing());\n    \n    if (response.data.success) {\n      return response.data.data.pricingTiers;\n    } else {\n      throw new Error(response.data.message || 'Failed to get pricing');\n    }\n  },\n\n  /**\n   * Calculate tax for a given amount and address\n   */\n  async calculateTax(request: TaxCalculationRequest): Promise<TaxCalculation> {\n    const response = await api.post(endpoints.payments.calculateTax(), request);\n    \n    if (response.data.success) {\n      return response.data.data.taxCalculation;\n    } else {\n      throw new Error(response.data.message || 'Failed to calculate tax');\n    }\n  },\n\n  /**\n   * Create a subscription with payment\n   */\n  async createSubscription(request: CreateSubscriptionRequest): Promise<CreateSubscriptionResponse> {\n    const response = await api.post(endpoints.payments.createSubscription(), request);\n    \n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || 'Failed to create subscription');\n    }\n  },\n\n  /**\n   * Get payment history\n   */\n  async getPaymentHistory(options: { page?: number; limit?: number } = {}): Promise<PaymentHistory> {\n    const params = new URLSearchParams();\n    if (options.page) params.append('page', options.page.toString());\n    if (options.limit) params.append('limit', options.limit.toString());\n\n    const response = await api.get(`${endpoints.payments.history()}?${params}`);\n    \n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || 'Failed to get payment history');\n    }\n  },\n\n  /**\n   * Get specific payment details\n   */\n  async getPaymentDetails(paymentId: string): Promise<any> {\n    const response = await api.get(endpoints.payments.details(paymentId));\n    \n    if (response.data.success) {\n      return response.data.data.payment;\n    } else {\n      throw new Error(response.data.message || 'Failed to get payment details');\n    }\n  },\n\n  /**\n   * Cancel subscription\n   */\n  async cancelSubscription(\n    subscriptionId: string,\n    options: {\n      reason?: string;\n      cancelAtPeriodEnd?: boolean;\n      feedback?: string;\n    } = {}\n  ): Promise<any> {\n    const response = await api.post(endpoints.payments.cancelSubscription(subscriptionId), options);\n    \n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || 'Failed to cancel subscription');\n    }\n  },\n\n  /**\n   * Update payment method\n   */\n  async updatePaymentMethod(subscriptionId: string, paymentMethodId: string): Promise<any> {\n    const response = await api.put(endpoints.payments.updatePaymentMethod(subscriptionId), {\n      paymentMethodId,\n    });\n    \n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || 'Failed to update payment method');\n    }\n  },\n\n  /**\n   * Validate billing address\n   */\n  validateBillingAddress(address: BillingAddress): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!address.firstName?.trim()) errors.push('First name is required');\n    if (!address.lastName?.trim()) errors.push('Last name is required');\n    if (!address.addressLine1?.trim()) errors.push('Address is required');\n    if (!address.city?.trim()) errors.push('City is required');\n    if (!address.postalCode?.trim()) errors.push('Postal code is required');\n    if (!address.country?.trim() || address.country.length !== 2) {\n      errors.push('Valid country code is required');\n    }\n\n    // Country-specific validations\n    if (address.country === 'US' && !address.state?.trim()) {\n      errors.push('State is required for US addresses');\n    }\n\n    if (address.country === 'CA' && !address.state?.trim()) {\n      errors.push('Province is required for Canadian addresses');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    };\n  },\n\n  /**\n   * Format currency amount\n   */\n  formatCurrency(amount: number, currency: string = 'USD'): string {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency,\n    }).format(amount / 100); // Assuming amounts are in cents\n  },\n\n  /**\n   * Format tax rate as percentage\n   */\n  formatTaxRate(rate: number): string {\n    return `${(rate * 100).toFixed(2)}%`;\n  },\n\n  /**\n   * Get payment status display information\n   */\n  getPaymentStatusInfo(status: string): { color: string; label: string } {\n    switch (status.toLowerCase()) {\n      case 'succeeded':\n        return { color: 'success', label: 'Successful' };\n      case 'pending':\n        return { color: 'warning', label: 'Pending' };\n      case 'failed':\n        return { color: 'error', label: 'Failed' };\n      case 'canceled':\n        return { color: 'default', label: 'Canceled' };\n      case 'requires_action':\n        return { color: 'info', label: 'Action Required' };\n      default:\n        return { color: 'default', label: status };\n    }\n  },\n\n  /**\n   * Calculate subscription pricing\n   */\n  calculateSubscriptionPricing(\n    pricePerSeat: number,\n    seats: number,\n    taxRate: number = 0,\n    isYearly: boolean = false\n  ): {\n    subtotal: number;\n    discount: number;\n    taxAmount: number;\n    total: number;\n  } {\n    let subtotal = pricePerSeat * seats;\n    \n    // Apply yearly discount (typically 2 months free)\n    const discount = isYearly ? Math.round(subtotal * 2 / 12) : 0;\n    const discountedSubtotal = subtotal - discount;\n    \n    // Calculate tax on discounted amount\n    const taxAmount = Math.round(discountedSubtotal * taxRate);\n    const total = discountedSubtotal + taxAmount;\n\n    return {\n      subtotal,\n      discount,\n      taxAmount,\n      total,\n    };\n  },\n\n  /**\n   * Validate payment form data\n   */\n  validatePaymentForm(data: {\n    tier: string;\n    seats: number;\n    billingAddress: Partial<BillingAddress>;\n    acceptTerms: boolean;\n    acceptPrivacy: boolean;\n  }): { valid: boolean; errors: Record<string, string> } {\n    const errors: Record<string, string> = {};\n\n    // Validate tier\n    if (!data.tier) {\n      errors.tier = 'Please select a plan';\n    }\n\n    // Validate seats\n    if (!data.seats || data.seats < 1) {\n      errors.seats = 'At least 1 seat is required';\n    }\n\n    if (data.tier === 'BASIC' && data.seats > 1) {\n      errors.seats = 'Basic plan is limited to 1 seat';\n    }\n\n    if (data.tier === 'PRO' && data.seats > 50) {\n      errors.seats = 'Pro plan is limited to 50 seats';\n    }\n\n    if (data.tier === 'ENTERPRISE' && data.seats < 10) {\n      errors.seats = 'Enterprise plan requires minimum 10 seats';\n    }\n\n    // Validate billing address\n    const addressValidation = this.validateBillingAddress(data.billingAddress as BillingAddress);\n    if (!addressValidation.valid) {\n      errors.billingAddress = addressValidation.errors.join(', ');\n    }\n\n    // Validate legal agreements\n    if (!data.acceptTerms) {\n      errors.acceptTerms = 'You must accept the Terms of Service';\n    }\n\n    if (!data.acceptPrivacy) {\n      errors.acceptPrivacy = 'You must accept the Privacy Policy';\n    }\n\n    return {\n      valid: Object.keys(errors).length === 0,\n      errors,\n    };\n  },\n};\n"],"names":["paymentService","response","api","endpoints","request","options","params","paymentId","subscriptionId","paymentMethodId","address","errors","_a","_b","_c","_d","_e","_f","_g","_h","amount","currency","rate","status","pricePerSeat","seats","taxRate","isYearly","subtotal","discount","discountedSubtotal","taxAmount","total","data","addressValidation"],"mappings":"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"}