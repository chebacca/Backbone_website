services:
  # Edge API Server - using Node.js base image instead of non-existent backbone/edge-api
  edge-api:
    image: node:18-alpine
    container_name: backbone-edge-api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD:-backbone_edge}@db:5432/backbone_edge
      - STORAGE_S3_ENDPOINT=http://minio:9000
      - STORAGE_S3_BUCKET=backbone-edge
      - STORAGE_S3_ACCESS_KEY=${MINIO_ROOT_USER:-admin}
      - STORAGE_S3_SECRET_KEY=${MINIO_ROOT_PASSWORD:-adminadmin}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_change_in_production}
      - CORS_ORIGIN=*
      - EDGE_MODE=true
      - ORGANIZATION_ID=${ORGANIZATION_ID:-org_edge_001}
    depends_on:
      - db
      - minio
    volumes:
      - ./edge-config:/app/config:ro
    networks:
      - backbone-edge
    restart: unless-stopped
    # Health check disabled for now since we're using a basic container
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    # For now, just keep the container running
    command: ["sh", "-c", "echo 'Edge API container started - ready for development' && tail -f /dev/null"]

  # PostgreSQL Database for project metadata, team members, datasets
  db:
    image: postgres:15-alpine
    container_name: backbone-edge-db
    environment:
      - POSTGRES_DB=backbone_edge
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-backbone_edge}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./edge-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backbone-edge
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d backbone_edge"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO S3-compatible object storage for datasets and assets
  minio:
    image: minio/minio:latest
    container_name: backbone-edge-minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Web Console
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-adminadmin}
      - MINIO_BROWSER_REDIRECT_URL=http://localhost:9001
    volumes:
      - minio_data:/data
    networks:
      - backbone-edge
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Redis for session storage and caching (optional)
  redis:
    image: redis:7-alpine
    container_name: backbone-edge-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-backbone_redis}
    volumes:
      - redis_data:/data
    networks:
      - backbone-edge
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  db_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local

networks:
  backbone-edge:
    driver: bridge
