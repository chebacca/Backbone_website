/**
 * ðŸ”¥ FIREBASE SECURITY RULES - DYNAMIC COLLECTION CREATION
 * 
 * Enhanced security rules that support dynamic collection creation while
 * maintaining strict schema compliance and organization-based access control.
 */

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function getUserEmail() {
      return request.auth.token.email;
    }
    
    function getUserRole() {
      return request.auth.token.role;
    }
    
    function getOrganizationId() {
      return request.auth.token.organizationId;
    }
    
    function isAdmin() {
      return getUserRole() in ['ADMIN', 'SUPERADMIN', 'OWNER'];
    }
    
    function isOrgMember(orgId) {
      return getOrganizationId() == orgId;
    }
    
    function hasAnyRole(roles) {
      return isAuthenticated() && getUserRole() in roles;
    }
    
    function belongsToOrganization(organizationId) {
      return isAuthenticated() && getOrganizationId() == organizationId;
    }
    
    // ============================================================================
    // COLLECTION REGISTRY - MANAGES DYNAMIC COLLECTIONS
    // ============================================================================
    
    // Collection Registry - tracks all created collections
    match /collectionRegistry/{collectionName} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow create: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'SUPER_ADMIN']) &&
        request.resource.data.organizationId == getOrganizationId() &&
        request.resource.data.createdBy == getUserId();
      
      allow update: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'SUPER_ADMIN']) &&
        belongsToOrganization(resource.data.organizationId);
      
      allow delete: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER']) &&
        belongsToOrganization(resource.data.organizationId);
    }
    
    // Collection Activity Logs - audit trail for collection operations
    match /collectionActivityLogs/{logId} {
      allow read: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER']) &&
        belongsToOrganization(resource.data.organizationId);
      
      allow create: if isAuthenticated();
      // No update/delete - logs are immutable
    }
    
    // Firestore Indexes Registry
    match /firestoreIndexes/{indexId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow create, update: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER']) &&
        belongsToOrganization(request.resource.data.organizationId);
    }
    
    // Security Rules Registry
    match /securityRules/{ruleId} {
      allow read: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER']) &&
        belongsToOrganization(resource.data.organizationId);
      
      allow create, update: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER']) &&
        belongsToOrganization(request.resource.data.organizationId);
    }
    
    // ============================================================================
    // CORE SYSTEM COLLECTIONS
    // ============================================================================
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && 
        (getUserId() == userId || isAdmin());
      
      allow write: if isAuthenticated() && 
        (getUserId() == userId || isAdmin());
    }
    
    // Organizations collection
    match /organizations/{orgId} {
      allow read: if isAuthenticated() && 
        (isOrgMember(orgId) || isAdmin());
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER']) &&
        isOrgMember(orgId);
    }
    
    // Team Members collection
    match /teamMembers/{memberId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow create: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'HR_MANAGER']) &&
        request.resource.data.organizationId == getOrganizationId();
      
      allow update: if isAuthenticated() && 
        (hasAnyRole(['ADMIN', 'OWNER', 'HR_MANAGER']) || 
         resource.data.userId == getUserId()) &&
        belongsToOrganization(resource.data.organizationId);
      
      allow delete: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER']) &&
        belongsToOrganization(resource.data.organizationId);
    }
    
    // Projects collection
    match /projects/{projectId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow create: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'PROJECT_MANAGER']) &&
        request.resource.data.organizationId == getOrganizationId();
      
      allow update: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'PROJECT_MANAGER']) &&
        belongsToOrganization(resource.data.organizationId);
      
      allow delete: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER']) &&
        belongsToOrganization(resource.data.organizationId);
    }
    
    // ============================================================================
    // DYNAMIC COLLECTION RULES
    // ============================================================================
    
    // Sessions collections (dynamically created)
    match /sessions/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'PRODUCER', 'DIRECTOR']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    match /sessionTasks/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'PRODUCER', 'COORDINATOR']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    match /sessionWorkflows/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'PRODUCER', 'DIRECTOR']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    match /sessionAssignments/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'PRODUCER', 'COORDINATOR']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    match /sessionReviews/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'PRODUCER', 'DIRECTOR', 'POST_SUPERVISOR']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    match /postProductionTasks/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'POST_SUPERVISOR', 'POST_COORDINATOR']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    // Media collections
    match /mediaFiles/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'MEDIA_MANAGER', 'EDITOR']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    match /reviews/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'PRODUCER', 'DIRECTOR', 'POST_SUPERVISOR']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    match /notes/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['MEMBER', 'ADMIN', 'OWNER']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    match /reports/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'MANAGER']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    // Inventory collections
    match /inventoryItems/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'INVENTORY_MANAGER']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    match /inventory/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'INVENTORY_MANAGER']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    match /networks/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'NETWORK_ADMIN']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    match /networkIPAssignments/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'NETWORK_ADMIN']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    // Business collections
    match /clients/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'BUSINESS_MANAGER']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    match /contacts/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER', 'BUSINESS_MANAGER']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    match /licenses/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    match /subscriptions/{docId} {
      allow read: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      
      allow write: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER']) &&
        request.resource.data.organizationId == getOrganizationId();
    }
    
    // ============================================================================
    // GENERIC DYNAMIC COLLECTION RULE
    // ============================================================================
    
    // Generic rule for any dynamically created collection that follows the pattern
    // This rule applies to collections that have organizationId field
    match /{collection}/{docId} {
      allow read: if isAuthenticated() && 
        resource.data.keys().hasAll(['organizationId']) &&
        belongsToOrganization(resource.data.organizationId);
      
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['organizationId']) &&
        request.resource.data.organizationId == getOrganizationId() &&
        // Check if collection is registered
        exists(/databases/$(database)/documents/collectionRegistry/$(collection));
      
      allow update: if isAuthenticated() && 
        resource.data.keys().hasAll(['organizationId']) &&
        belongsToOrganization(resource.data.organizationId) &&
        request.resource.data.organizationId == resource.data.organizationId;
      
      allow delete: if isAuthenticated() && 
        hasAnyRole(['ADMIN', 'OWNER']) &&
        resource.data.keys().hasAll(['organizationId']) &&
        belongsToOrganization(resource.data.organizationId);
    }
    
    // ============================================================================
    // SUBCOLLECTIONS - INHERIT PARENT PERMISSIONS
    // ============================================================================
    
    // All subcollections inherit parent document permissions
    match /{parent}/{parentId}/{subcollection}/{docId} {
      allow read, write: if isAuthenticated() && 
        // Check parent document access
        get(/databases/$(database)/documents/$(parent)/$(parentId)).data.organizationId == getOrganizationId();
    }
    
    // Nested subcollections
    match /{parent}/{parentId}/{subcollection}/{subId}/{nestedCollection}/{nestedId} {
      allow read, write: if isAuthenticated() && 
        get(/databases/$(database)/documents/$(parent)/$(parentId)).data.organizationId == getOrganizationId();
    }
    
    // ============================================================================
    // FALLBACK RULES - RESTRICTIVE BY DEFAULT
    // ============================================================================
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
