rules_version = '2';

/**
 * üîê BACKBONE v14.2 Unified Firestore Security Rules
 * 
 * CRITICAL FIX: Resolves "Missing or insufficient permissions" errors
 * by using Firebase Auth custom claims instead of database lookups
 * 
 * Key Features:
 * - Uses request.auth.token for role/organization checks (no DB reads)
 * - Supports both Dashboard and Licensing website collections
 * - Organization-based data isolation
 * - Role-based access control (RBAC)
 * - Comprehensive collection coverage
 */

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // HELPER FUNCTIONS - NO DATABASE READS
    // ============================================================================
    
    // Authentication check
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Get user ID
    function getUserId() {
      return request.auth.uid;
    }
    
    // Get user email
    function getUserEmail() {
      return request.auth.token.email;
    }
    
    // Check if user owns the document (userId field matches)
    function isOwner(userId) {
      return isAuthenticated() && getUserId() == userId;
    }
    
    // Get organization ID from custom claims
    function getOrgId() {
      return request.auth.token.get('organizationId', '');
    }
    
    // Check if user belongs to organization (using custom claims)
    function belongsToOrg(orgId) {
      return isAuthenticated() && getOrgId() == orgId;
    }
    
    // Get user role from custom claims
    function getUserRole() {
      return request.auth.token.get('role', '');
    }
    
    // Get team member role from custom claims
    function getTeamMemberRole() {
      return request.auth.token.get('teamMemberRole', '');
    }
    
    // Check if user has specific role
    function hasRole(role) {
      return getUserRole() == role || getTeamMemberRole() == role;
    }
    
    // Check if user has any of the specified roles
    function hasAnyRole(roles) {
      return getUserRole() in roles || getTeamMemberRole() in roles;
    }
    
    // Check if user is admin (any type)
    function isAdmin() {
      return hasAnyRole(['ADMIN', 'ENTERPRISE_ADMIN', 'SUPERADMIN', 'admin', 'owner']);
    }
    
    // Check if user is organization admin
    function isOrgAdmin(orgId) {
      return belongsToOrg(orgId) && isAdmin();
    }
    
    // Check if user can manage team members
    function canManageTeamMembers(orgId) {
      return belongsToOrg(orgId) && hasAnyRole(['admin', 'owner', 'ADMIN', 'ENTERPRISE_ADMIN']);
    }
    
    // ============================================================================
    // CORE COLLECTIONS - USERS & ORGANIZATIONS
    // ============================================================================
    
    // Users - Self-access + organization admin access
    match /users/{userId} {
      allow read: if isOwner(userId) || 
                     (isAuthenticated() && isAdmin());
      allow write: if isOwner(userId) || 
                      (isAuthenticated() && isAdmin());
      allow create: if isAuthenticated() && 
                       (userId == getUserId() || isAdmin());
    }
    
    // Organizations - Organization member access
    match /organizations/{orgId} {
      allow read: if belongsToOrg(orgId) || isAdmin();
      allow write: if isOrgAdmin(orgId) || isAdmin();
      allow create: if isAuthenticated() && 
                       (orgId == getOrgId() || isAdmin());
    }
    
    // ============================================================================
    // TEAM MEMBER COLLECTIONS
    // ============================================================================
    
    // Team Members (camelCase) - Organization-scoped access
    match /teamMembers/{memberId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        memberId == getUserId() ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('organizationId', '')) && 
        canManageTeamMembers(request.resource.data.get('organizationId', ''))
      );
      allow update: if isAuthenticated() && (
        memberId == getUserId() ||
        (belongsToOrg(resource.data.get('organizationId', '')) && 
         canManageTeamMembers(resource.data.get('organizationId', ''))) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        (belongsToOrg(resource.data.get('organizationId', '')) && 
         canManageTeamMembers(resource.data.get('organizationId', ''))) ||
        isAdmin()
      );
    }
    
    // Team Members (underscore) - Organization-scoped access
    match /team_members/{memberId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        memberId == getUserId() ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('organizationId', '')) && 
        canManageTeamMembers(request.resource.data.get('organizationId', ''))
      );
      allow update: if isAuthenticated() && (
        memberId == getUserId() ||
        (belongsToOrg(resource.data.get('organizationId', '')) && 
         canManageTeamMembers(resource.data.get('organizationId', ''))) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        (belongsToOrg(resource.data.get('organizationId', '')) && 
         canManageTeamMembers(resource.data.get('organizationId', ''))) ||
        isAdmin()
      );
    }
    
    // Organization Members - Team member management
    match /orgMembers/{memberId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('orgId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('orgId', '')) && 
        canManageTeamMembers(request.resource.data.get('orgId', ''))
      );
      allow update: if isAuthenticated() && (
        isOwner(resource.data.get('userId', '')) ||
        (belongsToOrg(resource.data.get('orgId', '')) && 
         canManageTeamMembers(resource.data.get('orgId', ''))) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        (belongsToOrg(resource.data.get('orgId', '')) && 
         canManageTeamMembers(resource.data.get('orgId', ''))) ||
        isAdmin()
      );
    }
    
    // ============================================================================
    // PROJECT COLLECTIONS
    // ============================================================================
    
    // Projects - Organization and owner access
    match /projects/{projectId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isOwner(resource.data.get('ownerId', '')) ||
        getUserEmail() == resource.data.get('ownerEmail', '') ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isOwner(request.resource.data.get('ownerId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isOwner(resource.data.get('ownerId', '')) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.get('ownerId', '')) ||
        isOrgAdmin(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // Project Team Members - Project assignments
    match /project_team_members/{assignmentId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // Project Team Members (camelCase)
    match /projectTeamMembers/{assignmentId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // Project Assignments
    match /projectAssignments/{assignmentId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // ============================================================================
    // LICENSING & SUBSCRIPTION COLLECTIONS
    // ============================================================================
    
    // Licenses - User and organization access
    match /licenses/{licenseId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.get('assignedToUserId', '')) ||
        getUserEmail() == resource.data.get('assignedToEmail', '') ||
        getUserEmail() == resource.data.get('userEmail', '') ||
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isOrgAdmin(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // Subscriptions - User and organization access
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.get('userId', '')) ||
        getUserEmail() == resource.data.get('userEmail', '') ||
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        isOwner(request.resource.data.get('userId', '')) ||
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        isOwner(resource.data.get('userId', '')) ||
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isOrgAdmin(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // Payments - User and organization access
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.get('userId', '')) ||
        getUserEmail() == resource.data.get('userEmail', '') ||
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        isOwner(request.resource.data.get('userId', '')) ||
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // ============================================================================
    // DATA COLLECTIONS
    // ============================================================================
    
    // Datasets - Organization-scoped access
    match /datasets/{datasetId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isOwner(resource.data.get('ownerId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isOwner(resource.data.get('ownerId', '')) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.get('ownerId', '')) ||
        isOrgAdmin(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // Project Datasets - Links between projects and datasets
    match /project_datasets/{linkId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // Project Datasets (camelCase)
    match /projectDatasets/{linkId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // ============================================================================
    // SESSION & WORKFLOW COLLECTIONS
    // ============================================================================
    
    // Sessions - User and project access
    match /sessions/{sessionId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.get('userId', '')) ||
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        isOwner(request.resource.data.get('userId', '')) ||
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        isOwner(resource.data.get('userId', '')) ||
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.get('userId', '')) ||
        isOrgAdmin(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // ============================================================================
    // MEDIA & ASSET COLLECTIONS
    // ============================================================================
    
    // Media Files - Organization-scoped access
    match /media/{mediaId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // Media Files (camelCase)
    match /mediaFiles/{mediaId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // ============================================================================
    // REPORTING & ANALYTICS COLLECTIONS
    // ============================================================================
    
    // Reports - Organization-scoped access
    match /reports/{reportId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isOwner(resource.data.get('userId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isOwner(resource.data.get('userId', '')) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // Usage Analytics - Organization-scoped access
    match /usageAnalytics/{analyticsId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        belongsToOrg(request.resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
    }
    
    // ============================================================================
    // AUDIT & LOGGING COLLECTIONS
    // ============================================================================
    
    // Audit Logs - Organization-scoped read access, system write access
    match /audit_logs/{logId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated(); // System can create audit logs
    }
    
    // Audit Logs (camelCase)
    match /auditLogs/{logId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if isAuthenticated(); // System can create audit logs
    }
    
    // Webhook Events - System events
    match /webhookEvents/{eventId} {
      allow read: if isAuthenticated() && (
        belongsToOrg(resource.data.get('organizationId', '')) ||
        isAdmin()
      );
      allow create: if true; // System can create webhook events
    }
    
    // ============================================================================
    // NOTIFICATION & COMMUNICATION COLLECTIONS
    // ============================================================================
    
    // Notifications - User-scoped access
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.get('userId', '')) ||
        isAdmin()
      );
      allow create: if true; // System can create notifications
      allow update: if isAuthenticated() && (
        isOwner(resource.data.get('userId', '')) ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.get('userId', '')) ||
        isAdmin()
      );
    }
    
    // ============================================================================
    // SYSTEM & CONFIGURATION COLLECTIONS
    // ============================================================================
    
    // System Settings - Read-only for users
    match /systemSettings/{settingKey} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server-side updates allowed
    }
    
    // User Preferences - Self-access only
    match /userPreferences/{userId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() && userId == getUserId();
    }
    
    // User Sessions - Self-access only
    match /userSessions/{sessionId} {
      allow read: if isAuthenticated() && resource.data.get('userId', '') == getUserId();
      allow create: if isAuthenticated() && request.resource.data.get('userId', '') == getUserId();
      allow update: if isAuthenticated() && resource.data.get('userId', '') == getUserId();
      allow delete: if isAuthenticated() && resource.data.get('userId', '') == getUserId();
    }
    
    // Organization Settings - Organization admin access
    match /organizationSettings/{organizationId} {
      allow read: if belongsToOrg(organizationId) || isAdmin();
      allow create: if isOrgAdmin(organizationId) || isAdmin();
      allow update: if isOrgAdmin(organizationId) || isAdmin();
      allow delete: if isOrgAdmin(organizationId) || isAdmin();
    }
    
    // ============================================================================
    // FALLBACK RULES
    // ============================================================================
    
    // Allow all authenticated users to read/write any collection not explicitly covered
    // This ensures the app doesn't break if new collections are added
    match /{document=**} {
      allow read, write: if isAuthenticated();
    }
  }
}
