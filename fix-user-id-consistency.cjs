#!/usr/bin/env node

const admin = require('firebase-admin');

// Initialize Firebase Admin
admin.initializeApp({
  credential: admin.credential.applicationDefault(),
  projectId: 'backbone-logic'
});

const db = admin.firestore();

async function fixUserIdConsistency() {
  console.log('üîß Fixing User ID Format Consistency...\n');

  try {
    const enterpriseEmail = 'enterprise.user@example.com';
    const enterpriseFirebaseUid = '4ByNhExY8vTH1SOcZK6ZWDgn3Eu2';

    console.log('1Ô∏è‚É£ Fixing Users Collection...');
    
    // Create/update user document with email as ID
    const userRef = db.collection('users').doc(enterpriseEmail);
    await userRef.set({
      email: enterpriseEmail,
      name: 'Enterprise User',
      role: 'ENTERPRISE',
      status: 'active',
      createdAt: new Date(),
      updatedAt: new Date(),
      emailVerified: true,
      organizationId: 'default-org',
      firebaseUid: enterpriseFirebaseUid
    }, { merge: true });
    console.log('‚úÖ User document created with email as ID');

    console.log('\n2Ô∏è‚É£ Fixing Org Members Collection...');
    
    // Update org member to use email as userId
    const orgMemberRef = db.collection('orgMembers').doc(enterpriseFirebaseUid);
    await orgMemberRef.update({
      userId: enterpriseEmail, // Change from Firebase UID to email
      updatedAt: new Date()
    });
    console.log('‚úÖ Org member userId updated to email format');

    console.log('\n3Ô∏è‚É£ Fixing Team Members Collection...');
    
    // Update team member to use email as assignedToUserId
    const teamMemberRef = db.collection('teamMembers').doc(enterpriseFirebaseUid);
    await teamMemberRef.update({
      assignedToUserId: enterpriseEmail, // Change from undefined to email
      updatedAt: new Date()
    });
    console.log('‚úÖ Team member assignedToUserId updated to email format');

    console.log('\n4Ô∏è‚É£ Fixing Subscription Linkage...');
    
    // Find and update subscription to link with new Firebase UID
    const subscriptionsRef = db.collection('subscriptions');
    const subscriptionQuery = await subscriptionsRef.where('email', '==', enterpriseEmail).get();
    
    if (!subscriptionQuery.empty) {
      const subscriptionDoc = subscriptionQuery.docs[0];
      console.log(`‚úÖ Found subscription: ${subscriptionDoc.id}`);
      
      await subscriptionDoc.ref.update({
        firebaseUid: enterpriseFirebaseUid,
        updatedAt: new Date()
      });
      console.log('‚úÖ Subscription linked to new Firebase UID');
    } else {
      console.log('‚ö†Ô∏è  No subscription found for enterprise user');
    }

    console.log('\n5Ô∏è‚É£ Verifying Data Consistency...');
    
    // Verify the fixes
    const userDoc = await userRef.get();
    const orgMemberDoc = await orgMemberRef.get();
    const teamMemberDoc = await teamMemberRef.get();
    
    console.log('‚úÖ User document:', userDoc.exists ? 'EXISTS' : 'MISSING');
    console.log('‚úÖ Org member document:', orgMemberDoc.exists ? 'EXISTS' : 'MISSING');
    console.log('‚úÖ Team member document:', teamMemberDoc.exists ? 'EXISTS' : 'MISSING');

    console.log('\nüéâ User ID Consistency Fix Complete!');
    console.log('=====================================');
    console.log(`üìß Email: ${enterpriseEmail}`);
    console.log(`üÜî User ID (email): ${enterpriseEmail}`);
    console.log(`üîë Firebase UID: ${enterpriseFirebaseUid}`);
    console.log(`üë§ Role: ENTERPRISE`);
    console.log(`üè¢ Organization: default-org`);
    console.log('\n‚úÖ Enterprise user can now log in and access all features!');

  } catch (error) {
    console.error('‚ùå Error fixing user ID consistency:', error);
    process.exit(1);
  }
}

// Run the fix
fixUserIdConsistency();
