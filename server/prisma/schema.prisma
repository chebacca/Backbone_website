generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

enum SubscriptionTier {
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
  TRIALING
  DEMO_ACTIVE
  DEMO_EXPIRED
}

enum LicenseStatus {
  PENDING
  ACTIVE
  SUSPENDED
  EXPIRED
  REVOKED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
  PROCESSING
}

enum AMLStatus {
  PENDING
  PASSED
  FAILED
  REQUIRES_REVIEW
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DemoStatus {
  ACTIVE
  EXPIRED
  CONVERTED
  ABANDONED
}

enum DemoConversionSource {
  COUNTDOWN_TIMER
  FEATURE_RESTRICTION
  UPGRADE_PROMPT
  EMAIL_CAMPAIGN
  MANUAL
}

enum OrgMemberRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum OrgMemberStatus {
  ACTIVE
  PENDING
  SUSPENDED
  REMOVED
}

enum ProjectType {
  STANDALONE
  NETWORKED
  NETWORK
  HYBRID
}

enum ApplicationMode {
  STANDALONE
  SHARED_NETWORK
}

enum ProjectVisibility {
  PRIVATE
  ORGANIZATION
  PUBLIC
}

enum StorageBackend {
  FIRESTORE
  GCS
  S3
  LOCAL
  AZURE_BLOB
}

enum ProjectAssignmentRole {
  ADMIN
  MEMBER
}

model User {
  id                       String     @id @default(uuid())
  email                    String     @unique
  name                     String?
  password                 String?
  role                     UserRole   @default(USER)
  isEmailVerified          Boolean    @default(false)
  emailVerifyToken         String?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  twoFactorEnabled         Boolean    @default(false)
  twoFactorSecret          String?
  twoFactorTempSecret      String?
  twoFactorBackupCodes     String[]
  lastLoginAt              DateTime?
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  complianceProfile        Json?
  billingAddress           Json?
  taxInformation           Json?
  marketingConsent         Boolean    @default(false)
  dataProcessingConsent    Boolean    @default(false)
  termsAcceptedAt          DateTime?
  privacyPolicyAcceptedAt  DateTime?
  identityVerified         Boolean    @default(false)
  identityVerificationData Json?
  kycStatus                String?
  kycCompletedAt           DateTime?
  businessProfile          Json?
  ipAddress                String?
  userAgent                String?
  registrationSource       String?
  organizationId           String?
  
  // Firebase Authentication integration
  firebaseUid              String?    @unique
  
  // Team member specific fields
  isTeamMember             Boolean    @default(false)
  licenseType              SubscriptionTier?
  memberRole               OrgMemberRole?
  memberStatus             OrgMemberStatus?
  department               String?
  
  // Demo mode fields
  isDemoUser               Boolean    @default(false)
  demoStartedAt            DateTime?
  demoExpiresAt            DateTime?
  demoStatus               DemoStatus?
  demoTier                 SubscriptionTier?
  demoFeatureAccess        Json?
  demoConvertedAt          DateTime?
  demoConversionSource     DemoConversionSource?
  demoSessionCount         Int        @default(0)
  demoLastActivityAt       DateTime?
  demoRemindersSent        Int        @default(0)
  demoAppUsageMinutes      Int        @default(0)
  demoFeaturesUsed         String[]   @default([])

  subscriptions  Subscription[]
  licenses       License[]
  payments       Payment[]
  auditLogs      AuditLog[]
  consents       PrivacyConsent[]
  analytics      UsageAnalytics[]
  compliance     ComplianceEvent[]
  demoSessions   DemoSession[]
  demoActivities DemoActivity[]
  
  // Organization relationships
  organization           Organization?     @relation("OrganizationMember", fields: [organizationId], references: [id])
  ownedOrganizations     Organization[]    @relation("OrganizationOwner")
  orgMemberships         OrgMember[]
  invitedOrgMembers      OrgMember[]       @relation("OrgMemberInvitedBy")
  
  // Project relationships
  ownedProjects          Project[]         @relation("ProjectOwner")
  projectAssignments     ProjectAssignment[]
  assignedProjects       ProjectAssignment[] @relation("ProjectAssignedBy")
}

model Subscription {
  id                 String              @id @default(uuid())
  userId             String
  tier               SubscriptionTier
  status             SubscriptionStatus
  stripeSubscriptionId String?           @unique
  stripeCustomerId   String?
  stripePriceId      String?
  seats              Int
  pricePerSeat       Int
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelledAt        DateTime?
  cancelAtPeriodEnd  Boolean             @default(false)
  trialStart         DateTime?
  trialEnd           DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  organizationId     String?

  user         User          @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
  licenses     License[]
  payments     Payment[]

  @@index([userId])
  @@index([organizationId])
}

model License {
  id              String           @id @default(uuid())
  key             String           @unique
  userId          String
  subscriptionId  String
  status          LicenseStatus
  tier            SubscriptionTier
  activatedAt     DateTime?
  expiresAt       DateTime?
  deviceInfo      Json?
  ipAddress       String?
  activationCount Int              @default(0)
  maxActivations  Int              @default(1)
  features        Json
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  organizationId  String?

  user         User          @relation(fields: [userId], references: [id])
  subscription Subscription  @relation(fields: [subscriptionId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
  analytics    UsageAnalytics[]

  @@index([userId])
  @@index([subscriptionId])
  @@index([organizationId])
}

model Payment {
  id                    String        @id @default(uuid())
  userId                String
  subscriptionId        String
  stripePaymentIntentId String?       @unique
  stripeInvoiceId       String?       @unique
  amount                Int
  currency              String
  status                PaymentStatus
  description           String?
  receiptUrl            String?
  paymentMethod         String?
  billingAddressSnapshot Json
  taxAmount             Int?
  taxRate               Float?
  taxJurisdiction       String?
  complianceData        Json?
  ipAddress             String?
  userAgent             String?
  processingLocation    String?
  amlScreeningStatus    AMLStatus     @default(PENDING)
  amlScreeningDate      DateTime?
  amlRiskScore          Int?
  pciCompliant          Boolean       @default(true)
  tokenizationId        String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  complianceEvents ComplianceEvent[]

  @@index([userId])
  @@index([subscriptionId])
}

model UsageAnalytics {
  id        String   @id @default(uuid())
  userId    String
  licenseId String
  event     String
  metadata  Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  license License @relation(fields: [licenseId], references: [id])

  @@index([userId, timestamp])
  @@index([licenseId, timestamp])
}

model SDKVersion {
  id           String   @id @default(uuid())
  platform     String
  version      String
  isLatest     Boolean  @default(false)
  size         Int?
  checksum     String?
  releaseNotes String?
  downloadUrl  String
  createdAt    DateTime @default(now())
}

model LicenseDeliveryLog {
  id             String   @id @default(uuid())
  licenseId      String
  paymentId      String
  deliveryMethod String
  emailAddress   String?
  deliveryStatus String
  emailSent      Boolean?
  lastAttemptAt  DateTime?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())

  @@index([paymentId])
  @@index([licenseId])
}

model EmailLog {
  id         String   @id @default(uuid())
  sendgridId String   @unique
  template   String?
  email      String?
  status     String?
  error      String?
  data       Json?
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
}

model PrivacyConsent {
  id             String   @id @default(uuid())
  userId         String
  consentType    String
  consentGranted Boolean
  consentVersion String
  ipAddress      String?
  userAgent      String?
  legalBasis     String?
  consentDate    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, consentDate])
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String
  action      String
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
}

model ComplianceEvent {
  id          String   @id @default(uuid())
  userId      String?
  paymentId   String?
  eventType   String
  severity    Severity
  description String
  metadata    Json?
  resolved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User?    @relation(fields: [userId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])

  @@index([severity, resolved, createdAt])
}

model WebhookEvent {
  id         String   @id @default(uuid())
  type       String
  stripeId   String   @unique
  data       Json
  processed  Boolean  @default(false)
  retryCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([processed, retryCount])
}

model DemoSession {
  id                    String               @id @default(uuid())
  userId                String
  sessionId             String               @unique
  startedAt             DateTime             @default(now())
  expiresAt             DateTime
  status                DemoStatus           @default(ACTIVE)
  tier                  SubscriptionTier     @default(BASIC)
  durationMinutes       Int                  @default(0)
  featuresAccessed      String[]            @default([])
  restrictionsHit       String[]            @default([])
  upgradePromptShown    Int                 @default(0)
  lastActivityAt        DateTime            @default(now())
  conversionAttempts    Int                 @default(0)
  emailRemindersSent    Int                 @default(0)
  deviceInfo            Json?
  ipAddress             String?
  userAgent             String?
  referralSource        String?
  utmSource             String?
  utmCampaign           String?
  utmMedium             String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  user         User           @relation(fields: [userId], references: [id])
  activities   DemoActivity[]

  @@index([userId])
  @@index([status, expiresAt])
  @@index([createdAt])
}

model DemoActivity {
  id              String        @id @default(uuid())
  userId          String
  demoSessionId   String
  activityType    String        // e.g., "LOGIN", "FEATURE_ACCESS", "RESTRICTION_HIT", "UPGRADE_PROMPT", "CONVERSION_ATTEMPT"
  featureName     String?
  restrictionType String?       // e.g., "FEATURE_LOCKED", "TIME_LIMIT", "USAGE_LIMIT"
  metadata        Json?
  ipAddress       String?
  userAgent       String?
  timestamp       DateTime      @default(now())

  user        User        @relation(fields: [userId], references: [id])
  demoSession DemoSession @relation(fields: [demoSessionId], references: [id])

  @@index([userId, timestamp])
  @@index([demoSessionId, timestamp])
  @@index([activityType, timestamp])
}

model Organization {
  id        String           @id @default(uuid())
  name      String
  ownerId   String
  tier      SubscriptionTier @default(PRO)
  domain    String?
  settings  Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  owner         User           @relation("OrganizationOwner", fields: [ownerId], references: [id])
  members       User[]         @relation("OrganizationMember")
  orgMembers    OrgMember[]
  subscriptions Subscription[]
  projects      Project[]
  licenses      License[]

  @@index([ownerId])
  @@index([tier])
}

model OrgMember {
  id             String          @id @default(uuid())
  organizationId String
  userId         String
  role           OrgMemberRole   @default(MEMBER)
  status         OrgMemberStatus @default(PENDING)
  seatReserved   Boolean         @default(false)
  invitedBy      String
  invitedAt      DateTime        @default(now())
  joinedAt       DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitedByUser User        @relation("OrgMemberInvitedBy", fields: [invitedBy], references: [id])

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@index([status])
}

model Project {
  id                String            @id @default(uuid())
  name              String
  description       String?
  ownerId           String
  organizationId    String
  type              ProjectType       @default(STANDALONE)
  applicationMode   ApplicationMode   @default(STANDALONE)
  visibility        ProjectVisibility @default(PRIVATE)
  storageBackend    StorageBackend    @default(FIRESTORE)
  allowCollaboration Boolean          @default(false)
  maxCollaborators  Int               @default(0)
  realTimeEnabled   Boolean           @default(false)
  isActive          Boolean           @default(true)
  isArchived        Boolean           @default(false)
  settings          Json?
  metadata          Json?
  lastAccessedAt    DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  owner        User                @relation("ProjectOwner", fields: [ownerId], references: [id])
  organization Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignments  ProjectAssignment[]

  @@index([ownerId])
  @@index([organizationId])
  @@index([isActive])
  @@index([isArchived])
  @@index([type])
  @@index([visibility])
}

model ProjectAssignment {
  id         String                @id @default(uuid())
  projectId  String
  userId     String
  role       ProjectAssignmentRole @default(MEMBER)
  assignedBy String
  assignedAt DateTime              @default(now())
  isActive   Boolean               @default(true)
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt

  project        Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedByUser User    @relation("ProjectAssignedBy", fields: [assignedBy], references: [id])

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@index([role])
  @@index([isActive])
}


