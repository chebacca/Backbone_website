rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Default deny all access
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // Helper functions for organization-based access control
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserId() {
      return request.auth.uid;
    }

    function isOrganizationMember(organizationId) {
      // In Firebase Storage rules, we can only check basic auth claims
      // Organization membership must be validated via custom claims or Firestore
      return isAuthenticated() && 
        (request.auth.token.organizationId == organizationId ||
         request.auth.token.organizations != null && 
         organizationId in request.auth.token.organizations);
    }

    function isValidFileSize(maxSize) {
      return request.resource == null || request.resource.size <= maxSize;
    }

    function isValidFileType(allowedTypes) {
      return request.resource == null || 
        request.resource.contentType.matches(allowedTypes);
    }

    // ============================================================================
    // PUBLIC ASSETS
    // ============================================================================
    
    // Public assets: read-only access for everyone, write for authenticated users
    match /public/{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated()
        && isValidFileSize(20 * 1024 * 1024) // 20 MB limit
        && isValidFileType('image/.*|video/.*|application/pdf|text/.*');
    }

    // ============================================================================
    // ORGANIZATION-SCOPED STORAGE
    // ============================================================================
    
    // Organization-scoped storage with complete tenant isolation
    match /organizations/{organizationId}/{allPaths=**} {
      allow read, write: if isAuthenticated() 
        && isOrganizationMember(organizationId)
        && isValidFileSize(500 * 1024 * 1024) // 500 MB limit for organization files
        && isValidFileType('image/.*|video/.*|audio/.*|application/.*|text/.*');
    }

    // Organization project files with additional project-level validation
    match /organizations/{organizationId}/projects/{projectId}/{allPaths=**} {
      allow read, write: if isAuthenticated() 
        && isOrganizationMember(organizationId)
        && isValidFileSize(1 * 1024 * 1024 * 1024) // 1 GB limit for project files
        && isValidFileType('image/.*|video/.*|audio/.*|application/.*|text/.*');
    }

    // ============================================================================
    // USER-SPECIFIC STORAGE
    // ============================================================================
    
    // User-specific files
    match /users/{userId}/{allPaths=**} {
      allow read, write: if isAuthenticated() && getUserId() == userId
        && isValidFileSize(100 * 1024 * 1024) // 100 MB limit for user files
        && isValidFileType('image/.*|video/.*|audio/.*|application/.*|text/.*');
    }

    // ============================================================================
    // PROJECT-SPECIFIC STORAGE
    // ============================================================================
    
    // Call Sheet App files
    match /callsheet/{allPaths=**} {
      allow read, write: if isAuthenticated()
        && isValidFileSize(50 * 1024 * 1024) // 50 MB limit for call sheet files
        && isValidFileType('image/.*|application/pdf|text/.*');
    }

    // EDL Converter files
    match /edl/{allPaths=**} {
      allow read, write: if isAuthenticated()
        && isValidFileSize(500 * 1024 * 1024) // 500 MB limit for EDL files
        && isValidFileType('application/.*|text/.*');
    }

    // Dashboard project files
    match /dashboard/{allPaths=**} {
      allow read, write: if isAuthenticated()
        && isValidFileSize(200 * 1024 * 1024) // 200 MB limit for dashboard files
        && isValidFileType('image/.*|video/.*|audio/.*|application/.*|text/.*');
    }

    // Licensing website files
    match /licensing/{allPaths=**} {
      allow read, write: if isAuthenticated()
        && isValidFileSize(100 * 1024 * 1024) // 100 MB limit for licensing files
        && isValidFileType('image/.*|application/pdf|text/.*');
    }

    // ============================================================================
    // SYSTEM FILES
    // ============================================================================
    
    // System-generated files (reports, exports, etc.)
    match /system/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if false; // System files are read-only for users
    }

    // Temporary files
    match /temp/{allPaths=**} {
      allow read, write: if isAuthenticated()
        && isValidFileSize(10 * 1024 * 1024) // 10 MB limit for temp files
        && isValidFileType('.*');
    }

    // ============================================================================
    // BACKUP FILES
    // ============================================================================
    
    // Backup files
    match /backups/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Backup files are read-only for users
    }

    // ============================================================================
    // CATCH-ALL RULE
    // ============================================================================
    
    // Explicit deny for unmatched paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
