rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // ðŸš€ STREAMLINED FIRESTORE SECURITY RULES
    // ============================================================================
    // Optimized rules for the new streamlined collections with embedded data
    // Reduces complexity while maintaining security and proper access control
    // ============================================================================
    
    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isSameOrganization(orgId) {
      return isAuthenticated() && 
             request.auth.token.organizationId == orgId;
    }
    
    function isAccountOwner() {
      return isAuthenticated() && 
             request.auth.token.userType == 'ACCOUNT_OWNER';
    }
    
    function isAdminOrOwner() {
      return isAuthenticated() && 
             (request.auth.token.userType in ['ACCOUNT_OWNER', 'ADMIN']);
    }
    
    function canManageTeam() {
      return isAuthenticated() && 
             (request.auth.token.canManageTeam == true || isAccountOwner());
    }

    // ============================================================================
    // 1. USERS COLLECTION - Single source for all user types
    // ============================================================================
    match /users/{userId} {
      // Users can read/write their own data
      allow read, write: if isOwner(userId);
      
      // Account owners can read/write team members in their org
      allow read, write: if isAccountOwner() && 
                          isSameOrganization(resource.data.organization.id);
      
      // Team members can read other members in same org (for collaboration)
      allow read: if isAuthenticated() && 
                     isSameOrganization(resource.data.organization.id);
      
      // Admin team members can manage other team members
      allow write: if canManageTeam() && 
                      isSameOrganization(resource.data.organization.id) &&
                      resource.data.userType == 'TEAM_MEMBER';
    }

    // ============================================================================
    // 2. ORGANIZATIONS COLLECTION - Simplified organization data
    // ============================================================================
    match /organizations/{orgId} {
      // Organization members can read their org data
      allow read: if isSameOrganization(orgId);
      
      // Only account owners can write org data
      allow write: if isAccountOwner() && isSameOrganization(orgId);
      
      // System can create organizations (for new account owners)
      allow create: if isAuthenticated() && 
                       request.resource.data.owner.id == request.auth.uid;
    }

    // ============================================================================
    // 3. PROJECTS COLLECTION - All project data with embedded team assignments
    // ============================================================================
    match /projects/{projectId} {
      // Project access rules
      allow read: if isAuthenticated() && (
        // Account owner can see all org projects
        (isAccountOwner() && isSameOrganization(resource.data.organization.id)) ||
        // Team members can see assigned projects
        (request.auth.uid in resource.data.teamAssignments[].userId) ||
        // Admin team members can see all org projects
        (canManageTeam() && isSameOrganization(resource.data.organization.id))
      );
      
      // Project write permissions
      allow write: if isAuthenticated() && (
        // Account owners can manage all org projects
        (isAccountOwner() && isSameOrganization(resource.data.organization.id)) ||
        // Project admins can manage their projects
        (request.auth.uid in resource.data.teamAssignments[].userId && 
         resource.data.teamAssignments[request.auth.uid].role == 'ADMIN')
      );
      
      // Project creation
      allow create: if isAuthenticated() && 
                       request.resource.data.owner.id == request.auth.uid &&
                       (isAccountOwner() || canManageTeam());
    }

    // ============================================================================
    // 4. SUBSCRIPTIONS COLLECTION - Billing and license data
    // ============================================================================
    match /subscriptions/{subscriptionId} {
      // Only account owners can access subscription data
      allow read, write: if isAccountOwner() && 
                           isSameOrganization(resource.data.organizationId);
      
      // System/webhooks can create and update subscriptions
      allow create, update: if isAuthenticated();
    }

    // ============================================================================
    // 5. PAYMENTS COLLECTION - Payment history with embedded details
    // ============================================================================
    match /payments/{paymentId} {
      // Only account owners can read payment data
      allow read: if isAccountOwner() && 
                     isSameOrganization(resource.data.organizationId);
      
      // Payments are created by system/webhooks only
      allow create: if isAuthenticated();
      
      // No updates or deletes allowed
      allow update, delete: if false;
    }

    // ============================================================================
    // 6. DATASETS COLLECTION - Dataset management with project assignments
    // ============================================================================
    match /datasets/{datasetId} {
      // Dataset access based on organization and project assignments
      allow read: if isAuthenticated() && (
        // Account owner can access all org datasets
        (isAccountOwner() && isSameOrganization(resource.data.owner.organizationId)) ||
        // Team members can access datasets assigned to their projects
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamMemberData.assignedProjects != null &&
         resource.data.assignedProjects[].projectId in 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamMemberData.assignedProjects)
      );
      
      // Dataset write permissions
      allow write: if isAuthenticated() && (
        // Account owners can manage all org datasets
        (isAccountOwner() && isSameOrganization(resource.data.owner.organizationId)) ||
        // Dataset owner can manage their datasets
        (request.auth.uid == resource.data.owner.id)
      );
      
      // Dataset creation
      allow create: if isAuthenticated() && 
                       request.resource.data.owner.id == request.auth.uid;
    }

    // ============================================================================
    // LEGACY COLLECTIONS - Temporary support during migration
    // ============================================================================
    
    // Legacy team members collection (read-only during migration)
    match /teamMembers/{memberId} {
      allow read: if isAuthenticated() && (
        resource.data.organizationId == 'default-org' ||
        request.resource.data.organizationId == 'default-org' ||
        isSameOrganization(resource.data.organizationId)
      );
      
      // No writes to legacy collection
      allow write: if false;
    }
    
    // Legacy org members collection (read-only during migration)
    match /org_members/{memberId} {
      allow read: if isAuthenticated() && (
        resource.data.organizationId == 'default-org' ||
        request.resource.data.organizationId == 'default-org' ||
        isSameOrganization(resource.data.organizationId)
      );
      
      // No writes to legacy collection
      allow write: if false;
    }

    // ============================================================================
    // SYSTEM COLLECTIONS - Admin and monitoring
    // ============================================================================
    
    // Audit logs - read-only for account owners
    match /auditLogs/{logId} {
      allow read: if isAccountOwner() && 
                     isSameOrganization(resource.data.organizationId);
      allow write: if false; // System only
    }
    
    // Usage analytics - read-only for account owners
    match /usageAnalytics/{analyticsId} {
      allow read: if isAccountOwner() && 
                     isSameOrganization(resource.data.organizationId);
      allow write: if false; // System only
    }
    
    // System settings - admin only
    match /systemSettings/{settingId} {
      allow read, write: if isAuthenticated() && 
                           request.auth.token.userType == 'ADMIN';
    }

    // ============================================================================
    // CATCH-ALL RULE - Deny access to any other collections
    // ============================================================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
